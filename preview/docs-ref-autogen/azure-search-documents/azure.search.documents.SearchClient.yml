### YamlMime:PythonClass
uid: azure.search.documents.SearchClient
name: SearchClient
fullName: azure.search.documents.SearchClient
module: azure.search.documents
inheritances:
- azure.search.documents._headers_mixin.HeadersMixin
summary: A client to interact with an existing Azure search index.
constructor:
  syntax: SearchClient(endpoint, index_name, credential, **kwargs)
  parameters:
  - name: endpoint
    description: The URL endpoint of an Azure search service
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: index_name
    description: The name of the index to connect to
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: credential
    description: A credential to authorize search client requests
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
examples:
- "Creating the SearchClient with an API key.<!--[!code-python[Main](les\\sample_authentication.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\2\\\\azure-search-documents-11.2.0b2\\\
  \\samples\\\\sample_authentication.py\", \"xml:space\": \"preserve\", \"force\"\
  : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
  linenos\": false} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
  \   from azure.search.documents import SearchClient\n\n   service_endpoint = os.getenv(\"\
  AZURE_SEARCH_SERVICE_ENDPOINT\")\n   index_name = os.getenv(\"AZURE_SEARCH_INDEX_NAME\"\
  )\n   key = os.getenv(\"AZURE_SEARCH_API_KEY\")\n\n   search_client = SearchClient(service_endpoint,\
  \ index_name, AzureKeyCredential(key))\n\n   ````\n"
methods:
- uid: azure.search.documents.SearchClient.autocomplete
  name: autocomplete
  summary: "Get search auto-completion results from the Azure search index.\n\ncollection\
    \ that's part of the index definition.\n:keyword mode: Specifies the mode for\
    \ Autocomplete. The default is 'oneTerm'. Use\n\n   'twoTerms' to get shingles\
    \ and 'oneTermWithContext' to use the current context while producing\n   auto-completed\
    \ terms. Possible values include: 'oneTerm', 'twoTerms', 'oneTermWithContext'."
  signature: autocomplete(search_text, suggester_name, **kwargs)
  return:
    types:
    - <xref:azure.search.documents.List>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  examples:
  - "Get a auto-completions.<!--[!code-python[Main](les\\sample_autocomplete.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\2\\\\\
    azure-search-documents-11.2.0b2\\\\samples\\\\sample_autocomplete.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents import SearchClient\n\
    \n   search_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\
    \n   results = search_client.autocomplete(search_text=\"bo\", suggester_name=\"\
    sg\")\n\n   print(\"Autocomplete suggestions for 'bo'\")\n   for result in results:\n\
    \       print(\"    Completion: {}\".format(result[\"text\"]))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.close
  name: close
  summary: Close the <xref:azure.search.documents.SearchClient> session.
  signature: close()
- uid: azure.search.documents.SearchClient.delete_documents
  name: delete_documents
  summary: 'Delete documents from the Azure search index


    Delete removes the specified document from the index. Any field you

    specify in a delete operation, other than the key field, will be

    ignored. If you want to remove an individual field from a document, use

    *merge_documents* instead and set the field explicitly to None.


    Delete operations are idempotent. That is, even if a document key does

    not exist in the index, attempting a delete operation with that key will

    result in a 200 status code.'
  signature: delete_documents(documents, **kwargs)
  parameters:
  - name: documents
    description: A list of documents to delete.
    isRequired: true
    types:
    - <xref:azure.search.documents.List>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  return:
    types:
    - <xref:azure.search.documents.List>[<xref:azure.search.documents.models.IndexingResult>]
  examples:
  - "Delete existing documents to an index<!--[!code-python[Main](les\\sample_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\2\\\\azure-search-documents-11.2.0b2\\\\samples\\\\sample_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = search_client.delete_documents(documents=[{\"HotelId\": \"1000\"\
    }])\n\n   print(\"Delete new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
- uid: azure.search.documents.SearchClient.get_document
  name: get_document
  summary: Retrieve a document from the Azure search index by its key.
  signature: get_document(key, selected_fields=None, **kwargs)
  parameters:
  - name: key
    description: The primary key value for the document to retrieve
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: selected_fields
    description: a whitelist of fields to include in the results
    isRequired: true
    types:
    - <xref:azure.search.documents.List>[[str](https://docs.python.org/3.6/library/stdtypes.html#str)]
  return:
    types:
    - '[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)'
  examples:
  - "Get a specific document from the search index.<!--[!code-python[Main](les\\sample_get_document.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\2\\\\azure-search-documents-11.2.0b2\\\\samples\\\\sample_get_document.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.search.documents\
    \ import SearchClient\n\n   search_client = SearchClient(service_endpoint, index_name,\
    \ AzureKeyCredential(key))\n\n   result = search_client.get_document(key=\"23\"\
    )\n\n   print(\"Details for hotel '23' are:\")\n   print(\"        Name: {}\"\
    .format(result[\"HotelName\"]))\n   print(\"      Rating: {}\".format(result[\"\
    Rating\"]))\n   print(\"    Category: {}\".format(result[\"Category\"]))\n\n \
    \  ````\n"
- uid: azure.search.documents.SearchClient.get_document_count
  name: get_document_count
  summary: Return the number of documents in the Azure search index.
  signature: get_document_count(**kwargs)
  return:
    types:
    - '[int](https://docs.python.org/3.6/library/functions.html#int)'
- uid: azure.search.documents.SearchClient.index_documents
  name: index_documents
  summary: 'Specify a document operations to perform as a batch.


    :raises <xref:azure.search.documents.RequestEntityTooLargeError>'
  signature: index_documents(batch, **kwargs)
  parameters:
  - name: batch
    description: A batch of document operations to perform.
    isRequired: true
    types:
    - <xref:azure.search.documents.IndexDocumentsBatch>
  return:
    types:
    - <xref:azure.search.documents.List>[<xref:azure.search.documents.models.IndexingResult>]
- uid: azure.search.documents.SearchClient.merge_documents
  name: merge_documents
  summary: 'Merge documents in to existing documents in the Azure search index.


    Merge updates an existing document with the specified fields. If the

    document doesn''t exist, the merge will fail. Any field you specify in a

    merge will replace the existing field in the document. This also applies

    to collections of primitive and complex types.'
  signature: merge_documents(documents, **kwargs)
  parameters:
  - name: documents
    description: A list of documents to merge.
    isRequired: true
    types:
    - <xref:azure.search.documents.List>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  return:
    types:
    - <xref:azure.search.documents.List>[<xref:azure.search.documents.models.IndexingResult>]
  examples:
  - "Merge fields into existing documents to an index<!--[!code-python[Main](les\\\
    sample_crud_operations.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\2\\\\azure-search-documents-11.2.0b2\\\\samples\\\\\
    sample_crud_operations.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   result = search_client.merge_documents(documents=[{\"\
    HotelId\": \"1000\", \"Rating\": 4.5}])\n\n   print(\"Merge into new document\
    \ succeeded: {}\".format(result[0].succeeded))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.merge_or_upload_documents
  name: merge_or_upload_documents
  summary: 'Merge documents in to existing documents in the Azure search index,

    or upload them if they do not yet exist.


    This action behaves like *merge_documents* if a document with the given

    key already exists in the index. If the document does not exist, it

    behaves like *upload_documents* with a new document.'
  signature: merge_or_upload_documents(documents, **kwargs)
  parameters:
  - name: documents
    description: A list of documents to merge or upload.
    isRequired: true
    types:
    - <xref:azure.search.documents.List>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  return:
    types:
    - <xref:azure.search.documents.List>[<xref:azure.search.documents.models.IndexingResult>]
- uid: azure.search.documents.SearchClient.search
  name: search
  summary: "Search the Azure search index for documents.\n\nmatch all documents.\n\
    :keyword bool include_total_count: A value that specifies whether to fetch the\
    \ total count of\nresults. Default is false. Setting this value to true may have\
    \ a performance impact. Note that\nthe count returned is an approximation.\n:keyword\
    \ list[str] facets: The list of facet expressions to apply to the search query.\
    \ Each facet\n\n   expression contains a field name, optionally followed by a\
    \ comma-separated list of name:value\n   pairs."
  signature: search(search_text, **kwargs)
  return:
    types:
    - <xref:azure.search.documents.SearchItemPaged>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  examples:
  - "Get search result facets.<!--[!code-python[Main](les\\sample_facet_query.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\2\\\\\
    azure-search-documents-11.2.0b2\\\\samples\\\\sample_facet_query.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents import SearchClient\n\
    \n   search_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\
    \n   results = search_client.search(search_text=\"WiFi\", facets=[\"Category,count:3\"\
    , \"ParkingIncluded\"])\n\n   facets = results.get_facets()\n\n   print(\"Catgory\
    \ facet counts for hotels:\")\n   for facet in facets[\"Category\"]:\n       print(\"\
    \    {}\".format(facet))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.suggest
  name: suggest
  summary: "Get search suggestion results from the Azure search index.\n\ncharacter,\
    \ and no more than 100 characters.\n:param str suggester_name: Required. The name\
    \ of the suggester as specified in the suggesters\ncollection that's part of the\
    \ index definition.\n:keyword str filter: An OData expression that filters the\
    \ documents considered for suggestions.\n:keyword bool use_fuzzy_matching: A value\
    \ indicating whether to use fuzzy matching for the suggestions\n\n   query. Default\
    \ is false. When set to true, the query will find terms even if there's a\n  \
    \ substituted or missing character in the search text. While this provides a better\
    \ experience in\n   some scenarios, it comes at a performance cost as fuzzy suggestions\
    \ queries are slower and\n   consume more resources."
  signature: suggest(search_text, suggester_name, **kwargs)
  return:
    types:
    - <xref:azure.search.documents.List>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  examples:
  - "Get search suggestions.<!--[!code-python[Main](les\\sample_suggestions.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\2\\\\\
    azure-search-documents-11.2.0b2\\\\samples\\\\sample_suggestions.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents import SearchClient\n\
    \n   search_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\
    \n   results = search_client.suggest(search_text=\"coffee\", suggester_name=\"\
    sg\")\n\n   print(\"Search suggestions for 'coffee'\")\n   for result in results:\n\
    \       hotel = search_client.get_document(key=result[\"HotelId\"])\n       print(\"\
    \    Text: {} for Hotel: {}\".format(repr(result[\"text\"]), hotel[\"HotelName\"\
    ]))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.upload_documents
  name: upload_documents
  summary: 'Upload documents to the Azure search index.


    An upload action is similar to an "upsert" where the document will be

    inserted if it is new and updated/replaced if it exists. All fields are

    replaced in the update case.'
  signature: upload_documents(documents, **kwargs)
  parameters:
  - name: documents
    description: A list of documents to upload.
    isRequired: true
    types:
    - <xref:azure.search.documents.List>[[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)]
  return:
    types:
    - <xref:azure.search.documents.List>[<xref:azure.search.documents.models.IndexingResult>]
  examples:
  - "Upload new documents to an index<!--[!code-python[Main](les\\sample_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\2\\\\azure-search-documents-11.2.0b2\\\\samples\\\\sample_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   DOCUMENT = {\n       'Category': 'Hotel',\n       'HotelId': '1000',\n  \
    \     'Rating': 4.0,\n       'Rooms': [],\n       'HotelName': 'Azure Inn',\n\
    \   }\n\n   result = search_client.upload_documents(documents=[DOCUMENT])\n\n\
    \   print(\"Upload of new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
