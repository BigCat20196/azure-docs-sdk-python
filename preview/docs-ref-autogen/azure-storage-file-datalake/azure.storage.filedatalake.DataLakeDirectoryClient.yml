### YamlMime:PythonClass
uid: azure.storage.filedatalake.DataLakeDirectoryClient
name: DataLakeDirectoryClient
fullName: azure.storage.filedatalake.DataLakeDirectoryClient
module: azure.storage.filedatalake
inheritances:
- azure.storage.filedatalake._path_client.PathClient
summary: 'A client to interact with the DataLake directory, even if the directory
  may not yet exist.


  For operations relating to a specific subdirectory or file under the directory,
  a directory client or file client

  can be retrieved using the <xref:azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client>
  or <xref:azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client> functions.'
constructor:
  syntax: DataLakeDirectoryClient(account_url, file_system_name, directory_name, credential=None,
    **kwargs)
  parameters:
  - name: account_url
    description: The URI to the storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: file_system_name
    description: The file system for the directory or files.
    isRequired: true
    types:
    - <xref:str>
  - name: directory_name
    description: The whole path of the directory. eg. {directory under file system}/{directory
      to interact with}
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string,

      an instance of a AzureSasCredential from azure.core.credentials, and account

      shared access key, or an instance of a TokenCredentials class from azure.identity.

      If the resource URI already contains a SAS token, this will be ignored in favor
      of an explicit credential

      - except in the case of AzureSasCredential, where the conflicting SAS tokens
      will raise a ValueError.'
    isRequired: true
variables:
- description: The full endpoint URL to the file system, including SAS token if used.
  name: url
  types:
  - <xref:str>
- description: The full primary endpoint URL.
  name: primary_endpoint
  types:
  - <xref:str>
- description: The hostname of the primary endpoint.
  name: primary_hostname
  types:
  - <xref:str>
examples:
- "Creating the DataLakeServiceClient from connection string.<!--[!code-python[Main](les\\\
  datalake_samples_instantiate_client.py )]-->\n\n<!-- literal_block {\"ids\": [],\
  \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\73\\\\azure-storage-file-datalake-12.4.0b1\\\
  \\samples\\\\datalake_samples_instantiate_client.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.storage.filedatalake\
  \ import DataLakeDirectoryClient\n   DataLakeDirectoryClient.from_connection_string(connection_string,\
  \ \"myfilesystem\", \"mydirectory\")\n\n   ````\n"
methods:
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_directory
  name: create_directory
  summary: Create a new directory.
  signature: create_directory(metadata=None, **kwargs)
  parameters:
  - name: metadata
    description: Name-value pairs associated with the file as metadata.
    defaultValue: None
    types:
    - <xref:dict>(<xref:str>, <xref:str>)
  return:
    description: response dict (Etag and last modified).
  examples:
  - "Create directory.<!--[!code-python[Main](les\\datalake_samples_directory.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\73\\\\\
    azure-storage-file-datalake-12.4.0b1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   directory_client.create_directory()\n\n   ````\n"
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_file
  name: create_file
  summary: Create a new file and return the file client to be interacted with.
  signature: create_file(file, **kwargs)
  parameters:
  - name: file
    description: 'The file with which to interact. This can either be the name of
      the file,

      or an instance of FileProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.filedatalake.FileProperties>
  return:
    description: DataLakeFileClient
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_sub_directory
  name: create_sub_directory
  summary: Create a subdirectory and return the subdirectory client to be interacted
    with.
  signature: create_sub_directory(sub_directory, metadata=None, **kwargs)
  parameters:
  - name: sub_directory
    description: 'The directory with which to interact. This can either be the name
      of the directory,

      or an instance of DirectoryProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.filedatalake.DirectoryProperties>
  - name: metadata
    description: Name-value pairs associated with the file as metadata.
    defaultValue: None
    types:
    - <xref:dict>(<xref:str>, <xref:str>)
  return:
    description: DataLakeDirectoryClient for the subdirectory.
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.delete_directory
  name: delete_directory
  summary: Marks the specified directory for deletion.
  signature: delete_directory(**kwargs)
  return:
    description: None
  examples:
  - "Delete directory.<!--[!code-python[Main](les\\datalake_samples_directory.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\73\\\\\
    azure-storage-file-datalake-12.4.0b1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   new_directory.delete_directory()\n\n   ````\n"
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.delete_sub_directory
  name: delete_sub_directory
  summary: Marks the specified subdirectory for deletion.
  signature: delete_sub_directory(sub_directory, **kwargs)
  parameters:
  - name: sub_directory
    description: 'The directory with which to interact. This can either be the name
      of the directory,

      or an instance of DirectoryProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.filedatalake.DirectoryProperties>
  return:
    description: DataLakeDirectoryClient for the subdirectory
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.exists
  name: exists
  summary: Returns True if a directory exists and returns False otherwise.
  signature: exists(**kwargs)
  return:
    description: boolean
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.from_connection_string
  name: from_connection_string
  summary: 'Create DataLakeDirectoryClient from a Connection String.


    :return a DataLakeDirectoryClient

    :rtype ~azure.storage.filedatalake.DataLakeDirectoryClient'
  signature: from_connection_string(conn_str, file_system_name, directory_name, credential=None,
    **kwargs)
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: file_system_name
    description: The name of file system to interact with.
    isRequired: true
    types:
    - <xref:str>
  - name: directory_name
    description: The name of directory to interact with. The directory is under file
      system.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string,

      an instance of a AzureSasCredential from azure.core.credentials, and account
      shared access

      key, or an instance of a TokenCredentials class from azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.'
    isRequired: true
  - name: credential
    defaultValue: None
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_directory_properties
  name: get_directory_properties
  summary: 'Returns all user-defined metadata, standard HTTP properties, and

    system properties for the directory. It does not return the content of the directory.'
  signature: get_directory_properties(**kwargs)
  return:
    types:
    - <xref:azure.storage.filedatalake.DirectoryProperties>
  examples:
  - "Getting the properties for a file/directory.<!--[!code-python[Main](les\\datalake_samples_directory.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\73\\\\azure-storage-file-datalake-12.4.0b1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   props = new_directory.get_directory_properties()\n\n   ````\n"
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client
  name: get_file_client
  summary: 'Get a client to interact with the specified file.


    The file need not already exist.'
  signature: get_file_client(file)
  parameters:
  - name: file
    description: 'The file with which to interact. This can either be the name of
      the file,

      or an instance of FileProperties. eg. directory/subdirectory/file'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.filedatalake.FileProperties>
  return:
    description: A DataLakeFileClient.
    types:
    - <xref:azure.storage.filedatalake.DataLakeFileClient>
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client
  name: get_sub_directory_client
  summary: 'Get a client to interact with the specified subdirectory of the current
    directory.


    The sub subdirectory need not already exist.'
  signature: get_sub_directory_client(sub_directory)
  parameters:
  - name: sub_directory
    description: 'The directory with which to interact. This can either be the name
      of the directory,

      or an instance of DirectoryProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.filedatalake.DirectoryProperties>
  return:
    description: A DataLakeDirectoryClient.
    types:
    - <xref:azure.storage.filedatalake.DataLakeDirectoryClient>
- uid: azure.storage.filedatalake.DataLakeDirectoryClient.rename_directory
  name: rename_directory
  summary: Rename the source directory.
  signature: rename_directory(new_name, **kwargs)
  parameters:
  - name: new_name
    description: 'the new directory name the user want to rename to.

      The value must have the following format: "{filesystem}/{directory}/{subdirectory}".'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: DataLakeDirectoryClient
  examples:
  - "Rename the source directory.<!--[!code-python[Main](les\\datalake_samples_directory.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\73\\\\azure-storage-file-datalake-12.4.0b1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   new_dir_name = \"testdir2\"\n   print(\"Renaming the directory named '{}'\
    \ to '{}'.\".format(dir_name, new_dir_name))\n   new_directory = directory_client\\\
    \n       .rename_directory(new_name=directory_client.file_system_name + '/' +\
    \ new_dir_name)\n\n   ````\n"
