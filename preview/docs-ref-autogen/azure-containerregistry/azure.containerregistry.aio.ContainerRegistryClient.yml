### YamlMime:PythonClass
uid: azure.containerregistry.aio.ContainerRegistryClient
name: ContainerRegistryClient
fullName: azure.containerregistry.aio.ContainerRegistryClient
module: azure.containerregistry.aio
inheritances:
- azure.containerregistry.aio._async_base_client.ContainerRegistryBaseClient
constructor:
  syntax: 'ContainerRegistryClient(endpoint: str, credential: AsyncTokenCredential,
    **kwargs: typing.Dict[str, typing.Any]) -> None'
methods:
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_repository
  name: delete_repository
  summary: Delete a repository
  signature: 'delete_repository(repository_name: str, **kwargs: typing.Dict[str, typing.Any])
    -> azure.containerregistry._models.DeleteRepositoryResult'
  parameters:
  - name: repository_name
    description: The repository to delete
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Object containing information about the deleted repository
    types:
    - <xref:azure.containerregistry.DeleteRepositoryResult>
  examples:
  - "Delete a repository from the *ContainerRegistryClient*<!--[!code-python[Main](les\\\
    async_samples\\sample_create_client_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\77\\\\azure-containerregistry-1.0.0b2\\\\\
    samples\\\\async_samples\\\\sample_create_client_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n               await\
    \ client.delete_repository(\"hello-world\")\n\n   ````\n"
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_artifact
  name: get_artifact
  summary: Get a Registry Artifact object
  signature: 'get_artifact(repository_name: str, tag_or_digest: str, **kwargs: typing.Dict[str,
    typing.Any]) -> azure.containerregistry.aio._async_registry_artifact.RegistryArtifact'
  parameters:
  - name: repository_name
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: The tag or digest of the artifact
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:azure.containerregistry.RegistryArtifact>
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_repository
  name: get_repository
  summary: 'Get a repository client


    Example'
  signature: 'get_repository(repository_name: str, **kwargs: typing.Any) -> azure.containerregistry.aio._async_container_repository.ContainerRepository'
  parameters:
  - name: repository_name
    description: The repository to create a client for
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:azure.containerregistry.aio.ContainerRepository>
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_repository_names
  name: list_repository_names
  summary: "List all repositories\n:keyword last: Query parameter for the last item\
    \ in the previous call. Ensuing\n\n   call will return values after last lexicallyy"
  signature: 'list_repository_names(**kwargs: typing.Dict[str, typing.Any]) -> azure.core.async_paging.AsyncItemPaged'
  return:
    description: ItemPaged[str]
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>
  examples:
  - "List repositories in a container registry account<!--[!code-python[Main](les\\\
    async_samples\\sample_delete_old_tags_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\77\\\\azure-containerregistry-1.0.0b2\\\
    \\samples\\\\async_samples\\\\sample_delete_old_tags_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   account_url\
    \ = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\
    \   client = ContainerRegistryClient(account_url, credential)\n\n   async for\
    \ repository in client.list_repository_names():\n       repository_client = ContainerRepositoryClient(account_url,\
    \ repository, credential)\n\n   ````\n"
