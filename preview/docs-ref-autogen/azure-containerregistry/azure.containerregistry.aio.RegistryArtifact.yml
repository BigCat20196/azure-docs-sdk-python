### YamlMime:PythonClass
uid: azure.containerregistry.aio.RegistryArtifact
name: RegistryArtifact
fullName: azure.containerregistry.aio.RegistryArtifact
module: azure.containerregistry.aio
inheritances:
- azure.containerregistry.aio._async_base_client.ContainerRegistryBaseClient
methods:
- uid: azure.containerregistry.aio.RegistryArtifact.delete
  name: delete
  summary: "Delete a repository\n:returns: Object containing information about the\
    \ deleted repository\n:rtype: <xref:azure.containerregistry.DeleteRepositoryResult>\n\
    :raises: <xref:azure.core.exceptions.ResourceNotFoundError>\n\nExample\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\", \"\
    linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRepositoryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   account_url = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRepositoryClient(account_url,\
    \ \"my_repository\", DefaultAzureCredential())\n   await client.delete()\n   ````"
  signature: 'delete(**kwargs: typing.Dict[str, typing.Any]) -> azure.containerregistry._models.DeleteRepositoryResult'
- uid: azure.containerregistry.aio.RegistryArtifact.delete_tag
  name: delete_tag
  summary: "Delete a tag from a repository\n:param str tag: The tag to be deleted\n\
    :returns: None\n:raises: <xref:azure.core.exceptions.ResourceNotFoundError>\n\n\
    Example\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n  \
    \ from azure.containerregistry.aio import ContainerRepositoryClient\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   account_url = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"\
    ]\n   client = ContainerRepositoryClient(account_url, \"my_repository\", DefaultAzureCredential())\n\
    \   async for artifact in client.list_tags():\n       await client.delete_tag(tag.name)\n\
    \   ````"
  signature: 'delete_tag(tag: str, **kwargs: typing.Dict[str, typing.Any]) -> None'
- uid: azure.containerregistry.aio.RegistryArtifact.get_manifest_properties
  name: get_manifest_properties
  summary: "Get the properties of a registry artifact\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false,\
    \ \"highlight_args\": {}} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRepositoryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   account_url = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRepositoryClient(account_url,\
    \ \"my_repository\", DefaultAzureCredential())\n   async for artifact in client.list_manifests():\n\
    \       properties = await client.get_registry_artifact_properties(artifact.digest)\n\
    \   ````"
  signature: 'get_manifest_properties(**kwargs: typing.Dict[str, typing.Any]) -> azure.containerregistry._models.ArtifactManifestProperties'
  return:
    description: azure.containerregistry.ArtifactManifestProperties
- uid: azure.containerregistry.aio.RegistryArtifact.get_tag_properties
  name: get_tag_properties
  summary: "Get the properties for a tag\n:param tag: The tag to get properties for\n\
    :type tag: str\n:returns: <xref:azure.containerregistry.ArtifactTagProperties>\n\
    :raises: <xref:azure.core.exceptions.ResourceNotFoundError>\n\nExample\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\", \"\
    linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRepositoryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   account_url = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRepositoryClient(account_url,\
    \ \"my_repository\", DefaultAzureCredential())\n   async for tag in client.list_tags():\n\
    \       tag_properties = await client.get_tag_properties(tag.name)\n   ````"
  signature: 'get_tag_properties(tag: str, **kwargs: typing.Dict[str, typing.Any])
    -> azure.containerregistry._models.ArtifactTagProperties'
- uid: azure.containerregistry.aio.RegistryArtifact.list_tags
  name: list_tags
  summary: "List the tags for a repository\n:keyword last: Query parameter for the\
    \ last item in the previous call. Ensuing\n\n\n   call will return values after\
    \ last lexically\n\n\nExample\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n\
    ````python\n\n   from azure.containerregistry.aio import ContainerRepositoryClient\n\
    \   from azure.identity.aio import DefaultAzureCredential\n   account_url = os.environ[\"\
    CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRepositoryClient(account_url,\
    \ \"my_repository\", DefaultAzureCredential())\n   async for tag in client.list_tags():\n\
    \       tag_properties = await client.get_tag_properties(tag.name)\n   ````"
  signature: 'list_tags(**kwargs: typing.Dict[str, typing.Any]) -> azure.core.async_paging.AsyncItemPaged[azure.containerregistry._models.ArtifactTagProperties]'
  parameters:
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.TagOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: ItemPaged[<xref:azure.containerregistry.ArtifactTagProperties>]
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.RegistryArtifact.set_manifest_properties
  name: set_manifest_properties
  summary: "Set the properties for a manifest\n\nExample\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {}} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRepositoryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   account_url = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRepositoryClient(account_url,\
    \ \"my_repository\", DefaultAzureCredential())\n   async for artifact in client.list_manifests():\n\
    \       received_permissions = await client.set_manifest_properties(\n       \
    \    artifact.digest,\n           ContentProperties(\n               can_delete=False,\n\
    \               can_list=False,\n               can_read=False,\n            \
    \   can_write=False,\n           ),\n       )\n   ````"
  signature: 'set_manifest_properties(permissions: azure.containerregistry._models.ContentProperties,
    **kwargs: typing.Dict[str, typing.Any]) -> azure.containerregistry._models.ArtifactManifestProperties'
  parameters:
  - name: permissions
    description: The property's values to be set
    isRequired: true
    types:
    - <xref:ContentProperties>
  return:
    description: azure.containerregistry.ArtifactManifestProperties
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.RegistryArtifact.set_tag_properties
  name: set_tag_properties
  summary: "Set the properties for a tag\n:param tag: Tag to set properties for\n\
    :type tag: str\n:param permissions: The property's values to be set\n:type permissions:\
    \ ContentProperties\n:returns: <xref:azure.containerregistry.ArtifactTagProperties>\n\
    :raises: <xref:azure.core.exceptions.ResourceNotFoundError>\n\nExample\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\", \"\
    linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRepositoryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   account_url = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRepositoryClient(account_url,\
    \ \"my_repository\", DefaultAzureCredential())\n   tag_identifier = \"latest\"\
    \n   received = await client.set_tag_properties(\n       tag_identifier,\n   \
    \    ContentProperties(\n           can_delete=False,\n           can_list=False,\n\
    \           can_read=False,\n           can_write=False,\n       ),\n   )\n  \
    \ ````"
  signature: 'set_tag_properties(tag: str, permissions: azure.containerregistry._models.ContentProperties,
    **kwargs: typing.Dict[str, typing.Any]) -> azure.containerregistry._models.ArtifactTagProperties'
