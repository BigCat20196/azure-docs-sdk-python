### YamlMime:PythonClass
uid: azure.servicebus.aio.AutoLockRenew
name: AutoLockRenew
fullName: azure.servicebus.aio.AutoLockRenew
module: azure.servicebus.aio
inheritances:
- builtins.object
summary: 'Auto lock renew.


  An asynchronous AutoLockRenew handler for renewing the lock

  tokens of messages and/or sessions in the background.'
constructor:
  syntax: AutoLockRenew(loop=None)
  parameters:
  - name: loop
    description: An async event loop.
    types:
    - <xref:asyncio.EventLoop>
examples:
- "Automatically renew a message lock<!--[!code-python[Main](les\\async_samples\\\
  sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\
  \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\":\
  \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from azure.servicebus.aio import AutoLockRenew\n\n   lock_renewal\
  \ = AutoLockRenew()\n   async with servicebus_receiver:\n       async for message\
  \ in servicebus_receiver:\n           lock_renewal.register(message, timeout=60)\n\
  \           await process_message(message)\n           await message.complete()\n\
  \n   ````\n\nAutomatically renew a session lock<!--[!code-python[Main](les\\async_samples\\\
  sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\
  \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\":\
  \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n       from azure.servicebus.aio import AutoLockRenew\n\n      \
  \ lock_renewal = AutoLockRenew()\n       async with servicebus_client.get_queue_session_receiver(queue_name=queue_name,\
  \ session_id=session_id) as receiver:\n           session = receiver.session\n \
  \          # Auto renew session lock for 2 minutes\n           lock_renewal.register(session,\
  \ timeout=120)\n           async for message in receiver:\n               await\
  \ process_message(message)\n               await message.complete()\n\n   ````\n"
methods:
- uid: azure.servicebus.aio.AutoLockRenew.register
  name: register
  summary: Register a renewable entity for automatic lock renewal.
  signature: register(renewable, timeout=300)
  parameters:
  - name: renewable
    description: A locked entity that needs to be renewed.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.ReceivedMessage>
    - <xref:azure.servicebus.aio.Session>
  - name: timeout
    description: 'A time in seconds that the lock should be maintained for.

      Default value is 300 (5 minutes).'
    defaultValue: '300'
    types:
    - <xref:float>
- uid: azure.servicebus.aio.AutoLockRenew.shutdown
  name: shutdown
  summary: Cancel remaining open lock renewal futures.
  signature: shutdown()
