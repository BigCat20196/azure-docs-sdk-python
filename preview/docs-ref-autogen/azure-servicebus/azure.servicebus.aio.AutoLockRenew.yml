### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.AutoLockRenew.close
  - azure.servicebus.aio.AutoLockRenew.register
  class: azure.servicebus.aio.AutoLockRenew
  example:
  - "Automatically renew a message lock<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   from azure.servicebus.aio import AutoLockRenew\n\n   lock_renewal\
    \ = AutoLockRenew()\n   async with servicebus_receiver:\n       async for message\
    \ in servicebus_receiver:\n           lock_renewal.register(message, timeout=60)\n\
    \           await process_message(message)\n           await message.complete()\n\
    \n   ````\n\nAutomatically renew a session lock<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n       from azure.servicebus.aio import AutoLockRenew\n\n    \
    \   lock_renewal = AutoLockRenew()\n       async with servicebus_client.get_queue_session_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           # Auto renew session lock for 2 minutes\n           lock_renewal.register(session,\
    \ timeout=120)\n           async for message in receiver:\n               await\
    \ process_message(message)\n               await message.complete()\n\n   ````\n"
  fullName: azure.servicebus.aio.AutoLockRenew
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.aio
  name: AutoLockRenew
  summary: 'Auto lock renew.


    An asynchronous AutoLockRenew handler for renewing the lock

    tokens of messages and/or sessions in the background.'
  syntax:
    content: 'AutoLockRenew(loop: typing.Union[asyncio.base_events.BaseEventLoop,
      NoneType] = None) -> None'
    parameters:
    - description: An async event loop.
      id: loop
      type:
      - asyncio.BaseEventLoop
  type: class
  uid: azure.servicebus.aio.AutoLockRenew
- class: azure.servicebus.aio.AutoLockRenew
  fullName: azure.servicebus.aio.AutoLockRenew.close
  langs:
  - python
  module: azure.servicebus.aio
  name: close() -> None
  namewithoutparameters: close
  summary: Cease autorenewal by cancelling any remaining open lock renewal futures.
  syntax:
    content: close() -> None
  type: method
  uid: azure.servicebus.aio.AutoLockRenew.close
- class: azure.servicebus.aio.AutoLockRenew
  fullName: azure.servicebus.aio.AutoLockRenew.register
  langs:
  - python
  module: azure.servicebus.aio
  name: 'register(renewable: typing.Union[azure.servicebus.aio._async_message.ReceivedMessage,
    azure.servicebus.aio._servicebus_session_async.ServiceBusSession], timeout: float
    = 300, on_lock_renew_failure: typing.Union[typing.Callable[[typing.Union[azure.servicebus.aio._servicebus_session_async.ServiceBusSession,
    azure.servicebus.aio._async_message.ReceivedMessage], typing.Union[Exception,
    NoneType]], typing.Awaitable[NoneType]], NoneType] = None) -> None'
  namewithoutparameters: register
  summary: Register a renewable entity for automatic lock renewal.
  syntax:
    content: 'register(renewable: typing.Union[azure.servicebus.aio._async_message.ReceivedMessage,
      azure.servicebus.aio._servicebus_session_async.ServiceBusSession], timeout:
      float = 300, on_lock_renew_failure: typing.Union[typing.Callable[[typing.Union[azure.servicebus.aio._servicebus_session_async.ServiceBusSession,
      azure.servicebus.aio._async_message.ReceivedMessage], typing.Union[Exception,
      NoneType]], typing.Awaitable[NoneType]], NoneType] = None) -> None'
    parameters:
    - description: A locked entity that needs to be renewed.
      id: renewable
      isRequired: true
      type:
      - Union[azure.servicebus.aio.ReceivedMessage,azure.servicebus.aio.ServiceBusSession]
    - description: 'A time in seconds that the lock should be maintained for.

        Default value is 300 (5 minutes).'
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'An async callback may be specified to be called when the lock
        is lost on the renewable being registered.

        Default value is None (no callback).'
      id: on_lock_renew_failure
      isRequired: true
      type:
      - Optional[AsyncLockRenewFailureCallback]
  type: method
  uid: azure.servicebus.aio.AutoLockRenew.register
references:
- fullName: azure.servicebus.aio.AutoLockRenew.close
  isExternal: false
  name: close() -> None
  parent: azure.servicebus.aio.AutoLockRenew
  uid: azure.servicebus.aio.AutoLockRenew.close
- fullName: azure.servicebus.aio.AutoLockRenew.register
  isExternal: false
  name: 'register(renewable: typing.Union[azure.servicebus.aio._async_message.ReceivedMessage,
    azure.servicebus.aio._servicebus_session_async.ServiceBusSession], timeout: float
    = 300, on_lock_renew_failure: typing.Union[typing.Callable[[typing.Union[azure.servicebus.aio._servicebus_session_async.ServiceBusSession,
    azure.servicebus.aio._async_message.ReceivedMessage], typing.Union[Exception,
    NoneType]], typing.Awaitable[NoneType]], NoneType] = None) -> None'
  parent: azure.servicebus.aio.AutoLockRenew
  uid: azure.servicebus.aio.AutoLockRenew.register
- fullName: Union[azure.servicebus.aio.ReceivedMessage,azure.servicebus.aio.ServiceBusSession]
  name: Union[ServiceBusSession]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.aio.ReceivedMessage,azure.servicebus.aio.ServiceBusSession
    name: ServiceBusSession
    uid: azure.servicebus.aio.ReceivedMessage,azure.servicebus.aio.ServiceBusSession
  - fullName: ']'
    name: ']'
  uid: Union[azure.servicebus.aio.ReceivedMessage,azure.servicebus.aio.ServiceBusSession]
- fullName: Optional[AsyncLockRenewFailureCallback]
  name: Optional[AsyncLockRenewFailureCallback]
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: AsyncLockRenewFailureCallback
    name: AsyncLockRenewFailureCallback
    uid: AsyncLockRenewFailureCallback
  - fullName: ']'
    name: ']'
  uid: Optional[AsyncLockRenewFailureCallback]
