### YamlMime:PythonClass
uid: azure.servicebus.ReceivedMessage
name: ReceivedMessage
fullName: azure.servicebus.ReceivedMessage
module: azure.servicebus
inheritances:
- azure.servicebus._common.message.ReceivedMessageBase
constructor:
  syntax: 'ReceivedMessage(message, receive_mode=<ReceiveMode.PeekLock: <ReceiverSettleMode.PeekLock:
    1>>, **kwargs)'
methods:
- uid: azure.servicebus.ReceivedMessage.abandon
  name: abandon
  summary: 'Abandon the message.


    This message will be returned to the queue and made available to be received again.'
  signature: abandon()
  return:
    types:
    - <xref:None>
  examples:
  - "Abandoning a received message to return it immediately to the queue.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n       messages = servicebus_receiver.receive_messages(max_wait_time=5)\n\
    \       for message in messages:\n           message.abandon()\n\n   ````\n"
- uid: azure.servicebus.ReceivedMessage.complete
  name: complete
  summary: 'Complete the message.


    This removes the message from the queue.'
  signature: complete()
  return:
    types:
    - <xref:None>
  examples:
  - "Completing a received message to remove it from the queue.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   with servicebus_receiver:\n       messages = servicebus_receiver.receive_messages(max_wait_time=5)\n\
    \       for message in messages:\n           print(str(message))\n           message.complete()\n\
    \n   ````\n"
- uid: azure.servicebus.ReceivedMessage.dead_letter
  name: dead_letter
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.'
  signature: dead_letter(reason=None, error_description=None)
  parameters:
  - name: reason
    description: The reason for dead-lettering the message.
    defaultValue: None
    types:
    - <xref:str>
  - name: error_description
    description: The detailed error description for dead-lettering the message.
    defaultValue: None
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
  examples:
  - "Dead letter a message to remove it from the queue by sending it to the dead letter\
    \ subqueue,\nand receiving it from there.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n       with servicebus_client.get_queue_receiver(queue_name) as servicebus_receiver:\n\
    \           messages = servicebus_receiver.receive_messages(max_wait_time=5)\n\
    \           for message in messages:\n               message.dead_letter(reason='reason\
    \ for dead lettering', description='description for dead lettering')\n\n     \
    \  with servicebus_client.get_queue_deadletter_receiver(queue_name) as servicebus_deadletter_receiver:\n\
    \           messages = servicebus_deadletter_receiver.receive_messages(max_wait_time=5)\n\
    \           for message in messages:\n               message.complete()\n\n  \
    \ ````\n"
- uid: azure.servicebus.ReceivedMessage.defer
  name: defer
  summary: 'Defer the message.


    This message will remain in the queue but must be requested

    specifically by its sequence number in order to be received.'
  signature: defer()
  return:
    types:
    - <xref:None>
  examples:
  - "Deferring a received message sets it aside such that it can only be received\n\
    by calling receive_deffered_messages with its sequence number<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   with servicebus_receiver:\n       deferred_sequenced_numbers\
    \ = []\n       messages = servicebus_receiver.receive_messages(max_wait_time=5)\n\
    \       for message in messages:\n           deferred_sequenced_numbers.append(message.sequence_number)\n\
    \           print(str(message))\n           message.defer()\n\n       received_deferred_msg\
    \ = servicebus_receiver.receive_deferred_messages(\n           sequence_numbers=deferred_sequenced_numbers\n\
    \       )\n\n       for msg in received_deferred_msg:\n           msg.complete()\n\
    \n   ````\n"
- uid: azure.servicebus.ReceivedMessage.renew_lock
  name: renew_lock
  summary: 'Renew the message lock.


    This will maintain the lock on the message to ensure it is not returned to the
    queue

    to be reprocessed.


    In order to complete (or otherwise settle) the message, the lock must be maintained,

    and cannot already have expired; an expired lock cannot be renewed.


    Messages received via ReceiveAndDelete mode are not locked, and therefore cannot
    be renewed.

    This operation is only available for non-sessionful messages as well.


    Lock renewal can be performed as a background task by registering the message
    with an

    *azure.servicebus.AutoLockRenew* instance.'
  signature: renew_lock()
  return:
    description: The utc datetime the lock is set to expire at.
    types:
    - <xref:datetime.datetime>
