### YamlMime:PythonClass
uid: azure.servicebus.ServiceBusReceiver
name: ServiceBusReceiver
fullName: azure.servicebus.ServiceBusReceiver
module: azure.servicebus
inheritances:
- azure.servicebus._base_handler.BaseHandler
- azure.servicebus._common.receiver_mixins.ReceiverMixin
summary: 'The ServiceBusReceiver class defines a high level interface for

  receiving messages from the Azure Service Bus Queue or Topic Subscription.'
constructor:
  syntax: ServiceBusReceiver(fully_qualified_namespace, credential, **kwargs)
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Service Bus namespace.

      The namespace format is: *<yournamespace>.servicebus.windows.net*.'
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

      generated by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    types:
    - <xref:str>
  - name: topic_name
    description: 'The path of specific Service Bus Topic which contains the Subscription

      the client connects to.'
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The path of specific Service Bus Subscription under the

      specified Topic the client connects to.'
    types:
    - <xref:str>
  - name: prefetch
    description: 'The maximum number of messages to cache with each request to the
      service.

      The default value is 0, meaning messages will be received from the service and
      processed

      one at a time. Increasing this value will improve message throughput performance
      but increase

      the change that messages will expire while they are cached if they''re not processed
      fast enough.'
    types:
    - <xref:int>
  - name: idle_timeout
    description: 'The timeout in seconds between received messages after which the
      receiver will

      automatically shutdown. The default value is 0, meaning no timeout.'
    types:
    - <xref:float>
  - name: mode
    description: 'The mode with which messages will be retrieved from the entity.
      The two options

      are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be settled
      within a given

      lock period before they will be removed from the queue. Messages received with
      ReceiveAndDelete

      will be immediately removed from the queue, and cannot be subsequently rejected
      or re-received if

      the client fails to process the message. The default mode is PeekLock.'
    types:
    - <xref:azure.servicebus.ReceiveSettleMode>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    types:
    - <xref:int>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
variables:
- description: 'The fully qualified host name for the Service Bus namespace.

    The namespace format is: *<yournamespace>.servicebus.windows.net*.'
  name: fully_qualified_namespace
  types:
  - str
- description: The path of the entity that the client connects to.
  name: entity_path
  types:
  - str
examples:
- "Create a new instance of the ServiceBusReceiver.<!--[!code-python[Main](les\\sync_samples\\\
  sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\sync_samples\\\
  \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
  , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
  \n   import os\n   from azure.servicebus import ServiceBusReceiver, ServiceBusSharedKeyCredential\n\
  \   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
  \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
  \   queue_receiver = ServiceBusReceiver(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
  \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.servicebus.ServiceBusReceiver.from_connection_string
  name: from_connection_string
  summary: Create a ServiceBusReceiver from a connection string.
  signature: from_connection_string(conn_str, **kwargs)
  parameters:
  - name: conn_str
    description: The connection string of a Service Bus.
    isRequired: true
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: 'The path of specific Service Bus Topic which contains the Subscription

      the client connects to.'
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The path of specific Service Bus Subscription under the

      specified Topic the client connects to.'
    isRequired: true
    types:
    - <xref:str>
  - name: mode
    description: 'The mode with which messages will be retrieved from the entity.
      The two options

      are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be settled
      within a given

      lock period before they will be removed from the queue. Messages received with
      ReceiveAndDelete

      will be immediately removed from the queue, and cannot be subsequently rejected
      or re-received if

      the client fails to process the message. The default mode is PeekLock.'
    isRequired: true
    types:
    - <xref:azure.servicebus.ReceiveSettleMode>
  - name: prefetch
    description: 'The maximum number of messages to cache with each request to the
      service.

      The default value is 0, meaning messages will be received from the service and
      processed

      one at a time. Increasing this value will improve message throughput performance
      but increase

      the change that messages will expire while they are cached if they''re not processed
      fast enough.'
    isRequired: true
    types:
    - <xref:int>
  - name: idle_timeout
    description: 'The timeout in seconds between received messages after which the
      receiver will

      automatically shutdown. The default value is 0, meaning no timeout.'
    isRequired: true
    types:
    - <xref:float>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    isRequired: true
    types:
    - <xref:bool>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    isRequired: true
    types:
    - <xref:int>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    isRequired: true
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    isRequired: true
    types:
    - <xref:dict>
  return:
    types:
    - <xref:azure.servicebus.ServiceBusReceiver>
  examples:
  - "Create a new instance of the ServiceBusReceiver from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusReceiver\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   queue_receiver = ServiceBusReceiver.from_connection_string(\n\
    \       conn_str=servicebus_connection_str,\n       queue_name=queue_name\n  \
    \ )\n\n   ````\n"
- uid: azure.servicebus.ServiceBusReceiver.next
  name: next
  signature: next()
- uid: azure.servicebus.ServiceBusReceiver.peek
  name: peek
  summary: 'Browse messages currently pending in the queue.


    Peeked messages are not removed from queue, nor are they locked. They cannot be
    completed,

    deferred or dead-lettered.'
  signature: peek(message_count=1, sequence_number=None)
  parameters:
  - name: message_count
    description: 'The maximum number of messages to try and peek. The default

      value is 1.'
    defaultValue: '1'
    types:
    - <xref:int>
  - name: sequence_number
    description: A message sequence number from which to start browsing messages.
    defaultValue: None
    types:
    - <xref:int>
  return:
    types:
    - <xref:list>[<xref:azure.servicebus.PeekMessage>]
  examples:
  - "Look at pending messages in the queue.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_receiver:\n       messages = servicebus_receiver.peek()\n\
    \       for message in messages:\n           print(message)\n\n   ````\n"
- uid: azure.servicebus.ServiceBusReceiver.receive
  name: receive
  summary: 'Receive a batch of messages at once.


    This approach it optimal if you wish to process multiple messages simultaneously.
    Note that the

    number of messages retrieved in a single batch will be dependent on

    whether *prefetch* was set for the receiver. This call will prioritize returning

    quickly over meeting a specified batch size, and so will return as soon as at
    least

    one message is received and there is a gap in incoming messages regardless

    of the specified batch size.'
  signature: receive(max_batch_size=None, max_wait_time=None)
  parameters:
  - name: max_batch_size
    description: 'Maximum number of messages in the batch. Actual number

      returned will depend on prefetch size and incoming stream rate.'
    defaultValue: None
    types:
    - <xref:int>
  - name: max_wait_time
    description: 'Maximum time to wait in seconds for the first message to arrive.

      If no messages arrive, and no timeout is specified, this call will not return

      until the connection is closed. If specified, an no messages arrive within the

      timeout period, an empty list will be returned.'
    defaultValue: None
    types:
    - <xref:float>
  return:
    types:
    - <xref:list>[<xref:azure.servicebus.Message>]
  examples:
  - "Receive messages from ServiceBus.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_receiver:\n       messages = servicebus_receiver.receive(max_wait_time=5)\n\
    \       for message in messages:\n           print(message)\n           message.complete()\n\
    \n   ````\n"
- uid: azure.servicebus.ServiceBusReceiver.receive_deferred_messages
  name: receive_deferred_messages
  summary: 'Receive messages that have previously been deferred.


    When receiving deferred messages from a partitioned entity, all of the supplied

    sequence numbers must be messages from the same partition.'
  signature: receive_deferred_messages(sequence_numbers)
  parameters:
  - name: sequence_numbers
    description: 'A list of the sequence numbers of messages that have been

      deferred.'
    isRequired: true
    types:
    - <xref:list>[<xref:int>]
  return:
    types:
    - <xref:list>[<xref:azure.servicebus.ReceivedMessage>]
  examples:
  - "Receive deferred messages from ServiceBus.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_receiver:\n       deferred_sequenced_numbers = []\n     \
    \  messages = servicebus_receiver.receive(max_wait_time=5)\n       for message\
    \ in messages:\n           deferred_sequenced_numbers.append(message.sequence_number)\n\
    \           print(message)\n           message.defer()\n\n       received_deferred_msg\
    \ = servicebus_receiver.receive_deferred_messages(\n           sequence_numbers=deferred_sequenced_numbers\n\
    \       )\n\n       for msg in received_deferred_msg:\n           msg.complete()\n\
    \n   ````\n"
