### YamlMime:PythonClass
uid: azure.servicebus.aio.ReceivedMessage
name: ReceivedMessage
fullName: azure.servicebus.aio.ReceivedMessage
module: azure.servicebus.aio
inheritances:
- azure.servicebus._common.message.ReceivedMessage
summary: A Service Bus Message received from service side.
constructor:
  syntax: 'ReceivedMessage(message, mode=<ReceiveSettleMode.PeekLock: <ReceiverSettleMode.PeekLock:
    1>>, **kwargs)'
methods:
- uid: azure.servicebus.aio.ReceivedMessage.abandon
  name: abandon
  summary: 'Abandon the message.


    This message will be returned to the queue and made available to be received again.'
  signature: abandon() -> None
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.ReceivedMessage.complete
  name: complete
  summary: 'Complete the message.


    This removes the message from the queue.'
  signature: complete() -> None
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.ReceivedMessage.dead_letter
  name: dead_letter
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.'
  signature: 'dead_letter(reason: typing.Union[str, NoneType] = None, description:
    typing.Union[str, NoneType] = None) -> None'
  parameters:
  - name: reason
    description: The reason for dead-lettering the message.
    isRequired: true
    types:
    - <xref:str>
  - name: description
    description: The detailed description for dead-lettering the message.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.ReceivedMessage.defer
  name: defer
  summary: 'Defers the message.


    This message will remain in the queue but must be requested

    specifically by its sequence number in order to be received.'
  signature: defer() -> None
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.ReceivedMessage.renew_lock
  name: renew_lock
  summary: 'Renew the message lock.


    This will maintain the lock on the message to ensure

    it is not returned to the queue to be reprocessed. In order to complete (or otherwise
    settle)

    the message, the lock must be maintained. Messages received via ReceiveAndDelete
    mode are not

    locked, and therefore cannot be renewed. This operation can also be performed
    as an asynchronous

    background task by registering the message with an *azure.servicebus.aio.AutoLockRenew*
    instance.

    This operation is only available for non-sessionful messages.'
  signature: renew_lock() -> None
  return:
    types:
    - <xref:None>
