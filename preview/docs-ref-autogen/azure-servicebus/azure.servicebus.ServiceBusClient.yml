### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.ServiceBusClient.close
  - azure.servicebus.ServiceBusClient.from_connection_string
  - azure.servicebus.ServiceBusClient.get_queue_receiver
  - azure.servicebus.ServiceBusClient.get_queue_sender
  - azure.servicebus.ServiceBusClient.get_queue_session_receiver
  - azure.servicebus.ServiceBusClient.get_subscription_receiver
  - azure.servicebus.ServiceBusClient.get_subscription_session_receiver
  - azure.servicebus.ServiceBusClient.get_topic_sender
  class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   import os\n   from azure.servicebus import ServiceBusClient, ServiceBusSharedKeyCredential\n\
    \   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
    \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
    \ = os.environ['SERVICE_BUS_SAS_KEY']\n   servicebus_client = ServiceBusClient(\n\
    \       fully_qualified_namespace=fully_qualified_namespace,\n       credential=ServiceBusSharedKeyCredential(\n\
    \           shared_access_policy,\n           shared_access_key\n       )\n  \
    \ )\n\n   ````\n"
  fullName: azure.servicebus.ServiceBusClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus
  name: ServiceBusClient
  summary: 'The ServiceBusClient class defines a high level interface for

    getting ServiceBusSender and ServiceBusReceiver.'
  syntax:
    content: ServiceBusClient(fully_qualified_namespace, credential, **kwargs)
    parameters:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        credential objects generated by the azure-identity library and objects that
        implement the

        *get_token(self, *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      type:
      - bool
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Service Bus service. Default is *TransportType.Amqp*.'
      id: transport_type
      type:
      - azure.servicebus.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      type:
      - dict
    - description: If specified, this will be added in front of the built-in user
        agent string.
      id: user_agent
      type:
      - str
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      type:
      - float
    variables:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
  type: class
  uid: azure.servicebus.ServiceBusClient
- class: azure.servicebus.ServiceBusClient
  fullName: azure.servicebus.ServiceBusClient.close
  langs:
  - python
  module: azure.servicebus
  name: close()
  namewithoutparameters: close
  summary: 'Close down the ServiceBus client.

    All spawned senders, receivers and underlying connection will be shutdown.'
  syntax:
    content: close()
    parameters: []
    return:
      description: None
  type: method
  uid: azure.servicebus.ServiceBusClient.close
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   servicebus_client\
    \ = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.from_connection_string
  langs:
  - python
  module: azure.servicebus
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create a ServiceBusClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of a Service Bus.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      isRequired: true
      type:
      - bool
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Service Bus service. Default is *TransportType.Amqp*.'
      id: transport_type
      isRequired: true
      type:
      - azure.servicebus.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      isRequired: true
      type:
      - dict
    - description: If specified, this will be added in front of the built-in user
        agent string.
      id: user_agent
      isRequired: true
      type:
      - str
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      isRequired: true
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      isRequired: true
      type:
      - float
    return:
      type:
      - azure.servicebus.ServiceBusClient
  type: method
  uid: azure.servicebus.ServiceBusClient.from_connection_string
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       queue_receiver = servicebus_client.get_queue_receiver(queue_name=queue_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.get_queue_receiver
  langs:
  - python
  module: azure.servicebus
  name: get_queue_receiver(queue_name, **kwargs)
  namewithoutparameters: get_queue_receiver
  summary: Get ServiceBusReceiver for the specific queue.
  syntax:
    content: get_queue_receiver(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - description: 'If specified, the subqueue this receiver will connect to.

        This includes the DeadLetter and TransferDeadLetter queues, holds messages
        that can''t be delivered to any

        receiver or messages that can''t be processed.  The default is None, meaning
        connect to the primary queue.'
      id: sub_queue
      isRequired: true
      type:
      - Optional[SubQueue]
    - description: 'The receive_mode with which messages will be retrieved from the
        entity. The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default receive_mode is PeekLock.'
      id: receive_mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically stop receiving. The default value is 0, meaning no timeout.'
      id: max_wait_time
      isRequired: true
      type:
      - float
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch_count being 0, *ServiceBusReceiver.receive* would
        try to cache *max_message_count*

        (if provided) within its request to the service.'
      id: prefetch_count
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.ServiceBusReceiver
  type: method
  uid: azure.servicebus.ServiceBusClient.get_queue_receiver
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       queue_sender = servicebus_client.get_queue_sender(queue_name=queue_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.get_queue_sender
  langs:
  - python
  module: azure.servicebus
  name: get_queue_sender(queue_name, **kwargs)
  namewithoutparameters: get_queue_sender
  summary: Get ServiceBusSender for the specific queue.
  syntax:
    content: get_queue_sender(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.servicebus.ServiceBusSender
  type: method
  uid: azure.servicebus.ServiceBusClient.get_queue_sender
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       queue_receiver = servicebus_client.get_queue_receiver(queue_name=queue_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.get_queue_session_receiver
  langs:
  - python
  module: azure.servicebus
  name: get_queue_session_receiver(queue_name, session_id=None, **kwargs)
  namewithoutparameters: get_queue_session_receiver
  summary: Get ServiceBusSessionReceiver for the specific queue.
  syntax:
    content: get_queue_session_receiver(queue_name, session_id=None, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive messages
        from the next available

        session, set this to None.  The default is None.'
      id: session_id
      type:
      - str
    - description: 'The receive_mode with which messages will be retrieved from the
        entity. The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default receive_mode is PeekLock.'
      id: receive_mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically stop receiving. The default value is 0, meaning no timeout.

        Default value is 3.'
      id: max_wait_time
      isRequired: true
      type:
      - float
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch_count being 0, *ServiceBusReceiver.receive* would
        try to cache *max_message_count*

        (if provided) within its request to the service.'
      id: prefetch_count
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.ServiceBusSessionReceiver
  type: method
  uid: azure.servicebus.ServiceBusClient.get_queue_session_receiver
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   topic_name\
    \ = os.environ[\"SERVICE_BUS_TOPIC_NAME\"]\n   subscription_name = os.environ[\"\
    SERVICE_BUS_SUBSCRIPTION_NAME\"]\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       subscription_receiver = servicebus_client.get_subscription_receiver(\n\
    \           topic_name=topic_name,\n           subscription_name=subscription_name,\n\
    \       )\n\n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.get_subscription_receiver
  langs:
  - python
  module: azure.servicebus
  name: get_subscription_receiver(topic_name, subscription_name, **kwargs)
  namewithoutparameters: get_subscription_receiver
  summary: Get ServiceBusReceiver for the specific subscription under the topic.
  syntax:
    content: get_subscription_receiver(topic_name, subscription_name, **kwargs)
    parameters:
    - description: The name of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The name of specific Service Bus Subscription

        under the given Service Bus Topic.'
      id: subscription_name
      isRequired: true
      type:
      - str
    - description: 'If specified, the subqueue this receiver will connect to.

        This includes the DeadLetter and TransferDeadLetter queues, holds messages
        that can''t be delivered to any

        receiver or messages that can''t be processed.  The default is None, meaning
        connect to the primary queue.'
      id: sub_queue
      isRequired: true
      type:
      - Optional[SubQueue]
    - description: 'The receive_mode with which messages will be retrieved from the
        entity. The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the subscription. Messages received
        with ReceiveAndDelete

        will be immediately removed from the subscription, and cannot be subsequently
        rejected or re-received if

        the client fails to process the message. The default receive_mode is PeekLock.'
      id: receive_mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically stop receiving. The default value is 0, meaning no timeout.'
      id: max_wait_time
      isRequired: true
      type:
      - float
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch_count being 0, *ServiceBusReceiver.receive* would
        try to cache *max_message_count*

        (if provided) within its request to the service.'
      id: prefetch_count
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.ServiceBusReceiver
  type: method
  uid: azure.servicebus.ServiceBusClient.get_subscription_receiver
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   topic_name\
    \ = os.environ[\"SERVICE_BUS_TOPIC_NAME\"]\n   subscription_name = os.environ[\"\
    SERVICE_BUS_SUBSCRIPTION_NAME\"]\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       subscription_receiver = servicebus_client.get_subscription_receiver(\n\
    \           topic_name=topic_name,\n           subscription_name=subscription_name,\n\
    \       )\n\n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.get_subscription_session_receiver
  langs:
  - python
  module: azure.servicebus
  name: get_subscription_session_receiver(topic_name, subscription_name, session_id=None,
    **kwargs)
  namewithoutparameters: get_subscription_session_receiver
  summary: Get ServiceBusReceiver for the specific subscription under the topic.
  syntax:
    content: get_subscription_session_receiver(topic_name, subscription_name, session_id=None,
      **kwargs)
    parameters:
    - description: The name of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The name of specific Service Bus Subscription

        under the given Service Bus Topic.'
      id: subscription_name
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive messages
        from the next available

        session, set this to None.  The default is None.'
      id: session_id
      type:
      - str
    - description: 'The receive_mode with which messages will be retrieved from the
        entity. The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the subscription. Messages received
        with ReceiveAndDelete

        will be immediately removed from the subscription, and cannot be subsequently
        rejected or re-received if

        the client fails to process the message. The default receive_mode is PeekLock.'
      id: receive_mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically stop receiving. The default value is 0, meaning no timeout.'
      id: max_wait_time
      isRequired: true
      type:
      - float
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch_count being 0, *ServiceBusReceiver.receive* would
        try to cache *max_message_count*

        (if provided) within its request to the service.'
      id: prefetch_count
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.ServiceBusSessionReceiver
  type: method
  uid: azure.servicebus.ServiceBusClient.get_subscription_session_receiver
- class: azure.servicebus.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusClient\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   topic_name\
    \ = os.environ['SERVICE_BUS_TOPIC_NAME']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   with servicebus_client:\n       topic_sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusClient.get_topic_sender
  langs:
  - python
  module: azure.servicebus
  name: get_topic_sender(topic_name, **kwargs)
  namewithoutparameters: get_topic_sender
  summary: Get ServiceBusSender for the specific topic.
  syntax:
    content: get_topic_sender(topic_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.servicebus.ServiceBusSender
  type: method
  uid: azure.servicebus.ServiceBusClient.get_topic_sender
references:
- fullName: azure.servicebus.ServiceBusClient.close
  isExternal: false
  name: close()
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.close
- fullName: azure.servicebus.ServiceBusClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.from_connection_string
- fullName: azure.servicebus.ServiceBusClient.get_queue_receiver
  isExternal: false
  name: get_queue_receiver(queue_name, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_queue_receiver
- fullName: azure.servicebus.ServiceBusClient.get_queue_sender
  isExternal: false
  name: get_queue_sender(queue_name, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_queue_sender
- fullName: azure.servicebus.ServiceBusClient.get_queue_session_receiver
  isExternal: false
  name: get_queue_session_receiver(queue_name, session_id=None, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_queue_session_receiver
- fullName: azure.servicebus.ServiceBusClient.get_subscription_receiver
  isExternal: false
  name: get_subscription_receiver(topic_name, subscription_name, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_subscription_receiver
- fullName: azure.servicebus.ServiceBusClient.get_subscription_session_receiver
  isExternal: false
  name: get_subscription_session_receiver(topic_name, subscription_name, session_id=None,
    **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_subscription_session_receiver
- fullName: azure.servicebus.ServiceBusClient.get_topic_sender
  isExternal: false
  name: get_topic_sender(topic_name, **kwargs)
  parent: azure.servicebus.ServiceBusClient
  uid: azure.servicebus.ServiceBusClient.get_topic_sender
- fullName: Optional[SubQueue]
  name: Optional[SubQueue]
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: SubQueue
    name: SubQueue
    uid: SubQueue
  - fullName: ']'
    name: ']'
  uid: Optional[SubQueue]
