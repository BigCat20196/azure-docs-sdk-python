### YamlMime:PythonClass
uid: azure.servicebus.ServiceBusSender
name: ServiceBusSender
fullName: azure.servicebus.ServiceBusSender
module: azure.servicebus
inheritances:
- azure.servicebus._base_handler.BaseHandler
- azure.servicebus._servicebus_sender.SenderMixin
summary: 'The ServiceBusSender class defines a high level interface for

  sending messages to the Azure Service Bus Queue or Topic.'
constructor:
  syntax: ServiceBusSender(fully_qualified_namespace, credential, **kwargs)
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Service Bus namespace.

      The namespace format is: *<yournamespace>.servicebus.windows.net*.'
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      :class: credential objects generated by the azure-identity library and objects
      that implement the

      *get_token(self, *scopes)* method.'
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    types:
    - <xref:str>
  - name: topic_name
    description: The path of specific Service Bus Topic the client connects to.
    types:
    - <xref:str>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
  - name: user_agent
    description: If specified, this will be added in front of the built-in user agent
      string.
    types:
    - <xref:str>
variables:
- description: 'The fully qualified host name for the Service Bus namespace.

    The namespace format is: *<yournamespace>.servicebus.windows.net*.'
  name: fully_qualified_namespace
  types:
  - <xref:str>
- description: The name of the entity that the client connects to.
  name: entity_name
  types:
  - <xref:str>
examples:
- "Create a new instance of the ServiceBusSender.<!--[!code-python[Main](les\\sync_samples\\\
  sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b8\\\\samples\\\\sync_samples\\\
  \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
  , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
  \n   import os\n   from azure.servicebus import ServiceBusSender, ServiceBusSharedKeyCredential\n\
  \   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
  \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
  \   queue_sender = ServiceBusSender(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
  \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.servicebus.ServiceBusSender.cancel_scheduled_messages
  name: cancel_scheduled_messages
  summary: Cancel one or more messages that have previously been scheduled and are
    still pending.
  signature: cancel_scheduled_messages(sequence_numbers, **kwargs)
  parameters:
  - name: sequence_numbers
    description: The sequence numbers of the scheduled messages.
    isRequired: true
    types:
    - <xref:int>
    - <xref:list>[<xref:int>]
  - name: timeout
    description: 'The total operation timeout in seconds including all the retries.
      The value must be

      greater than 0 if specified. The default value is None, meaning no timeout.'
    isRequired: true
    types:
    - <xref:float>
  return:
    types:
    - <xref:None>
  examples:
  - "Cancelling messages scheduled to be sent in future<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b8\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   with servicebus_sender:\n       servicebus_sender.cancel_scheduled_messages(sequence_nums)\n\
    \n   ````\n"
- uid: azure.servicebus.ServiceBusSender.create_message_batch
  name: create_message_batch
  summary: 'Create a ServiceBusMessageBatch object with the max size of all content
    being constrained by

    max_size_in_bytes. The max_size should be no greater than the max allowed message
    size defined by the service.'
  signature: create_message_batch(max_size_in_bytes=None)
  parameters:
  - name: max_size_in_bytes
    description: 'The maximum size of bytes data that a ServiceBusMessageBatch object
      can hold. By

      default, the value is determined by your Service Bus tier.'
    defaultValue: None
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.servicebus.ServiceBusMessageBatch>
  examples:
  - "Create ServiceBusMessageBatch object within limited size<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b8\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   with servicebus_sender:\n       batch_message =\
    \ servicebus_sender.create_message_batch()\n       batch_message.add_message(ServiceBusMessage(\"\
    Single message inside batch\"))\n\n   ````\n"
- uid: azure.servicebus.ServiceBusSender.schedule_messages
  name: schedule_messages
  summary: "Send Message or multiple Messages to be enqueued at a specific time.\n\
    Returns a list of the sequence numbers of the enqueued messages.\n:param messages:\
    \ The message or list of messages to schedule.\n:type messages: Union[~azure.servicebus.ServiceBusMessage,\
    \ List[~azure.servicebus.ServiceBusMessage]]\n:param schedule_time_utc: The utc\
    \ date and time to enqueue the messages.\n:type schedule_time_utc: ~datetime.datetime\n\
    :keyword float timeout: The total operation timeout in seconds including all the\
    \ retries. The value must be\n\n\n   greater than 0 if specified. The default\
    \ value is None, meaning no timeout."
  signature: schedule_messages(messages, schedule_time_utc, **kwargs)
  parameters:
  - name: messages
    isRequired: true
  - name: schedule_time_utc
    isRequired: true
  return:
    types:
    - <xref:List>[<xref:int>]
  examples:
  - "Schedule a message to be sent in future<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b8\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_sender:\n       scheduled_time_utc = datetime.datetime.utcnow()\
    \ + datetime.timedelta(seconds=30)\n       scheduled_messages = [ServiceBusMessage(\"\
    Scheduled message\") for _ in range(10)]\n       sequence_nums = servicebus_sender.schedule_messages(scheduled_messages,\
    \ scheduled_time_utc)\n\n   ````\n"
- uid: azure.servicebus.ServiceBusSender.send_messages
  name: send_messages
  summary: 'Sends message and blocks until acknowledgement is received or operation
    times out.


    If a list of messages was provided, attempts to send them as a single batch, throwing
    a

    *ValueError* if they cannot fit in a single batch.'
  signature: send_messages(message, **kwargs)
  parameters:
  - name: message
    description: The ServiceBus message to be sent.
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.servicebus.ServiceBusMessage,azure.servicebus.ServiceBusMessageBatch,list>[<xref:azure.servicebus.ServiceBusMessage>]]
  - name: timeout
    description: 'The total operation timeout in seconds including all the retries.
      The value must be

      greater than 0 if specified. The default value is None, meaning no timeout.'
    isRequired: true
    types:
    - <xref:float>
  return:
    types:
    - <xref:None>
  examples:
  - "Send message.<!--[!code-python[Main](les\\sync_samples\\sample_code_servicebus.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\5\\\\azure-servicebus-7.0.0b8\\\\samples\\\\sync_samples\\\\sample_code_servicebus.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   with servicebus_sender:\n\
    \       message = ServiceBusMessage(\"Hello World\")\n       servicebus_sender.send_messages(message)\n\
    \n   ````\n"
