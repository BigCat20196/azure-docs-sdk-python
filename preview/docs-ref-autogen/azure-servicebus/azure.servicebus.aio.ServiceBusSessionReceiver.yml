### YamlMime:PythonClass
uid: azure.servicebus.aio.ServiceBusSessionReceiver
name: ServiceBusSessionReceiver
fullName: azure.servicebus.aio.ServiceBusSessionReceiver
module: azure.servicebus.aio
inheritances:
- azure.servicebus.aio._servicebus_receiver_async.ServiceBusReceiver
- azure.servicebus._common.receiver_mixins.SessionReceiverMixin
summary: 'The ServiceBusSessionReceiver class defines a high level interface for

  receiving messages from the Azure Service Bus Queue or Topic Subscription.'
constructor:
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Service Bus namespace.

      The namespace format is: *<yournamespace>.servicebus.windows.net*.'
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

      generated by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    types:
    - <xref:str>
  - name: topic_name
    description: 'The path of specific Service Bus Topic which contains the Subscription

      the client connects to.'
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The path of specific Service Bus Subscription under the

      specified Topic the client connects to.'
    types:
    - <xref:str>
  - name: mode
    description: 'The mode with which messages will be retrieved from the entity.
      The two options

      are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be settled
      within a given

      lock period before they will be removed from the queue. Messages received with
      ReceiveAndDelete

      will be immediately removed from the queue, and cannot be subsequently rejected
      or re-received if

      the client fails to process the message. The default mode is PeekLock.'
    types:
    - <xref:azure.servicebus.ReceiveSettleMode>
  - name: session_id
    description: 'A specific session from which to receive. This must be specified
      for a

      sessionful entity, otherwise it must be None. In order to receive messages from
      the next available

      session, set this to None.  The default is None.'
    types:
    - <xref:str>
  - name: prefetch
    description: 'The maximum number of messages to cache with each request to the
      service.

      The default value is 0 meaning messages will be received from the service and
      processed

      one at a time. Increasing this value will improve message throughput performance
      but increase

      the change that messages will expire while they are cached if they''re not processed
      fast enough.'
    types:
    - <xref:int>
  - name: idle_timeout
    description: 'The timeout in seconds between received messages after which the
      receiver will

      automatically shutdown. The default value is 0, meaning no timeout.'
    types:
    - <xref:float>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    types:
    - <xref:int>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
variables:
- description: 'The fully qualified host name for the Service Bus namespace.

    The namespace format is: *<yournamespace>.servicebus.windows.net*.'
  name: fully_qualified_namespace
  types:
  - str
- description: The path of the entity that the client connects to.
  name: entity_path
  types:
  - str
examples:
- "Create a new instance of the ServiceBusReceiver.<!--[!code-python[Main](les\\async_samples\\\
  sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\
  \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\":\
  \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   import os\n   from azure.servicebus.aio import ServiceBusReceiver,\
  \ ServiceBusSharedKeyCredential\n   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
  \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
  \   queue_receiver = ServiceBusReceiver(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
  \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.servicebus.aio.ServiceBusSessionReceiver.from_connection_string
  name: from_connection_string
  summary: Create a ServiceBusSessionReceiver from a connection string.
  signature: 'from_connection_string(conn_str: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_session_receiver_async.ServiceBusSessionReceiver'
  parameters:
  - name: conn_str
    description: The connection string of a Service Bus.
    isRequired: true
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: 'The path of specific Service Bus Topic which contains the Subscription

      the client connects to.'
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The path of specific Service Bus Subscription under the

      specified Topic the client connects to.'
    isRequired: true
    types:
    - <xref:str>
  - name: mode
    description: 'The mode with which messages will be retrieved from the entity.
      The two options

      are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be settled
      within a given

      lock period before they will be removed from the queue. Messages received with
      ReceiveAndDelete

      will be immediately removed from the queue, and cannot be subsequently rejected
      or re-received if

      the client fails to process the message. The default mode is PeekLock.'
    isRequired: true
    types:
    - <xref:azure.servicebus.ReceiveSettleMode>
  - name: session_id
    description: 'A specific session from which to receive. This must be specified
      for a

      sessionful entity, otherwise it must be None. In order to receive messages from
      the next available

      session, set this to None.  The default is None.'
    isRequired: true
    types:
    - <xref:str>
  - name: prefetch
    description: 'The maximum number of messages to cache with each request to the
      service.

      The default value is 0, meaning messages will be received from the service and
      processed

      one at a time. Increasing this value will improve message throughput performance
      but increase

      the change that messages will expire while they are cached if they''re not processed
      fast enough.'
    isRequired: true
    types:
    - <xref:int>
  - name: idle_timeout
    description: 'The timeout in seconds between received messages after which the
      receiver will

      automatically shutdown. The default value is 0, meaning no timeout.'
    isRequired: true
    types:
    - <xref:float>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    isRequired: true
    types:
    - <xref:bool>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    isRequired: true
    types:
    - <xref:int>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    isRequired: true
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    isRequired: true
    types:
    - <xref:dict>
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusSessionReceiver>
  examples:
  - "Create a new instance of the ServiceBusReceiver from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusReceiver\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n   queue_receiver = ServiceBusReceiver.from_connection_string(\n\
    \       conn_str=servicebus_connection_str,\n       queue_name=queue_name\n  \
    \ )\n\n   ````\n"
attributes:
- uid: azure.servicebus.aio.ServiceBusSessionReceiver.session
  name: session
  summary: 'Get the ServiceBusSession object linked with the receiver. Session is
    only available to session-enabled

    entities.'
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusSession>
  examples:
  - "Get session from a receiver<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       async with\
    \ servicebus_client.get_queue_session_receiver(queue_name=queue_name, session_id=session_id)\
    \ as receiver:\n           session = receiver.session\n\n   ````\n"
