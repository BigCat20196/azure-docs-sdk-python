### YamlMime:PythonClass
uid: azure.servicebus.aio.ServiceBusSender
name: ServiceBusSender
fullName: azure.servicebus.aio.ServiceBusSender
module: azure.servicebus.aio
inheritances:
- azure.servicebus.aio._base_handler_async.BaseHandler
- azure.servicebus._servicebus_sender.SenderMixin
summary: 'The ServiceBusSender class defines a high level interface for

  sending messages to the Azure Service Bus Queue or Topic.'
constructor:
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Service Bus namespace.

      The namespace format is: *<yournamespace>.servicebus.windows.net*.'
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

      generated by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: queue_name
    description: 'The path of specific Service Bus Queue the client connects to.

      Only one of queue_name or topic_name can be provided.'
    types:
    - <xref:str>
  - name: topic_name
    description: 'The path of specific Service Bus Topic the client connects to.

      Only one of queue_name or topic_name can be provided.'
    types:
    - <xref:str>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    types:
    - <xref:int>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
variables:
- description: 'The fully qualified host name for the Service Bus namespace.

    The namespace format is: *<yournamespace>.servicebus.windows.net*.'
  name: fully_qualified_namespace
  types:
  - str
- description: The name of the entity that the client connects to.
  name: entity_name
  types:
  - str
examples:
- "Create a new instance of the ServiceBusSender.<!--[!code-python[Main](les\\async_samples\\\
  sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\
  \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\":\
  \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   import os\n   from azure.servicebus.aio import ServiceBusSender,\
  \ ServiceBusSharedKeyCredential\n   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
  \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
  \   queue_sender = ServiceBusSender(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
  \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.servicebus.aio.ServiceBusSender.cancel_scheduled_messages
  name: cancel_scheduled_messages
  summary: Cancel one or more messages that have previously been scheduled and are
    still pending.
  signature: cancel_scheduled_messages(sequence_numbers)
  parameters:
  - name: sequence_numbers
    description: The sequence numbers of the scheduled messages.
    isRequired: true
    types:
    - <xref:int>
    - <xref:list>[<xref:int>]
  return:
    types:
    - <xref:None>
  examples:
  - "Cancelling messages scheduled to be sent in future<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   async with servicebus_sender:\n\
    \       await servicebus_sender.cancel_scheduled_messages(sequence_nums)\n\n \
    \  ````\n"
- uid: azure.servicebus.aio.ServiceBusSender.create_batch
  name: create_batch
  summary: 'Create a BatchMessage object with the max size of all content being constrained
    by max_size_in_bytes.

    The max_size should be no greater than the max allowed message size defined by
    the service.'
  signature: create_batch(max_size_in_bytes=None)
  parameters:
  - name: max_size_in_bytes
    description: 'The maximum size of bytes data that a BatchMessage object can hold.
      By

      default, the value is determined by your Service Bus tier.'
    defaultValue: None
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.servicebus.BatchMessage>
  examples:
  - "Create BatchMessage object within limited size<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   async with servicebus_sender:\n       batch_message = await\
    \ servicebus_sender.create_batch()\n       batch_message.add(Message(\"Single\
    \ message inside batch\"))\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSender.from_connection_string
  name: from_connection_string
  summary: Create a ServiceBusSender from a connection string.
  signature: 'from_connection_string(conn_str: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_sender_async.ServiceBusSender'
  parameters:
  - name: conn_str
    description: The connection string of a Service Bus.
    isRequired: true
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: The path of specific Service Bus Topic the client connects to.
    isRequired: true
    types:
    - <xref:str>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    isRequired: true
    types:
    - <xref:bool>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    isRequired: true
    types:
    - <xref:int>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Service Bus service. Default is *TransportType.Amqp*.'
    isRequired: true
    types:
    - <xref:azure.servicebus.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    isRequired: true
    types:
    - <xref:dict>
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusSender>
  examples:
  - "Create a new instance of the ServiceBusSender from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusSender\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n   queue_sender = ServiceBusSender.from_connection_string(\n\
    \       conn_str=servicebus_connection_str,\n       queue_name=queue_name\n  \
    \ )\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSender.schedule
  name: schedule
  summary: 'Send Message or multiple Messages to be enqueued at a specific time.

    Returns a list of the sequence numbers of the enqueued messages.

    :param messages: The message or list of messages to schedule.

    :type messages: ~azure.servicebus.Message or list[~azure.servicebus.Message]

    :param schedule_time_utc: The utc date and time to enqueue the messages.

    :type schedule_time_utc: ~datetime.datetime

    :rtype: list[int]'
  signature: schedule(messages, schedule_time_utc)
  parameters:
  - name: messages
    isRequired: true
  - name: schedule_time_utc
    isRequired: true
  examples:
  - "Schedule a message to be sent in future<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   async with servicebus_sender:\n       scheduled_time_utc =\
    \ datetime.datetime.utcnow() + datetime.timedelta(seconds=30)\n       scheduled_messages\
    \ = [Message(\"Scheduled message\") for _ in range(10)]\n       sequence_nums\
    \ = await servicebus_sender.schedule(scheduled_messages, scheduled_time_utc)\n\
    \n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSender.send
  name: send
  summary: 'Sends message and blocks until acknowledgement is received or operation
    times out.


    If a list of messages was provided, attempts to send them as a single batch, throwing
    a

    *ValueError* if they cannot fit in a single batch.'
  signature: send(message)
  parameters:
  - name: message
    description: The ServiceBus message to be sent.
    isRequired: true
    types:
    - <xref:azure.servicebus.Message>
    - <xref:azure.servicebus.BatchMessage>
    - <xref:list>[<xref:azure.servicebus.Message>]
  return:
    types:
    - <xref:None>
  examples:
  - "Send message.<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\8\\\\azure-servicebus-7.0.0b3\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   async with servicebus_sender:\n\
    \       message = Message(\"Hello World\")\n       await servicebus_sender.send(message)\n\
    \n   ````\n"
