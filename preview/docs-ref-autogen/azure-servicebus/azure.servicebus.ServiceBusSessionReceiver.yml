### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.ServiceBusSessionReceiver.from_connection_string
  - azure.servicebus.ServiceBusSessionReceiver.session
  class: azure.servicebus.ServiceBusSessionReceiver
  example:
  - "Create a new instance of the ServiceBusReceiver.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusReceiver,\
    \ ServiceBusSharedKeyCredential\n   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
    \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
    \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
    \   queue_receiver = ServiceBusReceiver(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
    \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
    \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusSessionReceiver
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.servicebus._base_handler.BaseHandler
    - inheritance:
      - type: builtins.object
      type: azure.servicebus._common.receiver_mixins.ReceiverMixin
    type: azure.servicebus._servicebus_receiver.ServiceBusReceiver
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.servicebus._common.receiver_mixins.ReceiverMixin
    type: azure.servicebus._common.receiver_mixins.SessionReceiverMixin
  langs:
  - python
  module: azure.servicebus
  name: ServiceBusSessionReceiver
  summary: 'The ServiceBusSessionReceiver class defines a high level interface for

    receiving messages from the Azure Service Bus Queue or Topic Subscription

    while utilizing a session for FIFO and ownership semantics.


    The two primary channels for message receipt are *receive()* to make a single
    request for messages,

    and *for message in receiver:* to continuously receive incoming messages in an
    ongoing fashion.'
  syntax:
    content: ServiceBusSessionReceiver(fully_qualified_namespace, credential, **kwargs)
    parameters:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        :class: credential objects generated by the azure-identity library and objects
        that implement the

        *get_token(self, *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      type:
      - str
    - description: 'The path of specific Service Bus Topic which contains the Subscription

        the client connects to.'
      id: topic_name
      type:
      - str
    - description: 'The path of specific Service Bus Subscription under the

        specified Topic the client connects to.'
      id: subscription_name
      type:
      - str
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: max_wait_time
      type:
      - float
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently abandoned
        or re-received

        if the client fails to process the message.

        The default mode is PeekLock.'
      id: receive_mode
      type:
      - azure.servicebus.ReceiveMode
    - description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive messages
        from the next available

        session, set this to None.  The default is None.'
      id: session_id
      type:
      - str
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      type:
      - bool
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Service Bus service. Default is *TransportType.Amqp*.'
      id: transport_type
      type:
      - azure.servicebus.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      type:
      - dict
    - description: If specified, this will be added in front of the built-in user
        agent string.
      id: user_agent
      type:
      - str
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch_count being 0, *ServiceBusReceiver.receive* would
        try to cache *max_message_count*

        (if provided) within its request to the service.'
      id: prefetch_count
      type:
      - int
    variables:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: The path of the entity that the client connects to.
      id: entity_path
      type:
      - str
  type: class
  uid: azure.servicebus.ServiceBusSessionReceiver
- class: azure.servicebus.ServiceBusSessionReceiver
  example:
  - "Create a new instance of the ServiceBusReceiver from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusReceiver\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   queue_receiver = ServiceBusReceiver.from_connection_string(\n\
    \       conn_str=servicebus_connection_str,\n       queue_name=queue_name\n  \
    \ )\n\n   ````\n"
  exceptions:
  - description: Indicates an issue in token/identity validity.
    type: ~azure.servicebus.ServiceBusAuthenticationError
  - description: Indicates an access/rights related failure.
    type: ~azure.servicebus.ServiceBusAuthorizationError
  fullName: azure.servicebus.ServiceBusSessionReceiver.from_connection_string
  langs:
  - python
  module: azure.servicebus
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create a ServiceBusSessionReceiver from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of a Service Bus.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - description: 'The path of specific Service Bus Topic which contains the Subscription

        the client connects to.'
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The path of specific Service Bus Subscription under the

        specified Topic the client connects to.'
      id: subscription_name
      isRequired: true
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently abandoned
        or re-received

        if the client fails to process the message.

        The default mode is PeekLock.'
      id: receive_mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveMode
    - description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive messages
        from the next available

        session, set this to None.  The default is None.'
      id: session_id
      isRequired: true
      type:
      - str
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: max_wait_time
      isRequired: true
      type:
      - float
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      isRequired: true
      type:
      - bool
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Service Bus service. Default is *TransportType.Amqp*.'
      id: transport_type
      isRequired: true
      type:
      - azure.servicebus.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      isRequired: true
      type:
      - dict
    - description: If specified, this will be added in front of the built-in user
        agent string.
      id: user_agent
      isRequired: true
      type:
      - str
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch_count being 0, *ServiceBusReceiver.receive* would
        try to cache *max_message_count*

        (if provided) within its request to the service.'
      id: prefetch_count
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.ServiceBusSessionReceiver
  type: method
  uid: azure.servicebus.ServiceBusSessionReceiver.from_connection_string
- class: azure.servicebus.ServiceBusSessionReceiver
  example:
  - "Get session from a receiver<!--[!code-python[Main](les\\sync_samples\\sample_code_servicebus.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\5\\\\azure-servicebus-7.0.0b7\\\\samples\\\\sync_samples\\\\sample_code_servicebus.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       with servicebus_client.get_queue_session_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusSessionReceiver.session
  langs:
  - python
  module: azure.servicebus
  name: session
  summary: 'Get the ServiceBusSession object linked with the receiver. Session is
    only available to session-enabled

    entities.'
  syntax:
    return:
      type:
      - azure.servicebus.ServiceBusSession
  type: attribute
  uid: azure.servicebus.ServiceBusSessionReceiver.session
references:
- fullName: azure.servicebus.ServiceBusSessionReceiver.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.servicebus.ServiceBusSessionReceiver
  uid: azure.servicebus.ServiceBusSessionReceiver.from_connection_string
- fullName: azure.servicebus.ServiceBusSessionReceiver.session
  isExternal: false
  name: session
  parent: azure.servicebus.ServiceBusSessionReceiver
  uid: azure.servicebus.ServiceBusSessionReceiver.session
