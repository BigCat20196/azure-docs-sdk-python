### YamlMime:PythonClass
uid: azure.servicebus.aio.ServiceBusClient
name: ServiceBusClient
fullName: azure.servicebus.aio.ServiceBusClient
module: azure.servicebus.aio
inheritances:
- builtins.object
summary: 'The ServiceBusClient class defines a high level interface for

  getting ServiceBusSender and ServiceBusReceiver.'
constructor:
  syntax: 'ServiceBusClient(fully_qualified_namespace: str, credential: typing.Union[AsyncTokenCredential,
    azure.core.credentials.AzureSasCredential], **kwargs: typing.Any) -> None'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Service Bus namespace.

      The namespace format is: *<yournamespace>.servicebus.windows.net*.'
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      credential objects generated by the azure-identity library and objects that
      implement the

      *get_token(self, *scopes)* method, or alternatively, an AzureSasCredential can
      be provided too.'
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential> or <xref:azure.core.credentials.AzureSasCredential>
variables:
- description: 'The fully qualified host name for the Service Bus namespace.

    The namespace format is: *<yournamespace>.servicebus.windows.net*.'
  name: fully_qualified_namespace
  types:
  - <xref:azure.servicebus.aio.str>
examples:
- "Create a new instance of the ServiceBusClient.<!--[!code-python[Main](les\\async_samples\\\
  sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\4\\\\azure-servicebus-7.2.0b1\\\\samples\\\\async_samples\\\
  \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   import os\n   from azure.identity.aio import DefaultAzureCredential\n\
  \   from azure.servicebus.aio import ServiceBusClient\n   fully_qualified_namespace\
  \ = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n   servicebus_client =\
  \ ServiceBusClient(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       credential=DefaultAzureCredential()\n   )\n\n   ````\n"
methods:
- uid: azure.servicebus.aio.ServiceBusClient.close
  name: close
  summary: 'Close down the ServiceBus client.

    All spawned senders, receivers and underlying connection will be shutdown.'
  signature: close() -> None
  return:
    description: None
- uid: azure.servicebus.aio.ServiceBusClient.from_connection_string
  name: from_connection_string
  summary: Create a ServiceBusClient from a connection string.
  signature: 'from_connection_string(conn_str: str, **kwargs: typing.Any) -> ''ServiceBusClient'''
  parameters:
  - name: conn_str
    description: The connection string of a Service Bus.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  - name: conn_str
    isRequired: true
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusClient>
  examples:
  - "Create a new instance of the ServiceBusClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-servicebus-7.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \   from azure.servicebus.aio import ServiceBusClient\n   servicebus_connection_str\
    \ = os.environ['SERVICE_BUS_CONNECTION_STR']\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \n   ````\n"
- uid: azure.servicebus.aio.ServiceBusClient.get_queue_receiver
  name: get_queue_receiver
  summary: Get ServiceBusReceiver for the specific queue.
  signature: 'get_queue_receiver(queue_name: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_receiver_async.ServiceBusReceiver'
  parameters:
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusReceiver>
  examples:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-servicebus-7.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \   from azure.servicebus.aio import ServiceBusClient\n   servicebus_connection_str\
    \ = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
    \   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       queue_receiver = servicebus_client.get_queue_receiver(queue_name=queue_name)\n\
    \n   ````\n"
- uid: azure.servicebus.aio.ServiceBusClient.get_queue_sender
  name: get_queue_sender
  summary: Get ServiceBusSender for the specific queue.
  signature: 'get_queue_sender(queue_name: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_sender_async.ServiceBusSender'
  parameters:
  - name: queue_name
    description: The path of specific Service Bus Queue the client connects to.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusSender>
  examples:
  - "Create a new instance of the ServiceBusClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-servicebus-7.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \   from azure.servicebus.aio import ServiceBusClient\n   servicebus_connection_str\
    \ = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
    \   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       queue_sender = servicebus_client.get_queue_sender(queue_name=queue_name)\n\
    \n   ````\n"
- uid: azure.servicebus.aio.ServiceBusClient.get_subscription_receiver
  name: get_subscription_receiver
  summary: Get ServiceBusReceiver for the specific subscription under the topic.
  signature: 'get_subscription_receiver(topic_name: str, subscription_name: str, **kwargs:
    typing.Any) -> azure.servicebus.aio._servicebus_receiver_async.ServiceBusReceiver'
  parameters:
  - name: topic_name
    description: The name of specific Service Bus Topic the client connects to.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  - name: subscription_name
    description: 'The name of specific Service Bus Subscription

      under the given Service Bus Topic.'
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusReceiver>
  examples:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-servicebus-7.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \   from azure.servicebus.aio import ServiceBusClient\n   servicebus_connection_str\
    \ = os.environ['SERVICE_BUS_CONNECTION_STR']\n   topic_name = os.environ[\"SERVICE_BUS_TOPIC_NAME\"\
    ]\n   subscription_name = os.environ[\"SERVICE_BUS_SUBSCRIPTION_NAME\"]\n   servicebus_client\
    \ = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       subscription_receiver = servicebus_client.get_subscription_receiver(\n\
    \           topic_name=topic_name,\n           subscription_name=subscription_name,\n\
    \       )\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusClient.get_topic_sender
  name: get_topic_sender
  summary: Get ServiceBusSender for the specific topic.
  signature: 'get_topic_sender(topic_name: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_sender_async.ServiceBusSender'
  parameters:
  - name: topic_name
    description: The path of specific Service Bus Topic the client connects to.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.str>
  return:
    types:
    - <xref:azure.servicebus.aio.ServiceBusSender>
  examples:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-servicebus-7.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \   from azure.servicebus.aio import ServiceBusClient\n   servicebus_connection_str\
    \ = os.environ['SERVICE_BUS_CONNECTION_STR']\n   topic_name = os.environ['SERVICE_BUS_TOPIC_NAME']\n\
    \   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       topic_sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n\
    \n   ````\n"
