### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.schemaregistry.SchemaRegistryClient.close
  - azure.schemaregistry.SchemaRegistryClient.get_schema
  - azure.schemaregistry.SchemaRegistryClient.get_schema_id
  - azure.schemaregistry.SchemaRegistryClient.register_schema
  class: azure.schemaregistry.SchemaRegistryClient
  example:
  - "Create a new instance of the SchemaRegistryClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_schemaregistry.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\22\\\\azure-schemaregistry-1.0.0b1\\\\samples\\\
    \\sync_samples\\\\sample_code_schemaregistry.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   SCHEMA_REGISTRY_ENDPOINT = os.environ['SCHEMA_REGISTRY_ENDPOINT']\n\
    \   token_credential = DefaultAzureCredential()\n   schema_registry_client = SchemaRegistryClient(endpoint=SCHEMA_REGISTRY_ENDPOINT,\
    \ credential=token_credential)\n\n   ````\n"
  fullName: azure.schemaregistry.SchemaRegistryClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.schemaregistry
  name: SchemaRegistryClient
  summary: 'SchemaRegistryClient is as a central schema repository for enterprise-level
    data infrastructure,

    complete with support for versioning and management.'
  syntax:
    content: SchemaRegistryClient(endpoint, credential, **kwargs)
    parameters:
    - description: The Schema Registry service endpoint, for example my-namespace.servicebus.windows.net.
      id: endpoint
      type:
      - str
    - description: To authenticate to manage the entities of the SchemaRegistry namespace.
      id: credential
      type:
      - TokenCredential
  type: class
  uid: azure.schemaregistry.SchemaRegistryClient
- class: azure.schemaregistry.SchemaRegistryClient
  fullName: azure.schemaregistry.SchemaRegistryClient.close
  langs:
  - python
  module: azure.schemaregistry
  name: close()
  namewithoutparameters: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.schemaregistry.SchemaRegistryClient.close
- class: azure.schemaregistry.SchemaRegistryClient
  example:
  - "Get schema by id.<!--[!code-python[Main](les\\sync_samples\\sample_code_schemaregistry.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\22\\\\azure-schemaregistry-1.0.0b1\\\\samples\\\\sync_samples\\\\sample_code_schemaregistry.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   schema = schema_registry_client.get_schema(schema_id)\n\
    \   schema_content = schema.schema_content\n\n   ````\n"
  fullName: azure.schemaregistry.SchemaRegistryClient.get_schema
  langs:
  - python
  module: azure.schemaregistry
  name: get_schema(schema_id, **kwargs)
  namewithoutparameters: get_schema
  summary: 'Gets a registered schema by its unique ID.

    Azure Schema Registry guarantees that ID is unique within a namespace.'
  syntax:
    content: get_schema(schema_id, **kwargs)
    parameters:
    - description: References specific schema in registry namespace.
      id: schema_id
      isRequired: true
      type:
      - str
    return:
      type:
      - Schema
  type: method
  uid: azure.schemaregistry.SchemaRegistryClient.get_schema
- class: azure.schemaregistry.SchemaRegistryClient
  example:
  - "Get schema id.<!--[!code-python[Main](les\\sync_samples\\sample_code_schemaregistry.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\22\\\\azure-schemaregistry-1.0.0b1\\\\samples\\\\sync_samples\\\\sample_code_schemaregistry.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   schema_properties\
    \ = schema_registry_client.get_schema_id(schema_group, schema_name, serialization_type,\
    \ schema_content)\n   schem_id = schema_properties.schema_id\n\n   ````\n"
  fullName: azure.schemaregistry.SchemaRegistryClient.get_schema_id
  langs:
  - python
  module: azure.schemaregistry
  name: get_schema_id(schema_group, schema_name, serialization_type, schema_content,
    **kwargs)
  namewithoutparameters: get_schema_id
  summary: 'Gets the ID referencing an existing schema within the specified schema
    group,

    as matched by schema content comparison.'
  syntax:
    content: get_schema_id(schema_group, schema_name, serialization_type, schema_content,
      **kwargs)
    parameters:
    - description: Schema group under which schema should be registered.
      id: schema_group
      isRequired: true
      type:
      - str
    - description: Name of schema being registered.
      id: schema_name
      isRequired: true
      type:
      - str
    - description: 'Serialization type for the schema being registered.

        The'
      id: serialization_type
      isRequired: true
      type:
      - Union[str, SerializationType]
    - description: String representation of the schema being registered.
      id: schema_content
      isRequired: true
      type:
      - str
    return:
      type:
      - SchemaProperties
  type: method
  uid: azure.schemaregistry.SchemaRegistryClient.get_schema_id
- class: azure.schemaregistry.SchemaRegistryClient
  example:
  - "Register a new schema.<!--[!code-python[Main](les\\sync_samples\\sample_code_schemaregistry.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\22\\\\azure-schemaregistry-1.0.0b1\\\\samples\\\\sync_samples\\\\sample_code_schemaregistry.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   SCHEMA_GROUP =\
    \ os.environ['SCHEMA_REGISTRY_GROUP']\n   SCHEMA_NAME = 'your-schema-name'\n \
    \  SERIALIZATION_TYPE = SerializationType.AVRO\n   SCHEMA_CONTENT = \"\"\"\n \
    \  {\"namespace\": \"example.avro\",\n    \"type\": \"record\",\n    \"name\"\
    : \"User\",\n    \"fields\": [\n        {\"name\": \"name\", \"type\": \"string\"\
    },\n        {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n\
    \        {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n  \
    \  ]\n   }\"\"\"\n   schema_properties = schema_registry_client.register_schema(SCHEMA_GROUP,\
    \ SCHEMA_NAME, SERIALIZATION_TYPE, SCHEMA_CONTENT)\n   schem_id = schema_properties.schema_id\n\
    \n   ````\n"
  fullName: azure.schemaregistry.SchemaRegistryClient.register_schema
  langs:
  - python
  module: azure.schemaregistry
  name: register_schema(schema_group, schema_name, serialization_type, schema_content,
    **kwargs)
  namewithoutparameters: register_schema
  summary: 'Register new schema. If schema of specified name does not exist in specified
    group,

    schema is created at version 1. If schema of specified name exists already in
    specified group,

    schema is created at latest version + 1.'
  syntax:
    content: register_schema(schema_group, schema_name, serialization_type, schema_content,
      **kwargs)
    parameters:
    - description: Schema group under which schema should be registered.
      id: schema_group
      isRequired: true
      type:
      - str
    - description: Name of schema being registered.
      id: schema_name
      isRequired: true
      type:
      - str
    - description: 'Serialization type for the schema being registered.

        For now Avro is the only supported serialization type by the service.'
      id: serialization_type
      isRequired: true
      type:
      - Union[str, SerializationType]
    - description: String representation of the schema being registered.
      id: schema_content
      isRequired: true
      type:
      - str
    return:
      type:
      - SchemaProperties
  type: method
  uid: azure.schemaregistry.SchemaRegistryClient.register_schema
references:
- fullName: azure.schemaregistry.SchemaRegistryClient.close
  isExternal: false
  name: close()
  parent: azure.schemaregistry.SchemaRegistryClient
  uid: azure.schemaregistry.SchemaRegistryClient.close
- fullName: azure.schemaregistry.SchemaRegistryClient.get_schema
  isExternal: false
  name: get_schema(schema_id, **kwargs)
  parent: azure.schemaregistry.SchemaRegistryClient
  uid: azure.schemaregistry.SchemaRegistryClient.get_schema
- fullName: azure.schemaregistry.SchemaRegistryClient.get_schema_id
  isExternal: false
  name: get_schema_id(schema_group, schema_name, serialization_type, schema_content,
    **kwargs)
  parent: azure.schemaregistry.SchemaRegistryClient
  uid: azure.schemaregistry.SchemaRegistryClient.get_schema_id
- fullName: azure.schemaregistry.SchemaRegistryClient.register_schema
  isExternal: false
  name: register_schema(schema_group, schema_name, serialization_type, schema_content,
    **kwargs)
  parent: azure.schemaregistry.SchemaRegistryClient
  uid: azure.schemaregistry.SchemaRegistryClient.register_schema
- fullName: Union[str, SerializationType]
  name: Union[str, SerializationType]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: SerializationType
    name: SerializationType
    uid: SerializationType
  - fullName: ']'
    name: ']'
  uid: Union[str, SerializationType]
