### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.close
  - azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.deserialize
  - azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.serialize
  class: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.schemaregistry.serializer.avroserializer
  name: SchemaRegistryAvroSerializer
  summary: 'SchemaRegistryAvroSerializer provides the ability to serialize and deserialize
    data according

    to the given avro schema. It would automatically register, get and cache the schema.'
  syntax:
    content: SchemaRegistryAvroSerializer(schema_registry, schema_group, **kwargs)
    parameters:
    - description: 'The schema registry client

        which is used to register schema and retrieve schema from the service.'
      id: schema_registry
      type:
      - azure.schemaregistry.SchemaRegistryClient
    - description: Schema group under which schema should be registered.
      id: schema_group
      type:
      - str
    - description: The writer codec. If None, let the avro library decides.
      id: codec
      type:
      - str
  type: class
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
- class: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.close
  langs:
  - python
  module: azure.schemaregistry.serializer.avroserializer
  name: close()
  namewithoutparameters: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.close
- class: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.deserialize
  langs:
  - python
  module: azure.schemaregistry.serializer.avroserializer
  name: deserialize(data, **kwargs)
  namewithoutparameters: deserialize
  summary: Decode bytes data.
  syntax:
    content: deserialize(data, **kwargs)
    parameters:
    - description: The bytes data needs to be decoded.
      id: data
      isRequired: true
      type:
      - bytes
    return:
      type:
      - Dict[str, Any]
  type: method
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.deserialize
- class: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.serialize
  langs:
  - python
  module: azure.schemaregistry.serializer.avroserializer
  name: serialize(data, schema, **kwargs)
  namewithoutparameters: serialize
  summary: 'Encode dict data with the given schema. The returns bytes are consisted
    of: The first 4 bytes

    denoting record format identifier. The following 32 bytes denoting schema id returned
    by schema registry

    service. The remaining bytes are the real data payload.'
  syntax:
    content: serialize(data, schema, **kwargs)
    parameters:
    - description: The dict data to be encoded.
      id: data
      isRequired: true
    - description: The schema used to encode the data.
      id: schema
      isRequired: true
      type:
      - Union[str, bytes]
  type: method
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.serialize
references:
- fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.close
  isExternal: false
  name: close()
  parent: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.close
- fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.deserialize
  isExternal: false
  name: deserialize(data, **kwargs)
  parent: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.deserialize
- fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.serialize
  isExternal: false
  name: serialize(data, schema, **kwargs)
  parent: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
  uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.serialize
- fullName: Dict[str, Any]
  name: Dict[str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[str, Any]
- fullName: Union[str, bytes]
  name: Union[str, bytes]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: bytes
    name: bytes
    uid: bytes
  - fullName: ']'
    name: ']'
  uid: Union[str, bytes]
