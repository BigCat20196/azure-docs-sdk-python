### YamlMime:PythonClass
uid: azure.security.attestation.AttestationClient
name: AttestationClient
fullName: azure.security.attestation.AttestationClient
module: azure.security.attestation
inheritances:
- builtins.object
summary: "An AttestationClient object enables access to the Attestation family of\
  \ APIs provided\n   by the attestation service.\n\nFor additional client creation\
  \ configuration options, please see [https://aka.ms/azsdk/python/options](https://aka.ms/azsdk/python/options)."
constructor:
  syntax: AttestationClient(credential, instance_url, **kwargs)
  parameters:
  - name: instance_url
    description: base url of the service
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: Credentials for the caller used to interact with the service.
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: pipeline
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:Pipeline>
  - name: policies
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:list>[<xref:HTTPPolicy>]
  - name: transport
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:HttpTransport>
methods:
- uid: azure.security.attestation.AttestationClient.attest_open_enclave
  name: attest_open_enclave
  summary: 'Attests the validity of an Open Enclave report.



    > [!NOTE]

    > Note that if the draft_policy parameter is provided, the resulting attestation
    token will be an unsecured attestation token.

    >


    For additional request configuration options, please see [Python Request Options](https://aka.ms/azsdk/python/options).'
  signature: attest_open_enclave(report, inittime_data=None, runtime_data=None, **kwargs)
  parameters:
  - name: report
    description: An open_enclave report generated from an Intel(tm) SGX enclave
    isRequired: true
    types:
    - <xref:bytes>
  - name: inittime_data
    description: Data presented at the time that the SGX enclave was initialized.
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationData>
  - name: runtime_data
    description: Data presented at the time that the open_enclave report was created.
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationData>
  - name: draft_policy
    description: '"draft" or "experimental" policy to be used with

      this attestation request. If this parameter is provided, then this

      policy document will be used for the attestation request.

      This allows a caller to test various policy documents against actual data

      before applying the policy document via the set_policy API.'
    types:
    - <xref:str>
  return:
    description: Attestation service response encapsulating an <xref:azure.security.attestation.AttestationResult>.
    types:
    - <xref:azure.security.attestation.AttestationResponse>[<xref:azure.security.attestation.AttestationResult>]
  examples:
  - "Attesting using a draft attestation policy.<!--[!code-python[Main](les\\sample_attest_enclave.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\31\\\\azure-security-attestation-1.0.0b4\\\\samples\\\\sample_attest_enclave.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   draft_policy=\"\
    \"\"\n   version= 1.0;\n   authorizationrules\n   {\n       [ type==\"x-ms-sgx-is-debuggable\"\
    , value==false ] &&\n       [ type==\"x-ms-sgx-product-id\", value==1 ] &&\n \
    \      [ type==\"x-ms-sgx-svn\", value>= 0 ] &&\n       [ type==\"x-ms-sgx-mrsigner\"\
    , value==\"2c1a44952ae8207135c6c29b75b8c029372ee94b677e15c20bd42340f10d41aa\"\
    ]\n           => permit();\n   };\n   issuancerules {\n       c:[type==\"x-ms-sgx-mrsigner\"\
    ] => issue(type=\"My-MrSigner\", value=c.value);\n   };\n   \"\"\"\n   print('Attest\
    \ Open enclave using ', self.shared_url)\n   print('Using draft policy:', draft_policy)\n\
    \   with self._create_client(self.shared_url) as attest_client:\n       response\
    \ = attest_client.attest_open_enclave(\n           oe_report, runtime_data=AttestationData(runtime_data,\
    \ is_json=False),\n           draft_policy=draft_policy)\n\n       print(\"Token\
    \ algorithm\", response.token.algorithm)\n       print(\"Issuer of token is: \"\
    , response.value.issuer)\n\n   ````\n"
- uid: azure.security.attestation.AttestationClient.attest_sgx_enclave
  name: attest_sgx_enclave
  summary: 'Attests the validity of an SGX quote.



    > [!NOTE]

    > Note that if the draft_policy parameter is provided, the resulting attestation
    token will be an unsecured attestation token.

    >



    For additional request configuration options, please see [Python Request Options](https://aka.ms/azsdk/python/options).'
  signature: attest_sgx_enclave(quote, inittime_data=None, runtime_data=None, **kwargs)
  parameters:
  - name: quote
    description: An SGX quote generated from an Intel(tm) SGX enclave
    isRequired: true
    types:
    - <xref:bytes>
  - name: inittime_data
    description: Data presented at the time that the SGX enclave was initialized.
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationData>
  - name: runtime_data
    description: Data presented at the time that the SGX quote was created.
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationData>
  - name: draft_policy
    description: '"draft" or "experimental" policy to be used with

      this attestation request. If this parameter is provided, then this

      policy document will be used for the attestation request.

      This allows a caller to test various policy documents against actual data

      before applying the policy document via the set_policy API'
    types:
    - <xref:str>
  return:
    description: Attestation service response encapsulating an <xref:azure.security.attestation.AttestationResult>.
    types:
    - <xref:azure.security.attestation.AttestationResponse>[<xref:azure.security.attestation.AttestationResult>]
  examples:
  - "Attesting an SGX Enclave<!--[!code-python[Main](les\\sample_attest_enclave.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\31\\\\azure-security-attestation-1.0.0b4\\\\samples\\\\sample_attest_enclave.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   print()\n   print('Attest\
    \ SGX enclave using ', self.shared_url)\n   with self._create_client(self.shared_url)\
    \ as attest_client:\n       response = attest_client.attest_sgx_enclave(\n   \
    \        quote, runtime_data=AttestationData(runtime_data, is_json=False))\n\n\
    \       print(\"Issuer of token is: \", response.value.issuer)\n\n   ````\n"
- uid: azure.security.attestation.AttestationClient.attest_tpm
  name: attest_tpm
  summary: 'Attest a TPM based enclave.


    See the [TPM Attestation Protocol Reference](https://docs.microsoft.com/en-us/azure/attestation/virtualization-based-security-protocol)
    for more information.'
  signature: attest_tpm(request, **kwargs)
  parameters:
  - name: request
    description: Incoming request to send to the TPM attestation service.
    isRequired: true
    types:
    - <xref:azure.security.attestation.TpmAttestationRequest>
  return:
    description: A structure containing the response from the TPM attestation.
    types:
    - <xref:azure.security.attestation.TpmAttestationResponse>
- uid: azure.security.attestation.AttestationClient.close
  name: close
  signature: close()
- uid: azure.security.attestation.AttestationClient.get_openidmetadata
  name: get_openidmetadata
  summary: Retrieves the OpenID metadata configuration document for this attestation
    instance.
  signature: get_openidmetadata(**kwargs)
  return:
    description: OpenID metadata configuration
    types:
    - <xref:Any>
- uid: azure.security.attestation.AttestationClient.get_signing_certificates
  name: get_signing_certificates
  summary: 'Returns the set of signing certificates used to sign attestation tokens.



    For additional request configuration options, please see [Python Request Options](https://aka.ms/azsdk/python/options).'
  signature: get_signing_certificates(**kwargs)
  return:
    description: A list of <xref:azure.security.attestation.AttestationSigner> objects.
    types:
    - <xref:list>[<xref:azure.security.attestation.AttestationSigner>]
