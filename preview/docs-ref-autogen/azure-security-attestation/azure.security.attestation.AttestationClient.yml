### YamlMime:PythonClass
uid: azure.security.attestation.AttestationClient
name: AttestationClient
fullName: azure.security.attestation.AttestationClient
module: azure.security.attestation
inheritances:
- builtins.object
summary: "An AttestationClient object enables access to the Attestation family of\
  \ APIs provided\n   by the attestation service.\n\nFor additional client creation\
  \ configuration options, please see [https://aka.ms/azsdk/python/options](https://aka.ms/azsdk/python/options)."
constructor:
  syntax: AttestationClient(credential, instance_url, **kwargs)
  parameters:
  - name: base_url
    description: base url of the service
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: Credentials for the caller used to interact with the service.
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredentials>
  - name: pipeline
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:Pipeline>
  - name: transport
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:HttpTransport>
  - name: policies
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:list>[<xref:HTTPPolicy>]
methods:
- uid: azure.security.attestation.AttestationClient.attest_open_enclave
  name: attest_open_enclave
  summary: 'Attests the validity of an Open Enclave report.



    > [!NOTE]

    > Note that if the draft_policy parameter is provided, the resulting attestation
    token will be an unsecured attestation token.

    >


    For additional request configuration options, please see [Python Request Options](https://aka.ms/azsdk/python/options).'
  signature: attest_open_enclave(report, inittime_data=None, runtime_data=None, draft_policy=None,
    **kwargs)
  parameters:
  - name: report
    description: An open_enclave report generated from an Intel(tm) SGX enclave
    isRequired: true
    types:
    - <xref:bytes>
  - name: inittime_data
    description: Data presented at the time that the SGX enclave was initialized.
    isRequired: true
    types:
    - <xref:Optional>[<xref:AttestationData>]
  - name: runtime_data
    description: Data presented at the time that the SGX quote was created.
    isRequired: true
    types:
    - <xref:Optional>[<xref:AttestationData>]
  - name: draft_policy
    description: '"draft", or "experimental" policy to be used with

      this attestation request. If this parameter is provided, then this

      policy document will be used for the attestation request.

      This allows a caller to test various policy documents against actual data

      before applying the policy document via the set_policy API.'
    isRequired: true
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.security.attestation.AttestationClient.attest_sgx_enclave
  name: attest_sgx_enclave
  summary: 'Attests the validity of an SGX quote.



    > [!NOTE]

    > Note that if the draft_policy parameter is provided, the resulting attestation
    token will be an unsecured attestation token.

    >



    For additional request configuration options, please see [Python Request Options](https://aka.ms/azsdk/python/options).'
  signature: attest_sgx_enclave(quote, inittime_data=None, runtime_data=None, draft_policy=None,
    **kwargs)
  parameters:
  - name: quote
    description: An SGX quote generated from an Intel(tm) SGX enclave
    isRequired: true
    types:
    - <xref:bytes>
  - name: inittime_data
    description: Data presented at the time that the SGX enclave was initialized.
    isRequired: true
    types:
    - <xref:Optional>[<xref:AttestationData>]
  - name: runtime_data
    description: Data presented at the time that the SGX quote was created.
    isRequired: true
    types:
    - <xref:Optional>[<xref:AttestationData>]
  - name: draft_policy
    description: '"draft", or "experimental" policy to be used with

      this attestation request. If this parameter is provided, then this

      policy document will be used for the attestation request.

      This allows a caller to test various policy documents against actual data

      before applying the policy document via the set_policy API'
    isRequired: true
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.security.attestation.AttestationClient.attest_tpm
  name: attest_tpm
  summary: 'Attest a TPM based enclave.


    See the [TPM Attestation Protocol Reference](https://docs.microsoft.com/en-us/azure/attestation/virtualization-based-security-protocol)
    for more information.'
  signature: attest_tpm(request, **kwargs)
  parameters:
  - name: request
    description: Incoming request to send to the TPM attestation service.
    isRequired: true
    types:
    - <xref:TpmAttestationRequest>
- uid: azure.security.attestation.AttestationClient.close
  name: close
  signature: close()
- uid: azure.security.attestation.AttestationClient.get_openidmetadata
  name: get_openidmetadata
  summary: Retrieves the OpenID metadata configuration document for this attestation
    instance.
  signature: get_openidmetadata()
- uid: azure.security.attestation.AttestationClient.get_signing_certificates
  name: get_signing_certificates
  summary: 'Returns the set of signing certificates used to sign attestation tokens.



    For additional request configuration options, please see [Python Request Options](https://aka.ms/azsdk/python/options).'
  signature: get_signing_certificates(**kwargs)
