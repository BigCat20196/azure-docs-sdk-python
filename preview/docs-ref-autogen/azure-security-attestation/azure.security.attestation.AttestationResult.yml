### YamlMime:PythonClass
uid: azure.security.attestation.AttestationResult
name: AttestationResult
fullName: azure.security.attestation.AttestationResult
module: azure.security.attestation
inheritances:
- builtins.object
summary: 'An AttestationResult represents the claims returned from the attestation

  service as a result of a call to

  <xref:AttestationClient.attest_sgx>, or <xref:azure.security.attestation.AttestationClient.attest_open_enclave>.'
constructor:
  syntax: AttestationResult(**kwargs)
variables:
- description: Entity which issued the attestation token.
  name: issuer
  types:
  - <xref:str>
- description: Confirmation claim for the token.
  name: confirmation
  types:
  - <xref:dict>
- description: Unique identifier for the token.
  name: unique_identifier
  types:
  - <xref:str>
- description: Returns the input *nonce* attribute passed to the *attest* API.
  name: nonce
  types:
  - <xref:str>
- description: Version of the token. Must be "1.0"
  name: version
  types:
  - <xref:str>
- description: Runtime claims passed in from the caller of the attest API.
  name: runtime_claims
  types:
  - <xref:dict>
- description: Inittime claims passed in from the caller of the attest API.
  name: inittime_claims
  types:
  - <xref:dict>
- description: Runtime data passed in from the caller of the attest API.
  name: enclave_held_data
  types:
  - <xref:bytes>
- description: Attestation claims issued by policies.
  name: policy_claims
  types:
  - <xref:dict>
- description: Verifier which generated this token.
  name: verifier_type
  types:
  - <xref:str>
- description: 'If the policy which processed the request is signed,

    this will be the certificate which signed the policy.'
  name: policy_signer
  types:
  - <xref:azure.security.attestation.AttestationSigner>
- description: 'The hash of the policy which processed the attestation

    evidence.'
  name: policy_hash
  types:
  - <xref:str>
- description: True if the SGX enclave being attested is debuggable.
  name: is_debuggable
  types:
  - <xref:bool>
- description: Product ID for the SGX enclave being attested.
  name: product_id
  types:
  - <xref:int>
- description: MRENCLAVE value for the SGX enclave being attested.
  name: mr_enclave
  types:
  - <xref:str>
- description: MRSIGNER value for the SGX enclave being attested.
  name: mr_signer
  types:
  - <xref:str>
- description: Security version number for the SGX enclave being attested.
  name: svn
  types:
  - <xref:int>
- description: 'Collateral which identifies the collateral used to

    create the token.'
  name: sgx_collateral
  types:
  - <xref:dict>
attributes:
- uid: azure.security.attestation.AttestationResult.confirmation
  name: confirmation
  summary: 'Returns the confirmation claim for the attestation token.


    If present, the confirmation property can be used to identify a proof of

    possession of a key.


    See [RFC 7800 Section 3.1](https://www.rfc-editor.org/rfc/rfc7800.html#section-3.1)
    for details.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.enclave_held_data
  name: enclave_held_data
  summary: 'Returns the value of the runtime_data field specified as an input

    to the <xref:AttestationClient.attest_sgx> or

    <xref:azure.security.attestation.AttestationClient.attest_open_enclave> API.



    > [!NOTE]

    > The enclave_held_data prperty will only be populated if the

    >

    > runtime_data parameter to the Attest API is marked as not being

    >

    > JSON.

    >'
  return:
    types:
    - <xref:azure.security.attestation.bytes>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.inittime_claims
  name: inittime_claims
  summary: 'Returns the inittime claims in the token.


    This value will match the input *inittime_data* property to the

    <xref:AttestationClient.attest_sgx> or

    <xref:azure.security.attestation.AttestationClient.attest_open_enclave> API.



    > [!NOTE]

    > The inittime_claims property will only be populated if the

    >

    > inittime_data parameter to the Attest API is marked as being JSON.

    >'
  return:
    types:
    - <xref:dict>[<xref:str>, <xref:azure.security.attestation.Any>]
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.is_debuggable
  name: is_debuggable
  summary: 'Returns "True" if the source evidence being attested indicates

    that the TEE has debugging enabled.'
  return:
    types:
    - <xref:bool>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.issuer
  name: issuer
  summary: 'Returns the issuer of the attestation token.


    The issuer for the token MUST be the same as the *instance_uri* associated

    with the <xref:azure.security.attestation.AttestationClient> object. If it is
    not, then the token

    should be rejected.


    See [RFC 7519 Section 4.1.1](https://www.rfc-editor.org/rfc/rfc7519.html#section-4.1.1)
    for details.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.mr_enclave
  name: mr_enclave
  summary: Returns HEX encoded *mr-enclave* value of the SGX enclave being attested.
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.mr_signer
  name: mr_signer
  summary: Returns HEX encoded *mr-signer* value of the SGX enclave being attested.
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.nonce
  name: nonce
  summary: Returns the value of the "nonce" input to the attestation request.
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.policy_claims
  name: policy_claims
  summary: Returns the claims for the token generated by attestation policy.
  return:
    types:
    - <xref:dict>[<xref:str>, <xref:azure.security.attestation.Any>]
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.policy_hash
  name: policy_hash
  summary: 'Returns the base64url encoded SHA256 hash of the Base64Url encoded

    attestation policy which was applied when generating this token.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.policy_signer
  name: policy_signer
  summary: 'Returns the signing certificate which was used to sign the policy

    which was applied when the token was generated.'
  return:
    types:
    - <xref:azure.security.attestation.AttestationSigner>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.product_id
  name: product_id
  summary: Returns the product id associated with the SGX enclave being attested.
  return:
    types:
    - <xref:float>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.runtime_claims
  name: runtime_claims
  summary: 'Returns the runtime claims in the token.


    This value will match the input *runtime_data* property to the

    <xref:AttestationClient.attest_sgx> or

    <xref:azure.security.attestation.AttestationClient.attest_open_enclave> API.



    > [!NOTE]

    > The runtime_claims property will only be populated if the

    >

    > runtime_data parameter to the Attest API is marked as being JSON.

    >'
  return:
    types:
    - <xref:dict>[<xref:str>, <xref:azure.security.attestation.Any>]
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.sgx_collateral
  name: sgx_collateral
  summary: 'Returns a set of information describing the complete set of inputs

    to the *oe_verify_evidence*'
  return:
    types:
    - <xref:dict>[<xref:str>, <xref:azure.security.attestation.Any>]
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.svn
  name: svn
  summary: Returns the *svn* value of the SGX enclave being attested.
  return:
    types:
    - <xref:int>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.unique_id
  name: unique_id
  summary: 'Returns a unique ID claim for the attestation token.


    If present, the unique_id property can be used to distinguish between

    different attestation tokens.


    See [RFC 7519 Section 4.1.7](https://rfc-editor.org/rfc/rfc7519.html#section-4.1.7)
    for details.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.verifier_type
  name: verifier_type
  summary: Returns the verifier which generated this attestation token.
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.security.attestation.AttestationResult.version
  name: version
  summary: Returns the version of the information returned in the token.
  return:
    types:
    - <xref:str>
    - <xref:None>
