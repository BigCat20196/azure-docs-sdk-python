### YamlMime:PythonClass
uid: azure.security.attestation.AttestationAdministrationClient
name: AttestationAdministrationClient
fullName: azure.security.attestation.AttestationAdministrationClient
module: azure.security.attestation
inheritances:
- builtins.object
summary: Provides administrative APIs for managing an instance of the Attestation
  Service.
constructor:
  syntax: AttestationAdministrationClient(credential, instance_url, **kwargs)
  parameters:
  - name: instance_url
    description: base url of the service
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: Credentials for the caller used to interact with the service.
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: pipeline
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:Pipeline>
  - name: transport
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:HttpTransport>
  - name: policies
    description: If omitted, the standard pipeline is used.
    types:
    - <xref:list>[<xref:HTTPPolicy>]
methods:
- uid: azure.security.attestation.AttestationAdministrationClient.add_policy_management_certificate
  name: add_policy_management_certificate
  summary: 'Adds a new policy management certificate to the set of policy management
    certificates for the instance.


    The <xref:azure.security.attestation.PolicyCertificatesModificationResult> response
    to the

    <xref:azure.security.attestation.AttestationAdministrationClient.add_policy_management_certificate>
    API contains two attributes

    of interest.


    The first is *certificate_resolution*, which indicates

    whether the certificate in question is present in the set of policy

    management certificates after the operation has completed, or if it is

    absent.


    The second is the *thumbprint* of the certificate added. The *thumbprint*

    for the certificate is the SHA1 hash of the DER encoding of the

    certificate.'
  signature: add_policy_management_certificate(certificate_to_add, signing_key, **kwargs)
  parameters:
  - name: certificate_to_add
    description: 'DER encoded X.509 certificate to add to

      the list of attestation policy management certificates.'
    isRequired: true
    types:
    - <xref:bytes>
  - name: signing_key
    description: 'Signing Key representing one of

      the *existing* attestation signing certificates.'
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationSigningKey>
  return:
    types:
    - Attestation service responseencapsulating the status of the add request.
- uid: azure.security.attestation.AttestationAdministrationClient.close
  name: close
  signature: close()
- uid: azure.security.attestation.AttestationAdministrationClient.get_policy
  name: get_policy
  summary: Retrieves the attestation policy for a specified attestation type.
  signature: get_policy(attestation_type, **kwargs)
  parameters:
  - name: attestation_type
    description: '<xref:azure.security.attestation.AttestationType> for

      which to retrieve the policy.'
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationType>
  return:
    types:
    - Attestation service response encapsulating a string attestation policy.
  exceptions:
  - description: Raised when an attestation token is invalid.
    type: azure.security.attestation.AttestationTokenValidationException
- uid: azure.security.attestation.AttestationAdministrationClient.get_policy_management_certificates
  name: get_policy_management_certificates
  summary: 'Retrieves the set of policy management certificates for the instance.


    The list of policy management certificates will only be non-empty if the

    attestation service instance is in Isolated mode.'
  signature: get_policy_management_certificates(**kwargs)
  return:
    types:
    - Attestation service responseencapsulating a list of DER encoded X.509 certificate
      chains.
- uid: azure.security.attestation.AttestationAdministrationClient.remove_policy_management_certificate
  name: remove_policy_management_certificate
  summary: 'Removes a new policy management certificate to the set of policy management
    certificates for the instance.


    The <xref:azure.security.attestation.PolicyCertificatesModificationResult> response
    to the

    <xref:azure.security.attestation.AttestationAdministrationClient.remove_policy_management_certificate>
    API contains two attributes

    of interest.


    The first is *certificate_resolution*, which indicates

    whether the certificate in question is present in the set of policy

    management certificates after the operation has completed, or if it is

    absent.


    The second is the *thumbprint* of the certificate added. The *thumbprint*

    for the certificate is the SHA1 hash of the DER encoding of the

    certificate.'
  signature: remove_policy_management_certificate(certificate_to_add, signing_key,
    **kwargs)
  parameters:
  - name: certificate_to_add
    description: 'DER encoded X.509 certificate to add to

      the list of attestation policy management certificates.'
    isRequired: true
    types:
    - <xref:bytes>
  - name: signing_key
    description: 'Signing Key representing one of

      the *existing* attestation signing certificates.'
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationSigningKey>
  return:
    types:
    - Attestation service responseencapsulating a list of DER encoded X.509 certificate
      chains.
- uid: azure.security.attestation.AttestationAdministrationClient.reset_policy
  name: reset_policy
  summary: "Resets the attestation policy for the specified attestation type to the\
    \ default value.\n\n\n> [!NOTE]\n> If the attestation instance is in Isolated\
    \ mode, then the\n>\n> signing_key parameter MUST be a signing key containing\
    \ one of the\n>\n> certificates returned by <xref:azure.security.attestation.AttestationAdministrationClient.get_policy_management_certificates>.\n\
    >\n> \n>\n> If the attestation instance is in AAD mode, then the signing_key\n\
    >\n> parameter does not need to be provided.\n>"
  signature: reset_policy(attestation_type, **kwargs)
  parameters:
  - name: attestation_type
    description: '<xref:azure.security.attestation.AttestationType> for

      which to set the policy.'
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationType>
  - name: attestation_policy
    description: Attestation policy to be reset.
    isRequired: true
    types:
    - <xref:str>
  - name: signing_key
    description: 'Signing key to be

      used to sign the policy before sending it to the service.'
    types:
    - <xref:azure.security.attestation.AttestationSigningKey>
  return:
    types:
    - Attestation service response encapsulating a <xref:azure.security.attestation.PolicyResult>.
  exceptions:
  - description: Raised when an attestation token is invalid.
    type: azure.security.attestation.AttestationTokenValidationException
- uid: azure.security.attestation.AttestationAdministrationClient.set_policy
  name: set_policy
  summary: "Sets the attestation policy for the specified attestation type.\n\n\n\
    > [!NOTE]\n> If the attestation instance is in Isolated mode, then the\n>\n> signing_key\
    \ parameter MUST be a signing key containing one of the\n>\n> certificates returned\
    \ by <xref:azure.security.attestation.AttestationAdministrationClient.get_policy_management_certificates>.\n\
    >\n> \n>\n> If the attestation instance is in AAD mode, then the signing_key\n\
    >\n> parameter does not need to be provided.\n>"
  signature: set_policy(attestation_type, attestation_policy, **kwargs)
  parameters:
  - name: attestation_type
    description: '<xref:azure.security.attestation.AttestationType> for

      which to set the policy.'
    isRequired: true
    types:
    - <xref:azure.security.attestation.AttestationType>
  - name: attestation_policy
    description: Attestation policy to be set.
    isRequired: true
    types:
    - <xref:str>
  - name: signing_key
    description: 'Signing key to be

      used to sign the policy before sending it to the service.'
    types:
    - <xref:azure.security.attestation.AttestationSigningKey>
  return:
    types:
    - Attestation service response encapsulating a <xref:azure.security.attestation.PolicyResult>.
  exceptions:
  - description: Raised when an attestation token is invalid.
    type: azure.security.attestation.AttestationTokenValidationException
