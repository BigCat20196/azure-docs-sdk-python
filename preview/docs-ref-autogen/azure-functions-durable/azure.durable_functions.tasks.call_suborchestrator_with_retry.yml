### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.durable_functions.tasks.call_suborchestrator_with_retry.call_sub_orchestrator_with_retry_task
  fullName: azure.durable_functions.tasks.call_suborchestrator_with_retry
  langs:
  - python
  module: azure.durable_functions.tasks.call_suborchestrator_with_retry
  name: call_suborchestrator_with_retry
  type: module
  uid: azure.durable_functions.tasks.call_suborchestrator_with_retry
- fullName: azure.durable_functions.tasks.call_suborchestrator_with_retry.call_sub_orchestrator_with_retry_task
  langs:
  - python
  module: azure.durable_functions.tasks.call_suborchestrator_with_retry
  name: 'call_sub_orchestrator_with_retry_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
    str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of Scheduling a sub-orchestrator for execution, with
    retry options.
  syntax:
    content: 'call_sub_orchestrator_with_retry_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
      str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
      NoneType] = None) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: A reference to the orchestration context.
      id: context
      type:
      - '''DurableOrchestrationContext'':'
    - description: The list of history events to search to determine the current state
        of the activity.
      id: state
      type:
      - List[HistoryEvent]
    - description: The settings for retrying this sub-orchestrator in case of a failure.
      id: retry_options
      type:
      - RetryOptions
    - description: The name of the activity function to schedule.
      id: name
      type:
      - str
    - description: The JSON-serializable input to pass to the activity function. Defaults
        to None.
      id: input
      type:
      - Optional[Any]
    - description: The instance ID of the sub-orchestrator to call. Defaults to "".
      id: instance_id
      type:
      - str
    return:
      description: A Durable Task that completes when the called sub-orchestrator
        completes or fails.
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.call_suborchestrator_with_retry.call_sub_orchestrator_with_retry_task
references:
- fullName: azure.durable_functions.tasks.call_suborchestrator_with_retry.call_sub_orchestrator_with_retry_task
  isExternal: false
  name: 'call_sub_orchestrator_with_retry_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
    str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks.call_suborchestrator_with_retry
  uid: azure.durable_functions.tasks.call_suborchestrator_with_retry.call_sub_orchestrator_with_retry_task
- fullName: List[HistoryEvent]
  name: List[HistoryEvent]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: HistoryEvent
    name: HistoryEvent
    uid: HistoryEvent
  - fullName: ']'
    name: ']'
  uid: List[HistoryEvent]
- fullName: Optional[Any]
  name: Optional[Any]
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Optional[Any]
