### YamlMime:PythonClass
uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations
name: PolicyAssignmentsOperations
fullName: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations
module: azure.mgmt.resource.policy.v2019_01_01.operations
inheritances:
- builtins.object
summary: 'PolicyAssignmentsOperations operations.


  You should not instantiate this class directly. Instead, you should create a Client
  instance that

  instantiates it for you and attaches it as an attribute.'
constructor:
  syntax: PolicyAssignmentsOperations(client, config, serializer, deserializer)
  parameters:
  - name: client
    description: Client for service requests.
  - name: config
    description: Configuration of service client.
  - name: serializer
    description: An object model serializer.
  - name: deserializer
    description: An object model deserializer.
variables:
- description: Alias to model classes used in this operation group.
  name: models
methods:
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.create
  name: create
  summary: 'Creates or updates a policy assignment.


    This operation creates or updates a policy assignment with the given scope and
    name. Policy

    assignments apply to all resources contained within their scope. For example,
    when you assign a

    policy at resource group scope, that policy applies to all resources in the group.'
  signature: create(scope, policy_assignment_name, parameters, **kwargs)
  parameters:
  - name: scope
    description: 'The scope of the policy assignment. Valid scopes are: management
      group (format:

      ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
      (format:

      ''/subscriptions/{subscriptionId}''), resource group (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
      (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
    isRequired: true
    types:
    - <xref:str>
  - name: policy_assignment_name
    description: The name of the policy assignment.
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: Parameters for the policy assignment.
    isRequired: true
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
  - name: cls
    description: A custom type or function that will be passed the direct response
    isRequired: true
    types:
    - <xref:callable>
  return:
    description: PolicyAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.create_by_id
  name: create_by_id
  summary: 'Creates or updates a policy assignment.


    This operation creates or updates the policy assignment with the given ID. Policy
    assignments

    made on a scope apply to all resources contained in that scope. For example, when
    you assign a

    policy to a resource group that policy applies to all resources in the group.
    Policy assignment

    IDs have this format:

    ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
    Valid

    scopes are: management group (format:

    ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
    (format:

    ''/subscriptions/{subscriptionId}''), resource group (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
    (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
  signature: create_by_id(policy_assignment_id, parameters, **kwargs)
  parameters:
  - name: policy_assignment_id
    description: 'The ID of the policy assignment to create. Use the format

      ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.'
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: Parameters for policy assignment.
    isRequired: true
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
  - name: cls
    description: A custom type or function that will be passed the direct response
    isRequired: true
    types:
    - <xref:callable>
  return:
    description: PolicyAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.delete
  name: delete
  summary: 'Deletes a policy assignment.


    This operation deletes a policy assignment, given its name and the scope it was
    created in. The

    scope of a policy assignment is the part of its ID preceding

    ''/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.'
  signature: delete(scope, policy_assignment_name, **kwargs)
  parameters:
  - name: scope
    description: 'The scope of the policy assignment. Valid scopes are: management
      group (format:

      ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
      (format:

      ''/subscriptions/{subscriptionId}''), resource group (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
      (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
    isRequired: true
    types:
    - <xref:str>
  - name: policy_assignment_name
    description: The name of the policy assignment to delete.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    isRequired: true
    types:
    - <xref:callable>
  return:
    description: PolicyAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
    - <xref:None>
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.delete_by_id
  name: delete_by_id
  summary: 'Deletes a policy assignment.


    This operation deletes the policy with the given ID. Policy assignment IDs have
    this format:

    ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
    Valid

    formats for {scope} are: ''/providers/Microsoft.Management/managementGroups/{managementGroup}''

    (management group), ''/subscriptions/{subscriptionId}'' (subscription),

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'' (resource
    group), or

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''

    (resource).'
  signature: delete_by_id(policy_assignment_id, **kwargs)
  parameters:
  - name: policy_assignment_id
    description: 'The ID of the policy assignment to delete. Use the format

      ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.'
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    isRequired: true
    types:
    - <xref:callable>
  return:
    description: PolicyAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
    - <xref:None>
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.get
  name: get
  summary: 'Retrieves a policy assignment.


    This operation retrieves a single policy assignment, given its name and the scope
    it was

    created at.'
  signature: get(scope, policy_assignment_name, **kwargs)
  parameters:
  - name: scope
    description: 'The scope of the policy assignment. Valid scopes are: management
      group (format:

      ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
      (format:

      ''/subscriptions/{subscriptionId}''), resource group (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
      (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
    isRequired: true
    types:
    - <xref:str>
  - name: policy_assignment_name
    description: The name of the policy assignment to get.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    isRequired: true
    types:
    - <xref:callable>
  return:
    description: PolicyAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.get_by_id
  name: get_by_id
  summary: 'Retrieves the policy assignment with the given ID.


    The operation retrieves the policy assignment with the given ID. Policy assignment
    IDs have

    this format:

    ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
    Valid

    scopes are: management group (format:

    ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
    (format:

    ''/subscriptions/{subscriptionId}''), resource group (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
    (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
  signature: get_by_id(policy_assignment_id, **kwargs)
  parameters:
  - name: policy_assignment_id
    description: 'The ID of the policy assignment to get. Use the format

      ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.'
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    isRequired: true
    types:
    - <xref:callable>
  return:
    description: PolicyAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignment>
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.list
  name: list
  summary: "Retrieves all policy assignments that apply to a subscription.\n\n   This\
    \ operation retrieves the list of all policy assignments associated with the given\n\
    \n\nsubscription that match the optional given $filter. Valid values for $filter\
    \ are: 'atScope()'\nor 'policyDefinitionId eq '{value}''. If $filter is not provided,\
    \ the unfiltered list includes\nall policy assignments associated with the subscription,\
    \ including those that apply directly or\nfrom management groups that contain\
    \ the given subscription, as well as any applied to objects\ncontained within\
    \ the subscription. If $filter=atScope() is provided, the returned list includes\n\
    all policy assignments that apply to the subscription, which is everything in\
    \ the unfiltered\nlist except those applied to objects contained within the subscription.\
    \ If\n$filter=policyDefinitionId eq '{value}' is provided, the returned list includes\
    \ all policy\nassignments of the policy definition whose id is {value}.\n\n  \
    \    param filter:\n         The filter to apply on the operation. Valid values\
    \ for $filter are: 'atScope()'\n\n   or 'policyDefinitionId eq '{value}''. If\
    \ $filter is not provided, no filtering is performed.\n      type filter:\n  \
    \       str\n\n      keyword callable cls:\n         A custom type or function\
    \ that will be passed the direct response\n\n      return:\n         An iterator\
    \ like instance of either PolicyAssignmentListResult or the result of cls(response)\n\
    \n      rtype:\n         ~azure.core.paging.ItemPaged[~azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignmentListResult]\n\
    \n      raises:\n         ~azure.core.exceptions.HttpResponseError"
  signature: list(filter=None, **kwargs)
  parameters:
  - name: filter
    defaultValue: None
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.list_for_resource
  name: list_for_resource
  summary: "Retrieves all policy assignments that apply to a resource.\n\n   This\
    \ operation retrieves the list of all policy assignments associated with the specified\n\
    \n\nresource in the given resource group and subscription that match the optional\
    \ given $filter.\nValid values for $filter are: 'atScope()' or 'policyDefinitionId\
    \ eq '{value}''. If $filter is\nnot provided, the unfiltered list includes all\
    \ policy assignments associated with the resource,\nincluding those that apply\
    \ directly or from all containing scopes, as well as any applied to\nresources\
    \ contained within the resource. If $filter=atScope() is provided, the returned\
    \ list\nincludes all policy assignments that apply to the resource, which is everything\
    \ in the\nunfiltered list except those applied to resources contained within the\
    \ resource. If\n$filter=policyDefinitionId eq '{value}' is provided, the returned\
    \ list includes all policy\nassignments of the policy definition whose id is {value}\
    \ that apply to the resource. Three\nparameters plus the resource name are used\
    \ to identify a specific resource. If the resource is\nnot part of a parent resource\
    \ (the more common case), the parent resource path should not be\nprovided (or\
    \ provided as ''). For example a web app could be specified as\n({resourceProviderNamespace}\
    \ == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==\n'sites',\
    \ {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,\
    \ then all\nparameters should be provided. For example a virtual machine DNS name\
    \ could be specified as\n({resourceProviderNamespace} == 'Microsoft.Compute',\
    \ {parentResourcePath} ==\n'virtualMachines/MyVirtualMachine', {resourceType}\
    \ == 'domainNames', {resourceName} ==\n'MyComputerName'). A convenient alternative\
    \ to providing the namespace and type name separately\nis to provide both in the\
    \ {resourceType} parameter, format: ({resourceProviderNamespace} == '',\n{parentResourcePath}\
    \ == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} ==\n'MyWebApp').\n\
    \n      param resource_group_name:\n         The name of the resource group containing\
    \ the resource.\n\n      type resource_group_name:\n         str\n\n      param\
    \ resource_provider_namespace:\n         The namespace of the resource provider.\
    \ For example, the\n\n   namespace of a virtual machine is Microsoft.Compute (from\
    \ Microsoft.Compute/virtualMachines).\n      type resource_provider_namespace:\n\
    \         str\n\n      param parent_resource_path:\n         The parent resource\
    \ path. Use empty string if there is none.\n\n      type parent_resource_path:\n\
    \         str\n\n      param resource_type:\n         The resource type name.\
    \ For example the type name of a web app is 'sites'\n\n   (from Microsoft.Web/sites).\n\
    \      type resource_type:\n         str\n\n      param resource_name:\n     \
    \    The name of the resource.\n\n      type resource_name:\n         str\n\n\
    \      param filter:\n         The filter to apply on the operation. Valid values\
    \ for $filter are: 'atScope()'\n\n   or 'policyDefinitionId eq '{value}''. If\
    \ $filter is not provided, no filtering is performed.\n      type filter:\n  \
    \       str\n\n      keyword callable cls:\n         A custom type or function\
    \ that will be passed the direct response\n\n      return:\n         An iterator\
    \ like instance of either PolicyAssignmentListResult or the result of cls(response)\n\
    \n      rtype:\n         ~azure.core.paging.ItemPaged[~azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignmentListResult]\n\
    \n      raises:\n         ~azure.core.exceptions.HttpResponseError"
  signature: list_for_resource(resource_group_name, resource_provider_namespace, parent_resource_path,
    resource_type, resource_name, filter=None, **kwargs)
  parameters:
  - name: resource_group_name
    isRequired: true
  - name: resource_provider_namespace
    isRequired: true
  - name: parent_resource_path
    isRequired: true
  - name: resource_type
    isRequired: true
  - name: resource_name
    isRequired: true
  - name: filter
    defaultValue: None
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.list_for_resource_group
  name: list_for_resource_group
  summary: "Retrieves all policy assignments that apply to a resource group.\n\n \
    \  This operation retrieves the list of all policy assignments associated with\
    \ the given resource\n\n\ngroup in the given subscription that match the optional\
    \ given $filter. Valid values for $filter\nare: 'atScope()' or 'policyDefinitionId\
    \ eq '{value}''. If $filter is not provided, the\nunfiltered list includes all\
    \ policy assignments associated with the resource group, including\nthose that\
    \ apply directly or apply from containing scopes, as well as any applied to resources\n\
    contained within the resource group. If $filter=atScope() is provided, the returned\
    \ list\nincludes all policy assignments that apply to the resource group, which\
    \ is everything in the\nunfiltered list except those applied to resources contained\
    \ within the resource group. If\n$filter=policyDefinitionId eq '{value}' is provided,\
    \ the returned list includes all policy\nassignments of the policy definition\
    \ whose id is {value} that apply to the resource group.\n\n      param resource_group_name:\n\
    \         The name of the resource group that contains policy assignments.\n\n\
    \      type resource_group_name:\n         str\n\n      param filter:\n      \
    \   The filter to apply on the operation. Valid values for $filter are: 'atScope()'\n\
    \n   or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering\
    \ is performed.\n      type filter:\n         str\n\n      keyword callable cls:\n\
    \         A custom type or function that will be passed the direct response\n\n\
    \      return:\n         An iterator like instance of either PolicyAssignmentListResult\
    \ or the result of cls(response)\n\n      rtype:\n         ~azure.core.paging.ItemPaged[~azure.mgmt.resource.policy.v2019_01_01.models.PolicyAssignmentListResult]\n\
    \n      raises:\n         ~azure.core.exceptions.HttpResponseError"
  signature: list_for_resource_group(resource_group_name, filter=None, **kwargs)
  parameters:
  - name: resource_group_name
    isRequired: true
  - name: filter
    defaultValue: None
attributes:
- uid: azure.mgmt.resource.policy.v2019_01_01.operations.PolicyAssignmentsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.resource.policy.v2019_01_01.models' from
    'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\mgmt\\resource\\policy\\v2019_01_01\\models\\__init__.py'>
