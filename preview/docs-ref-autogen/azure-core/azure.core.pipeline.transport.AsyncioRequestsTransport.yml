### YamlMime:PythonClass
uid: azure.core.pipeline.transport.AsyncioRequestsTransport
name: AsyncioRequestsTransport
fullName: azure.core.pipeline.transport.AsyncioRequestsTransport
module: azure.core.pipeline.transport
inheritances:
- azure.core.pipeline.transport._base_requests_async.RequestsAsyncTransportBase
summary: 'Identical implementation as the synchronous RequestsTransport wrapped in
  a class with

  asynchronous methods. Uses the built-in asyncio event loop.'
constructor:
  syntax: AsyncioRequestsTransport(**kwargs)
examples:
- "Asynchronous transport with asyncio.<!--[!code-python[Main](les\\test_example_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\59\\\\azure-core-1.14.0b1\\\
  \\samples\\\\test_example_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   from azure.core.pipeline.transport import AsyncioRequestsTransport\n\
  \n   async with AsyncPipeline(AsyncioRequestsTransport(), policies=policies) as\
  \ pipeline:\n       response = await pipeline.run(request)\n\n   ````\n"
methods:
- uid: azure.core.pipeline.transport.AsyncioRequestsTransport.send
  name: send
  summary: Send the request using this HTTP sender.
  signature: 'send(request: azure.core.pipeline.transport._base.HttpRequest, **kwargs:
    typing.Any) -> azure.core.pipeline.transport._base_async.AsyncHttpResponse'
  parameters:
  - name: request
    description: The HttpRequest
    isRequired: true
    types:
    - <xref:azure.core.pipeline.transport.HttpRequest>
  return:
    description: The AsyncHttpResponse
    types:
    - <xref:azure.core.pipeline.transport.AsyncHttpResponse>
- uid: azure.core.pipeline.transport.AsyncioRequestsTransport.sleep
  name: sleep
  signature: sleep(duration)
  parameters:
  - name: duration
    isRequired: true
