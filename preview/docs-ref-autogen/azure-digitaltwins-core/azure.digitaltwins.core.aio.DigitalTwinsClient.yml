### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.digitaltwins.core.aio.DigitalTwinsClient.close
  - azure.digitaltwins.core.aio.DigitalTwinsClient.create_models
  - azure.digitaltwins.core.aio.DigitalTwinsClient.decommission_model
  - azure.digitaltwins.core.aio.DigitalTwinsClient.delete_digital_twin
  - azure.digitaltwins.core.aio.DigitalTwinsClient.delete_event_route
  - azure.digitaltwins.core.aio.DigitalTwinsClient.delete_model
  - azure.digitaltwins.core.aio.DigitalTwinsClient.delete_relationship
  - azure.digitaltwins.core.aio.DigitalTwinsClient.get_component
  - azure.digitaltwins.core.aio.DigitalTwinsClient.get_digital_twin
  - azure.digitaltwins.core.aio.DigitalTwinsClient.get_event_route
  - azure.digitaltwins.core.aio.DigitalTwinsClient.get_model
  - azure.digitaltwins.core.aio.DigitalTwinsClient.get_relationship
  - azure.digitaltwins.core.aio.DigitalTwinsClient.list_event_routes
  - azure.digitaltwins.core.aio.DigitalTwinsClient.list_incoming_relationships
  - azure.digitaltwins.core.aio.DigitalTwinsClient.list_models
  - azure.digitaltwins.core.aio.DigitalTwinsClient.list_relationships
  - azure.digitaltwins.core.aio.DigitalTwinsClient.publish_component_telemetry
  - azure.digitaltwins.core.aio.DigitalTwinsClient.publish_telemetry
  - azure.digitaltwins.core.aio.DigitalTwinsClient.query_twins
  - azure.digitaltwins.core.aio.DigitalTwinsClient.update_component
  - azure.digitaltwins.core.aio.DigitalTwinsClient.update_digital_twin
  - azure.digitaltwins.core.aio.DigitalTwinsClient.update_relationship
  - azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_digital_twin
  - azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_event_route
  - azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_relationship
  class: azure.digitaltwins.core.aio.DigitalTwinsClient
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: DigitalTwinsClient
  summary: Creates an instance of AzureDigitalTwinsAPI.
  syntax:
    content: DigitalTwinsClient(endpoint, credential, **kwargs)
    parameters:
    - description: The URL endpoint of an Azure search service
      id: endpoint
      type:
      - str
    - description: A credential to authenticate requests to the service
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
  type: class
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.close
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: close() -> None
  namewithoutparameters: close
  syntax:
    content: close() -> None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.close
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: One or more of

      the provided models already exist.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.create_models
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: create_models(model_list=None, **kwargs)
  namewithoutparameters: create_models
  summary: Create one or more models. When any error occurs, no models are uploaded.
  syntax:
    content: create_models(model_list=None, **kwargs)
    parameters:
    - description: The set of models to create. Each string corresponds to exactly
        one model.
      id: model_list
      isRequired: true
      type:
      - List[object]
    return:
      description: The list of ModelData
      type:
      - List[azure.digitaltwins.models.ModelData]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.create_models
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: There is no model

      with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.decommission_model
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: decommission_model(model_id, **kwargs)
  namewithoutparameters: decommission_model
  summary: Decommissions a model.
  syntax:
    content: decommission_model(model_id, **kwargs)
    parameters:
    - description: The id for the model. The id is globally unique and case sensitive.
      id: model_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.decommission_model
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*:

      If the request is invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*:

      If there is no digital twin with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_digital_twin
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: delete_digital_twin(digital_twin_id, **kwargs)
  namewithoutparameters: delete_digital_twin
  summary: Delete a digital twin.
  syntax:
    content: delete_digital_twin(digital_twin_id, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: 'Only perform the operation if the entity''s etag matches one of

        the etags provided or * is provided.'
      id: etag
      isRequired: true
      type:
      - str
    - description: the match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_digital_twin
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: There is no

      event route with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_event_route
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: delete_event_route(event_route_id, **kwargs)
  namewithoutparameters: delete_event_route
  summary: Delete an event route.
  syntax:
    content: delete_event_route(event_route_id, **kwargs)
    parameters:
    - description: The Id of the event route to delete.
      id: event_route_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_event_route
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: There is no model

      with the provided id.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceExistsError*: There are dependencies

      on the model that prevent it from being deleted.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_model
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: delete_model(model_id, **kwargs)
  namewithoutparameters: delete_model
  summary: Decommission a model using a json patch.
  syntax:
    content: delete_model(model_id, **kwargs)
    parameters:
    - description: The Id of the model to decommission.
      id: model_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_model
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is either
      no

      digital twin or relationship with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_relationship
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: delete_relationship(digital_twin_id, relationship_id, **kwargs)
  namewithoutparameters: delete_relationship
  summary: Delete a digital twin.
  syntax:
    content: delete_relationship(digital_twin_id, relationship_id, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The Id of the relationship to delete.
      id: relationship_id
      isRequired: true
      type:
      - str
    - description: 'Only perform the operation if the entity''s etag matches one of

        the etags provided or * is provided.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_relationship
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is either
      no

      digital twin with the provided id or the component path is invalid.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_component
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: get_component(digital_twin_id, component_path, **kwargs)
  namewithoutparameters: get_component
  summary: Get a component on a digital twin.
  syntax:
    content: get_component(digital_twin_id, component_path, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The component being retrieved.
      id: component_path
      isRequired: true
      type:
      - str
    return:
      description: Dictionary containing the component.
      type:
      - Dict[str, object]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_component
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*:

      If the digital twin doesn''t exist.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_digital_twin
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: get_digital_twin(digital_twin_id, **kwargs)
  namewithoutparameters: get_digital_twin
  summary: Get a digital twin.
  syntax:
    content: get_digital_twin(digital_twin_id, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    return:
      description: Dictionary containing the twin.
      type:
      - Dict[str, object]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_digital_twin
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: There is no

      event route with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_event_route
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: get_event_route(event_route_id, **kwargs)
  namewithoutparameters: get_event_route
  summary: Get an event route.
  syntax:
    content: get_event_route(event_route_id, **kwargs)
    parameters:
    - description: The Id of the event route.
      id: event_route_id
      isRequired: true
      type:
      - str
    return:
      description: The EventRoute object.
      type:
      - azure.digitaltwins.models.EventRoute
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_event_route
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is no

      model with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_model
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: get_model(model_id, **kwargs)
  namewithoutparameters: get_model
  summary: Get a model, including the model metadata and the model definition.
  syntax:
    content: get_model(model_id, **kwargs)
    parameters:
    - description: The Id of the model.
      id: model_id
      isRequired: true
      type:
      - str
    - description: 'When true the model definition

        will be returned as part of the result.'
      id: include_model_definition
      isRequired: true
      type:
      - bool
    return:
      description: The ModelDate object.
      type:
      - azure.digitaltwins.models.ModelData
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_model
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is either
      no

      digital twin or relationship with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_relationship
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: get_relationship(digital_twin_id, relationship_id, **kwargs)
  namewithoutparameters: get_relationship
  summary: Get a relationship on a digital twin.
  syntax:
    content: get_relationship(digital_twin_id, relationship_id, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The Id of the relationship to retrieve.
      id: relationship_id
      isRequired: true
      type:
      - str
    return:
      description: Dictionary containing the relationship.
      type:
      - Dict[str, object]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_relationship
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: The request is invalid.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_event_routes
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: list_event_routes(**kwargs)
  namewithoutparameters: list_event_routes
  summary: Retrieves all event routes.
  syntax:
    content: list_event_routes(**kwargs)
    parameters:
    - description: 'The maximum number of items to retrieve per request.

        The server may choose to return less than the requested max.'
      id: results_per_page
      isRequired: true
      type:
      - int
    return:
      description: An iterator instance of list of EventRoute.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.EventRoute]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_event_routes
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is no

      digital twin with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_incoming_relationships
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: list_incoming_relationships(digital_twin_id, **kwargs)
  namewithoutparameters: list_incoming_relationships
  summary: Retrieve all incoming relationships for a digital twin.
  syntax:
    content: list_incoming_relationships(digital_twin_id, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    return:
      description: An iterator like instance of either Relationship.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.IncomingRelationship]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_incoming_relationships
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_models
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: list_models(dependencies_for, **kwargs)
  namewithoutparameters: list_models
  summary: Get the list of models.
  syntax:
    content: list_models(dependencies_for, **kwargs)
    parameters:
    - description: 'The model Ids to have dependencies retrieved.

        If omitted, all models are retrieved.'
      id: dependencies_for
      isRequired: true
      type:
      - List[str]
    - description: 'When true the model definition

        will be returned as part of the result.'
      id: include_model_definition
      isRequired: true
      type:
      - bool
    - description: 'The maximum number of items to retrieve per request.

        The server may choose to return less than the requested max.'
      id: results_per_page
      isRequired: true
      type:
      - int
    return:
      description: An iterator instance of list of ModelData.
      type:
      - azure.core.paging.AsyncItemPaged[azure.digitaltwins.models.ModelData]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_models
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is no

      digital twin with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_relationships
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: list_relationships(digital_twin_id, relationship_id=None, **kwargs)
  namewithoutparameters: list_relationships
  summary: Retrieve relationships for a digital twin.
  syntax:
    content: list_relationships(digital_twin_id, relationship_id=None, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: 'The Id of the relationship to

        get (if None all the relationship will be retrieved).'
      id: relationship_id
      isRequired: true
      type:
      - str
    return:
      description: An iterator instance of list of Relationship
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.Relationship]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_relationships
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is no

      digital twin with the provided id or the component path is invalid.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_component_telemetry
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: publish_component_telemetry(digital_twin_id, component_path, payload, message_id=None,
    **kwargs)
  namewithoutparameters: publish_component_telemetry
  summary: "Publish telemetry from a digital twin's component, which is then consumed\
    \ by\n   one or many destination endpoints (subscribers) defined under."
  syntax:
    content: publish_component_telemetry(digital_twin_id, component_path, payload,
      message_id=None, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The name of the DTDL component.
      id: component_path
      isRequired: true
      type:
      - str
    - description: The telemetry payload to be sent.
      id: payload
      isRequired: true
      type:
      - object
    - description: The message Id.
      id: message_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_component_telemetry
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is no

      digital twin with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_telemetry
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: publish_telemetry(digital_twin_id, payload, message_id=None, **kwargs)
  namewithoutparameters: publish_telemetry
  summary: "Publish telemetry from a digital twin, which is then consumed by\n   one\
    \ or many destination endpoints (subscribers) defined under."
  syntax:
    content: publish_telemetry(digital_twin_id, payload, message_id=None, **kwargs)
    parameters:
    - description: The Id of the digital twin
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The telemetry payload to be sent
      id: payload
      isRequired: true
      type:
      - object
    - description: The message Id
      id: message_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_telemetry
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.query_twins
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: query_twins(query_expression, **kwargs)
  namewithoutparameters: query_twins
  summary: Query for digital twins.
  syntax:
    content: query_twins(query_expression, **kwargs)
    parameters:
    - description: The query expression to execute.
      id: query_expression
      isRequired: true
      type:
      - str
    return:
      description: The QueryResult object.
      type:
      - azure.core.async_paging.AsyncItemPaged[Dict[str, object]]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.query_twins
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is either
      no

      digital twin with the provided id or the component path is invalid.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.update_component
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: update_component(digital_twin_id, component_path, json_patch, **kwargs)
  namewithoutparameters: update_component
  summary: Update properties of a component on a digital twin using a JSON patch.
  syntax:
    content: update_component(digital_twin_id, component_path, json_patch, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The component being updated.
      id: component_path
      isRequired: true
      type:
      - str
    - description: An update specification described by JSON Patch.
      id: object] json_patch
      isRequired: true
      type:
      - Dict[str,
    - description: 'Only perform the operation if the entity''s etag matches one of

        the etags provided or * is provided.'
      id: etag
      isRequired: true
      type:
      - str
    - description: the match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.update_component
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*:

      If the request is invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*:

      If there is no digital twin with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.update_digital_twin
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: update_digital_twin(digital_twin_id, json_patch, **kwargs)
  namewithoutparameters: update_digital_twin
  summary: Update a digital twin using a json patch.
  syntax:
    content: update_digital_twin(digital_twin_id, json_patch, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: 'An update specification described by JSON Patch.

        Updates to property values and $model elements may happen in the same request.

        Operations are limited to add, replace and remove.'
      id: object] json_patch
      isRequired: true
      type:
      - Dict[str,
    - description: 'Only perform the operation if the entity''s etag matches one of

        the etags provided or * is provided.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.update_digital_twin
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is either
      no

      digital twin or relationship with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.update_relationship
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: update_relationship(digital_twin_id, relationship_id, json_patch=None, **kwargs)
  namewithoutparameters: update_relationship
  summary: Updates the properties of a relationship on a digital twin using a JSON
    patch.
  syntax:
    content: update_relationship(digital_twin_id, relationship_id, json_patch=None,
      **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The Id of the relationship to retrieve.
      id: relationship_id
      isRequired: true
      type:
      - str
    - description: 'JSON Patch description of the update

        to the relationship properties.'
      id: object] json_patch
      isRequired: true
      type:
      - Dict[str,
    - description: 'Only perform the operation if the entity''s etag matches one of

        the etags provided or * is provided.'
      id: etag
      isRequired: true
      type:
      - str
    - description: the match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.update_relationship
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*:

      If the request is invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceExistsError*:

      If the digital twin is already exist.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_digital_twin
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: upsert_digital_twin(digital_twin_id, digital_twin, **kwargs)
  namewithoutparameters: upsert_digital_twin
  summary: Create or update a digital twin.
  syntax:
    content: upsert_digital_twin(digital_twin_id, digital_twin, **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: Dictionary containing the twin to create or update.
      id: object] digital_twin
      isRequired: true
      type:
      - Dict[str,
    return:
      description: Dictionary containing the created or updated twin.
      type:
      - Dict[str, object]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_digital_twin
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: The request is invalid.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_event_route
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: upsert_event_route(event_route_id, event_route, **kwargs)
  namewithoutparameters: upsert_event_route
  summary: Create or update an event route.
  syntax:
    content: upsert_event_route(event_route_id, event_route, **kwargs)
    parameters:
    - description: The Id of the event route to create or update.
      id: event_route_id
      isRequired: true
      type:
      - str
    - description: The event route data.
      id: event_route
      isRequired: true
      type:
      - azure.digitaltwins.models.EventRoute
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_event_route
- class: azure.digitaltwins.core.aio.DigitalTwinsClient
  exceptions:
  - description: '*~azure.core.exceptions.HttpResponseError*'
    type: :class
  - description: '*~azure.core.exceptions.ServiceRequestError*: If the request is
      invalid.'
    type: :class
  - description: '*~azure.core.exceptions.ResourceNotFoundError*: If there is either
      no

      digital twin, target digital twin or relationship with the provided id.'
    type: :class
  fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_relationship
  langs:
  - python
  module: azure.digitaltwins.core.aio
  name: upsert_relationship(digital_twin_id, relationship_id, relationship=None, **kwargs)
  namewithoutparameters: upsert_relationship
  summary: Create or update a relationship on a digital twin.
  syntax:
    content: upsert_relationship(digital_twin_id, relationship_id, relationship=None,
      **kwargs)
    parameters:
    - description: The Id of the digital twin.
      id: digital_twin_id
      isRequired: true
      type:
      - str
    - description: The Id of the relationship to retrieve.
      id: relationship_id
      isRequired: true
      type:
      - str
    - description: Dictionary containing the relationship.
      id: object] relationship
      isRequired: true
      type:
      - Dict[str,
    return:
      description: The created or updated relationship.
      type:
      - Dict[str, object]
  type: method
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_relationship
references:
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.close
  isExternal: false
  name: close() -> None
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.close
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.create_models
  isExternal: false
  name: create_models(model_list=None, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.create_models
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.decommission_model
  isExternal: false
  name: decommission_model(model_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.decommission_model
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_digital_twin
  isExternal: false
  name: delete_digital_twin(digital_twin_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_digital_twin
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_event_route
  isExternal: false
  name: delete_event_route(event_route_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_event_route
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_model
  isExternal: false
  name: delete_model(model_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_model
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_relationship
  isExternal: false
  name: delete_relationship(digital_twin_id, relationship_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.delete_relationship
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_component
  isExternal: false
  name: get_component(digital_twin_id, component_path, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_component
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_digital_twin
  isExternal: false
  name: get_digital_twin(digital_twin_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_digital_twin
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_event_route
  isExternal: false
  name: get_event_route(event_route_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_event_route
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_model
  isExternal: false
  name: get_model(model_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_model
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.get_relationship
  isExternal: false
  name: get_relationship(digital_twin_id, relationship_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.get_relationship
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_event_routes
  isExternal: false
  name: list_event_routes(**kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_event_routes
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_incoming_relationships
  isExternal: false
  name: list_incoming_relationships(digital_twin_id, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_incoming_relationships
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_models
  isExternal: false
  name: list_models(dependencies_for, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_models
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.list_relationships
  isExternal: false
  name: list_relationships(digital_twin_id, relationship_id=None, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.list_relationships
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_component_telemetry
  isExternal: false
  name: publish_component_telemetry(digital_twin_id, component_path, payload, message_id=None,
    **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_component_telemetry
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_telemetry
  isExternal: false
  name: publish_telemetry(digital_twin_id, payload, message_id=None, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.publish_telemetry
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.query_twins
  isExternal: false
  name: query_twins(query_expression, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.query_twins
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.update_component
  isExternal: false
  name: update_component(digital_twin_id, component_path, json_patch, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.update_component
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.update_digital_twin
  isExternal: false
  name: update_digital_twin(digital_twin_id, json_patch, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.update_digital_twin
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.update_relationship
  isExternal: false
  name: update_relationship(digital_twin_id, relationship_id, json_patch=None, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.update_relationship
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_digital_twin
  isExternal: false
  name: upsert_digital_twin(digital_twin_id, digital_twin, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_digital_twin
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_event_route
  isExternal: false
  name: upsert_event_route(event_route_id, event_route, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_event_route
- fullName: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_relationship
  isExternal: false
  name: upsert_relationship(digital_twin_id, relationship_id, relationship=None, **kwargs)
  parent: azure.digitaltwins.core.aio.DigitalTwinsClient
  uid: azure.digitaltwins.core.aio.DigitalTwinsClient.upsert_relationship
- fullName: List[object]
  name: List[object]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: List[object]
- fullName: List[azure.digitaltwins.models.ModelData]
  name: List[ModelData]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: azure.digitaltwins.models.ModelData
    name: ModelData
    uid: azure.digitaltwins.models.ModelData
  - fullName: ']'
    name: ']'
  uid: List[azure.digitaltwins.models.ModelData]
- fullName: Dict[str, object]
  name: Dict[str, object]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: Dict[str, object]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.EventRoute]
  name: AsyncItemPaged[EventRoute]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.digitaltwins.models.EventRoute
    name: EventRoute
    uid: azure.digitaltwins.models.EventRoute
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.EventRoute]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.IncomingRelationship]
  name: AsyncItemPaged[IncomingRelationship]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.digitaltwins.models.IncomingRelationship
    name: IncomingRelationship
    uid: azure.digitaltwins.models.IncomingRelationship
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.IncomingRelationship]
- fullName: List[str]
  name: List[str]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: List[str]
- fullName: azure.core.paging.AsyncItemPaged[azure.digitaltwins.models.ModelData]
  name: AsyncItemPaged[ModelData]
  spec.python:
  - fullName: azure.core.paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.digitaltwins.models.ModelData
    name: ModelData
    uid: azure.digitaltwins.models.ModelData
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.AsyncItemPaged[azure.digitaltwins.models.ModelData]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.Relationship]
  name: AsyncItemPaged[Relationship]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.digitaltwins.models.Relationship
    name: Relationship
    uid: azure.digitaltwins.models.Relationship
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.digitaltwins.models.Relationship]
- fullName: azure.core.async_paging.AsyncItemPaged[Dict[str, object]]
  name: AsyncItemPaged[Dict[str, object]]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[Dict[str, object]]
- fullName: Dict[str,
  name: Dict[str,
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str,
    name: str,
    uid: str,
  uid: Dict[str,
