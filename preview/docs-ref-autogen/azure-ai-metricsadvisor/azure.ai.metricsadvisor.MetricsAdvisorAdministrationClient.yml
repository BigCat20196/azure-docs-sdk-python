### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.close
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_anomaly_alert_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_data_feed
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_hook
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_metric_anomaly_detection_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_anomaly_alert_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_data_feed
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_hook
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_metric_anomaly_detection_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_anomaly_alert_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed_ingestion_progress
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_hook
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_metric_anomaly_detection_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_anomaly_alert_configurations
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feed_ingestion_status
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feeds
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_hooks
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_metric_anomaly_detection_configurations
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.refresh_data_feed_ingestion
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_anomaly_alert_configuration
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_data_feed
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_hook
  - azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_metric_anomaly_detection_configuration
  class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Authenticate MetricsAdvisorAdministrationClient with a MetricsAdvisorKeyCredential<!--[!code-python[Main](les\\\
    sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\
    \\sample_authentication.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   ````\n"
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: MetricsAdvisorAdministrationClient
  summary: MetricsAdvisorAdministrationClient is used to create and manage data feeds.
  syntax:
    content: MetricsAdvisorAdministrationClient(endpoint, credential, **kwargs)
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and hostname,

        for example: [https://](https://)`<resource-name>`.cognitiveservices.azure.com).'
      id: endpoint
      type:
      - str
    - description: 'An instance of ~azure.ai.metricsadvisor.MetricsAdvisorKeyCredential.

        Requires both subscription key and API key.'
      id: credential
      type:
      - azure.ai.metricsadvisor.MetricsAdvisorKeyCredential
  type: class
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.close
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: close()
  namewithoutparameters: close
  summary: Close the <xref:azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient>
    session.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.close
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Create an anomaly alert configuration<!--[!code-python[Main](les\\sample_anomaly_alert_configuration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_anomaly_alert_configuration.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n   from\
    \ azure.ai.metricsadvisor.models import (\n       MetricAlertConfiguration,\n\
    \       MetricAnomalyAlertScope,\n       TopNGroupScope,\n       MetricAnomalyAlertConditions,\n\
    \       SeverityCondition,\n       MetricBoundaryCondition,\n       MetricAnomalyAlertSnoozeCondition\n\
    \   )\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   anomaly_detection_configuration_id = os.getenv(\"\
    METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n   hook_id = os.getenv(\"METRICS_ADVISOR_HOOK_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   alert_config = client.create_anomaly_alert_configuration(\n       name=\"\
    my alert config\",\n       description=\"alert config description\",\n       cross_metrics_operator=\"\
    AND\",\n       metric_alert_configurations=[\n           MetricAlertConfiguration(\n\
    \               detection_configuration_id=anomaly_detection_configuration_id,\n\
    \               alert_scope=MetricAnomalyAlertScope(\n                   scope_type=\"\
    WholeSeries\"\n               ),\n               alert_conditions=MetricAnomalyAlertConditions(\n\
    \                   severity_condition=SeverityCondition(\n                  \
    \     min_alert_severity=\"Low\",\n                       max_alert_severity=\"\
    High\"\n                   )\n               )\n           ),\n           MetricAlertConfiguration(\n\
    \               detection_configuration_id=anomaly_detection_configuration_id,\n\
    \               alert_scope=MetricAnomalyAlertScope(\n                   scope_type=\"\
    TopN\",\n                   top_n_group_in_scope=TopNGroupScope(\n           \
    \            top=10,\n                       period=5,\n                     \
    \  min_top_count=5\n                   )\n               ),\n               alert_conditions=MetricAnomalyAlertConditions(\n\
    \                   metric_boundary_condition=MetricBoundaryCondition(\n     \
    \                  direction=\"Up\",\n                       upper=50\n      \
    \             )\n               ),\n               alert_snooze_condition=MetricAnomalyAlertSnoozeCondition(\n\
    \                   auto_snooze=2,\n                   snooze_scope=\"Metric\"\
    ,\n                   only_for_successive=True\n               )\n           ),\n\
    \       ],\n       hook_ids=[hook_id]\n   )\n\n   return alert_config\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_anomaly_alert_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: create_anomaly_alert_configuration(name, metric_alert_configurations, hook_ids,
    **kwargs)
  namewithoutparameters: create_anomaly_alert_configuration
  summary: Create an anomaly alert configuration.
  syntax:
    content: create_anomaly_alert_configuration(name, metric_alert_configurations,
      hook_ids, **kwargs)
    parameters:
    - description: Name for the anomaly alert configuration.
      id: name
      isRequired: true
      type:
      - str
    - description: Anomaly alert configurations.
      id: metric_alert_configurations
      isRequired: true
      type:
      - list[azure.ai.metricsadvisor.models.MetricAlertConfiguration]
    - description: Unique hook IDs.
      id: hook_ids
      isRequired: true
      type:
      - list[str]
    - description: 'Cross metrics operator should be specified when setting up multiple
        metric

        alert configurations. Possible values include: "AND", "OR", "XOR".'
      id: cross_metrics_operator
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.MetricAnomalyAlertConfigurationsOperator
    - description: Anomaly alert configuration description.
      id: description
      isRequired: true
      type:
      - str
    return:
      description: AnomalyAlertConfiguration
      type:
      - azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_anomaly_alert_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Create a data feed<!--[!code-python[Main](les\\sample_data_feeds.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\\
    azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_data_feeds.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n   from azure.ai.metricsadvisor.models\
    \ import (\n       SQLServerDataFeed,\n       DataFeedSchema,\n       Metric,\n\
    \       Dimension,\n       DataFeedOptions,\n       DataFeedRollupSettings,\n\
    \       DataFeedMissingDataPointFillSettings\n   )\n\n   service_endpoint = os.getenv(\"\
    METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"\
    )\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   sql_server_connection_string\
    \ = os.getenv(\"METRICS_ADVISOR_SQL_SERVER_CONNECTION_STRING\")\n   query = os.getenv(\"\
    METRICS_ADVISOR_SQL_SERVER_QUERY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   data_feed = client.create_data_feed(\n       name=\"My data\
    \ feed\",\n       source=SQLServerDataFeed(\n           connection_string=sql_server_connection_string,\n\
    \           query=query,\n       ),\n       granularity=\"Daily\",\n       schema=DataFeedSchema(\n\
    \           metrics=[\n               Metric(name=\"cost\", display_name=\"Cost\"\
    ),\n               Metric(name=\"revenue\", display_name=\"Revenue\")\n      \
    \     ],\n           dimensions=[\n               Dimension(name=\"category\"\
    , display_name=\"Category\"),\n               Dimension(name=\"city\", display_name=\"\
    City\")\n           ],\n           timestamp_column=\"Timestamp\"\n       ),\n\
    \       ingestion_settings=datetime.datetime(2019, 10, 1),\n       options=DataFeedOptions(\n\
    \           data_feed_description=\"cost/revenue data feed\",\n           rollup_settings=DataFeedRollupSettings(\n\
    \               rollup_type=\"AutoRollup\",\n               rollup_method=\"Sum\"\
    ,\n               rollup_identification_value=\"__CUSTOM_SUM__\"\n           ),\n\
    \           missing_data_point_fill_settings=DataFeedMissingDataPointFillSettings(\n\
    \               fill_type=\"SmartFilling\"\n           ),\n           access_mode=\"\
    Private\"\n       )\n   )\n\n   return data_feed\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_data_feed
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: create_data_feed(name, source, granularity, schema, ingestion_settings, **kwargs)
  namewithoutparameters: create_data_feed
  summary: Create a new data feed.
  syntax:
    content: create_data_feed(name, source, granularity, schema, ingestion_settings,
      **kwargs)
    parameters:
    - description: Name for the data feed.
      id: name
      isRequired: true
      type:
      - str
    - description: The source of the data feed
      id: source
      isRequired: true
      type:
      - Union[AzureApplicationInsightsDataFeed, AzureBlobDataFeed, AzureCosmosDBDataFeed,AzureDataExplorerDataFeed,
        AzureDataLakeStorageGen2DataFeed, AzureTableDataFeed, HttpRequestDataFeed,InfluxDBDataFeed,
        MySqlDataFeed, PostgreSqlDataFeed, SQLServerDataFeed, MongoDBDataFeed,ElasticsearchDataFeed]
    - description: Granularity type. If using custom granularity, you must instantiate
        a DataFeedGranularity.
      id: granularity
      isRequired: true
      type:
      - Union[str, azure.ai.metricsadvisor.models.DataFeedGranularityType,azure.ai.metricsadvisor.models.DataFeedGranularity]
    - description: 'Data feed schema. Can be passed as a list of metric names as strings
        or as a DataFeedSchema

        object if additional configuration is needed.'
      id: schema
      isRequired: true
      type:
      - Union[list[str], azure.ai.metricsadvisor.models.DataFeedSchema]
    - description: 'The data feed ingestions settings. Can be passed as a datetime
        to use for the

        ingestion begin time or as a DataFeedIngestionSettings object if additional
        configuration is needed.'
      id: ingestion_settings
      isRequired: true
      type:
      - Union[datetime.datetime, azure.ai.metricsadvisor.models.DataFeedIngestionSettings]
    - description: Data feed options.
      id: options
      isRequired: true
      type:
      - azure.ai.metricsadvisor.models.DataFeedOptions
    return:
      description: DataFeed
      type:
      - azure.ai.metricsadvisor.models.DataFeed
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_data_feed
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Create a hook<!--[!code-python[Main](les\\sample_hooks.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\
    \\samples\\\\sample_hooks.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n   from azure.ai.metricsadvisor.models import\
    \ EmailHook\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n\
    \   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   hook = client.create_hook(\n       name=\"email hook\",\n  \
    \     hook=EmailHook(\n           description=\"my email hook\",\n           emails_to_alert=[\"\
    alertme@alertme.com\"],\n           external_link=\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\"\
    \n       )\n   )\n\n   return hook\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_hook
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: create_hook(name, hook, **kwargs)
  namewithoutparameters: create_hook
  summary: Create a new email or web hook.
  syntax:
    content: create_hook(name, hook, **kwargs)
    parameters:
    - description: The name for the hook.
      id: name
      isRequired: true
      type:
      - str
    - description: An email or web hook
      id: hook
      isRequired: true
      type:
      - Union[azure.ai.metricsadvisor.models.EmailHook, azure.ai.metricsadvisor.models.WebHook]
    return:
      description: EmailHook or WebHook
      type:
      - Union[azure.ai.metricsadvisor.models.Hook, azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_hook
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Create an anomaly detection configuration<!--[!code-python[Main](les\\sample_anomaly_detection_configuration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_anomaly_detection_configuration.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n   from\
    \ azure.ai.metricsadvisor.models import (\n       ChangeThresholdCondition,\n\
    \       HardThresholdCondition,\n       SmartDetectionCondition,\n       SuppressCondition,\n\
    \       MetricDetectionCondition,\n   )\n\n   service_endpoint = os.getenv(\"\
    METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"\
    )\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   metric_id = os.getenv(\"\
    METRICS_ADVISOR_METRIC_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   change_threshold_condition = ChangeThresholdCondition(\n   \
    \    anomaly_detector_direction=\"Both\",\n       change_percentage=20,\n    \
    \   shift_point=10,\n       within_range=True,\n       suppress_condition=SuppressCondition(\n\
    \           min_number=5,\n           min_ratio=2\n       )\n   )\n   hard_threshold_condition\
    \ = HardThresholdCondition(\n       anomaly_detector_direction=\"Up\",\n     \
    \  upper_bound=100,\n       suppress_condition=SuppressCondition(\n          \
    \ min_number=2,\n           min_ratio=2\n       )\n   )\n   smart_detection_condition\
    \ = SmartDetectionCondition(\n       anomaly_detector_direction=\"Up\",\n    \
    \   sensitivity=10,\n       suppress_condition=SuppressCondition(\n          \
    \ min_number=2,\n           min_ratio=2\n       )\n   )\n\n   detection_config\
    \ = client.create_metric_anomaly_detection_configuration(\n       name=\"my_detection_config\"\
    ,\n       metric_id=metric_id,\n       description=\"anomaly detection config\
    \ for metric\",\n       whole_series_detection_condition=MetricDetectionCondition(\n\
    \           cross_conditions_operator=\"OR\",\n           change_threshold_condition=change_threshold_condition,\n\
    \           hard_threshold_condition=hard_threshold_condition,\n           smart_detection_condition=smart_detection_condition\n\
    \       )\n   )\n\n   return detection_config\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_metric_anomaly_detection_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: create_metric_anomaly_detection_configuration(name, metric_id, whole_series_detection_condition,
    **kwargs)
  namewithoutparameters: create_metric_anomaly_detection_configuration
  summary: Create anomaly detection configuration.
  syntax:
    content: create_metric_anomaly_detection_configuration(name, metric_id, whole_series_detection_condition,
      **kwargs)
    parameters:
    - description: The name for the anomaly detection configuration
      id: name
      isRequired: true
      type:
      - str
    - description: Required. metric unique id.
      id: metric_id
      isRequired: true
      type:
      - str
    - description: 'Required.

        Conditions to detect anomalies in all time series of a metric.'
      id: whole_series_detection_condition
      isRequired: true
      type:
      - azure.ai.metricsadvisor.models.MetricDetectionCondition
    - description: anomaly detection configuration description.
      id: description
      isRequired: true
      type:
      - str
    - description: detection configuration for series group.
      id: series_group_detection_conditions
      isRequired: true
      type:
      - list[azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition]
    - description: detection configuration for specific series.
      id: series_detection_conditions
      isRequired: true
      type:
      - list[azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition]
    return:
      description: AnomalyDetectionConfiguration
      type:
      - azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_metric_anomaly_detection_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Delete an anomaly alert configuration by its ID<!--[!code-python[Main](les\\\
    sample_anomaly_alert_configuration.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_alert_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.exceptions import ResourceNotFoundError\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   client.delete_anomaly_alert_configuration(alert_config_id)\n\
    \n   try:\n       client.get_anomaly_alert_configuration(alert_config_id)\n  \
    \ except ResourceNotFoundError:\n       print(\"Alert configuration successfully\
    \ deleted.\")\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_anomaly_alert_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: delete_anomaly_alert_configuration(alert_configuration_id, **kwargs)
  namewithoutparameters: delete_anomaly_alert_configuration
  summary: Delete an anomaly alert configuration by its ID.
  syntax:
    content: delete_anomaly_alert_configuration(alert_configuration_id, **kwargs)
    parameters:
    - description: anomaly alert configuration unique id.
      id: alert_configuration_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_anomaly_alert_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Delete a data feed by its ID<!--[!code-python[Main](les\\sample_data_feeds.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_data_feeds.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.exceptions\
    \ import ResourceNotFoundError\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   client.delete_data_feed(data_feed_id)\n\n   try:\n       client.get_data_feed(data_feed_id)\n\
    \   except ResourceNotFoundError:\n       print(\"Data feed successfully deleted.\"\
    )\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_data_feed
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: delete_data_feed(data_feed_id, **kwargs)
  namewithoutparameters: delete_data_feed
  summary: Delete a data feed by its ID.
  syntax:
    content: delete_data_feed(data_feed_id, **kwargs)
    parameters:
    - description: The data feed unique id.
      id: data_feed_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_data_feed
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Delete a hook by its ID<!--[!code-python[Main](les\\sample_hooks.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\\
    azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_hooks.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.exceptions import\
    \ ResourceNotFoundError\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   client.delete_hook(hook_id)\n\n   try:\n       client.get_hook(hook_id)\n\
    \   except ResourceNotFoundError:\n       print(\"Hook successfully deleted.\"\
    )\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_hook
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: delete_hook(hook_id, **kwargs)
  namewithoutparameters: delete_hook
  summary: Delete a web or email hook by its ID.
  syntax:
    content: delete_hook(hook_id, **kwargs)
    parameters:
    - description: Hook unique ID.
      id: hook_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_hook
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Delete an anomaly detection configuration by its ID<!--[!code-python[Main](les\\\
    sample_anomaly_detection_configuration.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_detection_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.exceptions import ResourceNotFoundError\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   client.delete_metric_anomaly_detection_configuration(detection_config_id)\n\
    \n   try:\n       client.get_metric_anomaly_detection_configuration(detection_config_id)\n\
    \   except ResourceNotFoundError:\n       print(\"Detection configuration successfully\
    \ deleted.\")\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_metric_anomaly_detection_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: delete_metric_anomaly_detection_configuration(detection_configuration_id,
    **kwargs)
  namewithoutparameters: delete_metric_anomaly_detection_configuration
  summary: Delete an anomaly detection configuration by its ID.
  syntax:
    content: delete_metric_anomaly_detection_configuration(detection_configuration_id,
      **kwargs)
    parameters:
    - description: anomaly detection configuration unique id.
      id: detection_configuration_id
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_metric_anomaly_detection_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Get a single anomaly alert configuration by its ID<!--[!code-python[Main](les\\\
    sample_anomaly_alert_configuration.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_alert_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   config = client.get_anomaly_alert_configuration(alert_config_id)\n\
    \n   print(\"Alert config ID: {}\".format(config.id))\n   print(\"Alert config\
    \ name: {}\".format(config.name))\n   print(\"Description: {}\".format(config.description))\n\
    \   print(\"Ids of hooks associated with alert: {}\".format(config.hook_ids))\n\
    \   print(\"Use {} operator for multiple alert conditions\\n\".format(config.cross_metrics_operator))\n\
    \n   print(\"Alert uses detection configuration ID: {}\".format(\n       config.metric_alert_configurations[0].detection_configuration_id\n\
    \   ))\n   print(\"Alert scope type: {}\".format(config.metric_alert_configurations[0].alert_scope.scope_type))\n\
    \   print(\"Alert severity condition: min- {}, max- {}\".format(\n       config.metric_alert_configurations[0].alert_conditions.severity_condition.min_alert_severity,\n\
    \       config.metric_alert_configurations[0].alert_conditions.severity_condition.max_alert_severity,\n\
    \   ))\n   print(\"\\nAlert uses detection configuration ID: {}\".format(\n  \
    \     config.metric_alert_configurations[1].detection_configuration_id\n   ))\n\
    \   print(\"Alert scope type: {}\".format(config.metric_alert_configurations[1].alert_scope.scope_type))\n\
    \   print(\"Top N: {}\".format(config.metric_alert_configurations[1].alert_scope.top_n_group_in_scope.top))\n\
    \   print(\"Point count used to look back: {}\".format(\n       config.metric_alert_configurations[1].alert_scope.top_n_group_in_scope.period\n\
    \   ))\n   print(\"Min top count: {}\".format(\n       config.metric_alert_configurations[1].alert_scope.top_n_group_in_scope.min_top_count\n\
    \   ))\n   print(\"Alert metric boundary condition direction: {}, upper bound:\
    \ {}\".format(\n       config.metric_alert_configurations[1].alert_conditions.metric_boundary_condition.direction,\n\
    \       config.metric_alert_configurations[1].alert_conditions.metric_boundary_condition.upper,\n\
    \   ))\n   print(\"Alert snooze condition, snooze point count: {}\".format(\n\
    \       config.metric_alert_configurations[1].alert_snooze_condition.auto_snooze,\n\
    \   ))\n   print(\"Alert snooze scope: {}\".format(\n       config.metric_alert_configurations[1].alert_snooze_condition.snooze_scope,\n\
    \   ))\n   print(\"Snooze only for successive anomalies?: {}\".format(\n     \
    \  config.metric_alert_configurations[1].alert_snooze_condition.only_for_successive,\n\
    \   ))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_anomaly_alert_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: get_anomaly_alert_configuration(alert_configuration_id, **kwargs)
  namewithoutparameters: get_anomaly_alert_configuration
  summary: Get a single anomaly alert configuration.
  syntax:
    content: get_anomaly_alert_configuration(alert_configuration_id, **kwargs)
    parameters:
    - description: anomaly alert configuration unique id.
      id: alert_configuration_id
      isRequired: true
      type:
      - str
    return:
      description: AnomalyAlertConfiguration
      type:
      - azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_anomaly_alert_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Get a single data feed by its ID<!--[!code-python[Main](les\\sample_data_feeds.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_data_feeds.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n \
    \  service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   data_feed = client.get_data_feed(data_feed_id)\n\n   print(\"\
    ID: {}\".format(data_feed.id))\n   print(\"Data feed name: {}\".format(data_feed.name))\n\
    \   print(\"Created time: {}\".format(data_feed.created_time))\n   print(\"Status:\
    \ {}\".format(data_feed.status))\n   print(\"Source type: {}\".format(data_feed.source.data_source_type))\n\
    \   print(\"Granularity type: {}\".format(data_feed.granularity.granularity_type))\n\
    \   print(\"Data feed metrics: {}\".format([metric.name for metric in data_feed.schema.metrics]))\n\
    \   print(\"Data feed dimensions: {}\".format([dimension.name for dimension in\
    \ data_feed.schema.dimensions]))\n   print(\"Data feed timestamp column: {}\"\
    .format(data_feed.schema.timestamp_column))\n   print(\"Ingestion data starting\
    \ on: {}\".format(data_feed.ingestion_settings.ingestion_begin_time))\n   print(\"\
    Data feed description: {}\".format(data_feed.options.data_feed_description))\n\
    \   print(\"Data feed rollup type: {}\".format(data_feed.options.rollup_settings.rollup_type))\n\
    \   print(\"Data feed rollup method: {}\".format(data_feed.options.rollup_settings.rollup_method))\n\
    \   print(\"Data feed fill setting: {}\".format(data_feed.options.missing_data_point_fill_settings.fill_type))\n\
    \   print(\"Data feed access mode: {}\".format(data_feed.options.access_mode))\n\
    \n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: get_data_feed(data_feed_id, **kwargs)
  namewithoutparameters: get_data_feed
  summary: Get a data feed by its id.
  syntax:
    content: get_data_feed(data_feed_id, **kwargs)
    parameters:
    - description: The data feed unique id.
      id: data_feed_id
      isRequired: true
      type:
      - str
    return:
      description: DataFeed
      type:
      - azure.ai.metricsadvisor.models.DataFeed
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Get the progress of data feed ingestion<!--[!code-python[Main](les\\sample_ingestion.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_ingestion.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   data_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\")\n\n   client\
    \ = MetricsAdvisorAdministrationClient(service_endpoint,\n                   \
    \              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\n   progress\
    \ = client.get_data_feed_ingestion_progress(data_feed_id)\n\n   print(\"Lastest\
    \ active timestamp: {}\".format(progress.latest_active_timestamp))\n   print(\"\
    Latest successful timestamp: {}\".format(progress.latest_success_timestamp))\n\
    \n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed_ingestion_progress
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: get_data_feed_ingestion_progress(data_feed_id, **kwargs)
  namewithoutparameters: get_data_feed_ingestion_progress
  summary: Get last successful data ingestion job timestamp by data feed.
  syntax:
    content: get_data_feed_ingestion_progress(data_feed_id, **kwargs)
    parameters:
    - description: The data feed unique id.
      id: data_feed_id
      isRequired: true
      type:
      - str
    return:
      description: 'DataFeedIngestionProgress, containing *latest_success_timestamp*

        and *latest_active_timestamp*'
      type:
      - azure.ai.metricsadvisor.models.DataFeedIngestionProgress
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed_ingestion_progress
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Get a hook by its ID<!--[!code-python[Main](les\\sample_hooks.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\
    \\samples\\\\sample_hooks.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   hook = client.get_hook(hook_id)\n\n   print(\"Hook name: {}\"\
    .format(hook.name))\n   print(\"Description: {}\".format(hook.description))\n\
    \   print(\"Emails to alert: {}\".format(hook.emails_to_alert))\n   print(\"External\
    \ link: {}\".format(hook.external_link))\n   print(\"Admins: {}\".format(hook.admins))\n\
    \n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_hook
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: get_hook(hook_id, **kwargs)
  namewithoutparameters: get_hook
  summary: Get a web or email hook by its id.
  syntax:
    content: get_hook(hook_id, **kwargs)
    parameters:
    - description: Hook unique ID.
      id: hook_id
      isRequired: true
      type:
      - str
    return:
      description: EmailHook or Webhook
      type:
      - Union[azure.ai.metricsadvisor.models.Hook, azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_hook
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Get a single anomaly detection configuration by its ID<!--[!code-python[Main](les\\\
    sample_anomaly_detection_configuration.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_detection_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   config = client.get_metric_anomaly_detection_configuration(detection_config_id)\n\
    \n   print(\"Detection config name: {}\".format(config.name))\n   print(\"Description:\
    \ {}\".format(config.description))\n   print(\"Metric ID: {}\".format(config.metric_id))\n\
    \n   print(\"\\nDetection conditions specified for configuration...\")\n   print(\"\
    \\nWhole Series Detection Conditions:\\n\")\n   conditions = config.whole_series_detection_condition\n\
    \n   print(\"Use {} operator for multiple detection conditions\".format(conditions.cross_conditions_operator))\n\
    \n   print(\"Smart Detection Condition:\")\n   print(\"- Sensitivity: {}\".format(conditions.smart_detection_condition.sensitivity))\n\
    \   print(\"- Detection direction: {}\".format(conditions.smart_detection_condition.anomaly_detector_direction))\n\
    \   print(\"- Suppress conditions: minimum number: {}; minimum ratio: {}\".format(\n\
    \       conditions.smart_detection_condition.suppress_condition.min_number,\n\
    \       conditions.smart_detection_condition.suppress_condition.min_ratio\n  \
    \ ))\n\n   print(\"Hard Threshold Condition:\")\n   print(\"- Lower bound: {}\"\
    .format(conditions.hard_threshold_condition.lower_bound))\n   print(\"- Upper\
    \ bound: {}\".format(conditions.hard_threshold_condition.upper_bound))\n   print(\"\
    - Detection direction: {}\".format(conditions.smart_detection_condition.anomaly_detector_direction))\n\
    \   print(\"- Suppress conditions: minimum number: {}; minimum ratio: {}\".format(\n\
    \       conditions.smart_detection_condition.suppress_condition.min_number,\n\
    \       conditions.smart_detection_condition.suppress_condition.min_ratio\n  \
    \ ))\n\n   print(\"Change Threshold Condition:\")\n   print(\"- Change percentage:\
    \ {}\".format(conditions.change_threshold_condition.change_percentage))\n   print(\"\
    - Shift point: {}\".format(conditions.change_threshold_condition.shift_point))\n\
    \   print(\"- Detect anomaly if within range: {}\".format(conditions.change_threshold_condition.within_range))\n\
    \   print(\"- Detection direction: {}\".format(conditions.smart_detection_condition.anomaly_detector_direction))\n\
    \   print(\"- Suppress conditions: minimum number: {}; minimum ratio: {}\".format(\n\
    \       conditions.smart_detection_condition.suppress_condition.min_number,\n\
    \       conditions.smart_detection_condition.suppress_condition.min_ratio\n  \
    \ ))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_metric_anomaly_detection_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: get_metric_anomaly_detection_configuration(detection_configuration_id, **kwargs)
  namewithoutparameters: get_metric_anomaly_detection_configuration
  summary: Get a single anomaly detection configuration.
  syntax:
    content: get_metric_anomaly_detection_configuration(detection_configuration_id,
      **kwargs)
    parameters:
    - description: anomaly detection configuration unique id.
      id: detection_configuration_id
      isRequired: true
      type:
      - str
    return:
      description: AnomalyDetectionConfiguration
      type:
      - azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_metric_anomaly_detection_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "List all anomaly alert configurations for specific anomaly detection configuration<!--[!code-python[Main](les\\\
    sample_anomaly_alert_configuration.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_alert_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   anomaly_detection_configuration_id\
    \ = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   configs = client.list_anomaly_alert_configurations(anomaly_detection_configuration_id)\n\
    \   for config in configs:\n       print(\"Alert config name: {}\".format(config.name))\n\
    \       print(\"Alert description: {}\".format(config.description))\n       print(\"\
    Ids of hooks associated with alert: {}\\n\".format(config.hook_ids))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_anomaly_alert_configurations
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: list_anomaly_alert_configurations(detection_configuration_id, **kwargs)
  namewithoutparameters: list_anomaly_alert_configurations
  summary: Query all anomaly alert configurations for specific anomaly detection configuration.
  syntax:
    content: list_anomaly_alert_configurations(detection_configuration_id, **kwargs)
    parameters:
    - description: anomaly detection configuration unique id.
      id: detection_configuration_id
      isRequired: true
      type:
      - str
    return:
      description: Pageable of AnomalyAlertConfiguration
      type:
      - azure.core.paging.ItemPaged[AnomalyAlertConfiguration]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_anomaly_alert_configurations
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "List the data feed ingestion statuses by data feed ID<!--[!code-python[Main](les\\\
    sample_ingestion.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_ingestion.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import datetime\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   data_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   ingestion_status = client.list_data_feed_ingestion_status(\n       data_feed_id,\n\
    \       datetime.datetime(2020, 9, 20),\n       datetime.datetime(2020, 9, 25)\n\
    \   )\n   for status in ingestion_status:\n       print(\"Timestamp: {}\".format(status.timestamp))\n\
    \       print(\"Status: {}\".format(status.status))\n       print(\"Message: {}\\\
    n\".format(status.message))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feed_ingestion_status
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: list_data_feed_ingestion_status(data_feed_id, start_time, end_time, **kwargs)
  namewithoutparameters: list_data_feed_ingestion_status
  summary: Get data ingestion status by data feed.
  syntax:
    content: list_data_feed_ingestion_status(data_feed_id, start_time, end_time, **kwargs)
    parameters:
    - description: The data feed unique id.
      id: data_feed_id
      isRequired: true
      type:
      - str
    - description: Required. the start point of time range to query data ingestion
        status.
      id: start_time
      isRequired: true
      type:
      - datetime.datetime
    - description: Required. the end point of time range to query data ingestion status.
      id: end_time
      isRequired: true
      type:
      - datetime.datetime
    - description: ''
      id: skip
      isRequired: true
      type:
      - int
    return:
      description: Pageable of DataFeedIngestionStatus
      type:
      - azure.core.paging.ItemPaged[azure.ai.metricsadvisor.models.DataFeedIngestionStatus]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feed_ingestion_status
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "List data feeds under an account.<!--[!code-python[Main](les\\sample_data_feeds.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_data_feeds.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n \
    \  service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   data_feeds = client.list_data_feeds()\n\n   for feed in data_feeds:\n\
    \       print(\"Data feed name: {}\".format(feed.name))\n       print(\"ID: {}\"\
    .format(feed.id))\n       print(\"Created time: {}\".format(feed.created_time))\n\
    \       print(\"Status: {}\".format(feed.status))\n       print(\"Source type:\
    \ {}\".format(feed.source.data_source_type))\n       print(\"Granularity type:\
    \ {}\".format(feed.granularity.granularity_type))\n\n       print(\"\\nFeed metrics:\"\
    )\n       for metric in feed.schema.metrics:\n           print(metric.name)\n\n\
    \       print(\"\\nFeed dimensions:\")\n       for dimension in feed.schema.dimensions:\n\
    \           print(dimension.name)\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feeds
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: list_data_feeds(**kwargs)
  namewithoutparameters: list_data_feeds
  summary: List all data feeds.
  syntax:
    content: list_data_feeds(**kwargs)
    parameters:
    - description: filter data feed by its name.
      id: data_feed_name
      isRequired: true
      type:
      - str
    - description: filter data feed by its source type.
      id: data_source_type
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataSourceType
    - description: filter data feed by its granularity.
      id: granularity_type
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataFeedGranularityType
    - description: filter data feed by its status.
      id: status
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataFeedStatus
    - description: filter data feed by its creator.
      id: creator
      isRequired: true
      type:
      - str
    - description: ''
      id: skip
      isRequired: true
      type:
      - int
    return:
      description: Pageable of DataFeed
      type:
      - azure.core.paging.ItemPaged[azure.ai.metricsadvisor.models.DataFeed]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feeds
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "List all of the hooks under the account<!--[!code-python[Main](les\\sample_hooks.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_hooks.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   hooks = client.list_hooks()\n   for hook in hooks:\n       print(\"Hook type:\
    \ {}\".format(hook.hook_type))\n       print(\"Hook name: {}\".format(hook.name))\n\
    \       print(\"Description: {}\\n\".format(hook.description))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_hooks
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: list_hooks(**kwargs)
  namewithoutparameters: list_hooks
  summary: List all hooks.
  syntax:
    content: list_hooks(**kwargs)
    parameters:
    - description: filter hook by its name.
      id: hook_name
      isRequired: true
      type:
      - str
    - description: ''
      id: skip
      isRequired: true
      type:
      - int
    return:
      description: Pageable containing EmailHook and WebHook
      type:
      - azure.core.paging.ItemPaged[Union[azure.ai.metricsadvisor.models.Hook,azure.ai.metricsadvisor.models.EmailHook,
        azure.ai.metricsadvisor.models.WebHook]]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_hooks
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "List all anomaly detection configurations for a specific metric<!--[!code-python[Main](les\\\
    sample_anomaly_detection_configuration.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_detection_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   configs = client.list_metric_anomaly_detection_configurations(metric_id=metric_id)\n\
    \   for config in configs:\n       print(\"Detection config name: {}\".format(config.name))\n\
    \       print(\"Description: {}\".format(config.description))\n       print(\"\
    Metric ID: {}\\n\".format(config.metric_id))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_metric_anomaly_detection_configurations
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: list_metric_anomaly_detection_configurations(metric_id, **kwargs)
  namewithoutparameters: list_metric_anomaly_detection_configurations
  summary: Query all anomaly detection configurations for specific metric.
  syntax:
    content: list_metric_anomaly_detection_configurations(metric_id, **kwargs)
    parameters:
    - description: metric unique id.
      id: metric_id
      isRequired: true
      type:
      - str
    return:
      description: Pageable of AnomalyDetectionConfiguration
      type:
      - azure.core.paging.ItemPaged[AnomalyDetectionConfiguration]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_metric_anomaly_detection_configurations
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Refresh data feed ingestion over a period of time<!--[!code-python[Main](les\\\
    sample_ingestion.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_ingestion.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import datetime\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   data_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   client.refresh_data_feed_ingestion(\n       data_feed_id,\n       datetime.datetime(2020,\
    \ 9, 20),\n       datetime.datetime(2020, 9, 25)\n   )\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.refresh_data_feed_ingestion
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: refresh_data_feed_ingestion(data_feed_id, start_time, end_time, **kwargs)
  namewithoutparameters: refresh_data_feed_ingestion
  summary: Refreshes data ingestion by data feed to backfill data.
  syntax:
    content: refresh_data_feed_ingestion(data_feed_id, start_time, end_time, **kwargs)
    parameters:
    - description: The data feed unique id.
      id: data_feed_id
      isRequired: true
      type:
      - str
    - description: The start point of time range to refresh data ingestion.
      id: start_time
      isRequired: true
      type:
      - datetime.datetime
    - description: The end point of time range to refresh data ingestion.
      id: end_time
      isRequired: true
      type:
      - datetime.datetime
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.refresh_data_feed_ingestion
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Update an existing anomaly alert configuration<!--[!code-python[Main](les\\sample_anomaly_alert_configuration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_anomaly_alert_configuration.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n   from\
    \ azure.ai.metricsadvisor.models import (\n       MetricAlertConfiguration,\n\
    \       MetricAnomalyAlertScope,\n       MetricAnomalyAlertConditions,\n     \
    \  MetricBoundaryCondition\n   )\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   anomaly_detection_configuration_id\
    \ = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   alert_config.name = \"updated config name\"\n   additional_alert\
    \ = MetricAlertConfiguration(\n       detection_configuration_id=anomaly_detection_configuration_id,\n\
    \       alert_scope=MetricAnomalyAlertScope(\n           scope_type=\"SeriesGroup\"\
    ,\n           series_group_in_scope={'city': 'Shenzhen'}\n       ),\n       alert_conditions=MetricAnomalyAlertConditions(\n\
    \           metric_boundary_condition=MetricBoundaryCondition(\n             \
    \  direction=\"Down\",\n               lower=5\n           )\n       )\n   )\n\
    \   alert_config.metric_alert_configurations.append(additional_alert)\n\n   updated\
    \ = client.update_anomaly_alert_configuration(\n       alert_config,\n       cross_metrics_operator=\"\
    OR\",\n       description=\"updated alert config\"\n   )\n\n   print(\"Updated\
    \ alert name: {}\".format(updated.name))\n   print(\"Updated alert description:\
    \ {}\".format(updated.description))\n   print(\"Updated cross metrics operator:\
    \ {}\".format(updated.cross_metrics_operator))\n   print(\"Updated alert condition\
    \ configuration scope type: {}\".format(\n       updated.metric_alert_configurations[2].alert_scope.scope_type\n\
    \   ))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_anomaly_alert_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: update_anomaly_alert_configuration(alert_configuration, **kwargs)
  namewithoutparameters: update_anomaly_alert_configuration
  summary: 'Update anomaly alerting configuration. Either pass the entire AnomalyAlertConfiguration
    object

    with the chosen updates or the ID to your alert configuration with updates passed
    via keyword arguments.

    If you pass both the AnomalyAlertConfiguration object and keyword arguments, the
    keyword arguments

    will take precedence.'
  syntax:
    content: update_anomaly_alert_configuration(alert_configuration, **kwargs)
    parameters:
    - description: AnomalyAlertConfiguration object or the ID to the alert configuration.
      id: alert_configuration
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
    - description: Name for the anomaly alert configuration.
      id: name
      isRequired: true
      type:
      - str
    - description: Anomaly alert configurations.
      id: metric_alert_configurations
      isRequired: true
      type:
      - list[azure.ai.metricsadvisor.models.MetricAlertConfiguration]
    - description: Unique hook IDs.
      id: hook_ids
      isRequired: true
      type:
      - list[str]
    - description: 'Cross metrics operator should be specified when setting up multiple
        metric

        alert configurations. Possible values include: "AND", "OR", "XOR".'
      id: cross_metrics_operator
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.MetricAnomalyAlertConfigurationsOperator
    - description: Anomaly alert configuration description.
      id: description
      isRequired: true
      type:
      - str
    return:
      description: AnomalyAlertConfiguration
      type:
      - azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_anomaly_alert_configuration
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Update an existing data feed<!--[!code-python[Main](les\\sample_data_feeds.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_data_feeds.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n \
    \  service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   # update data feed on the data feed itself or by using available\
    \ keyword arguments\n   data_feed.name = \"updated name\"\n   data_feed.options.data_feed_description\
    \ = \"updated description for data feed\"\n\n   updated_data_feed = client.update_data_feed(\n\
    \       data_feed,\n       access_mode=\"Public\",\n       fill_type=\"CustomValue\"\
    ,\n       custom_fill_value=1\n   )\n\n   print(\"Updated name: {}\".format(updated_data_feed.name))\n\
    \   print(\"Updated description: {}\".format(updated_data_feed.options.data_feed_description))\n\
    \   print(\"Updated access mode: {}\".format(updated_data_feed.options.access_mode))\n\
    \   print(\"Updated fill setting, value: {}, {}\".format(\n       updated_data_feed.options.missing_data_point_fill_settings.fill_type,\n\
    \       updated_data_feed.options.missing_data_point_fill_settings.custom_fill_value,\n\
    \   ))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_data_feed
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: update_data_feed(data_feed, **kwargs)
  namewithoutparameters: update_data_feed
  summary: 'Update a data feed. Either pass the entire DataFeed object with the chosen
    updates

    or the ID to your data feed with updates passed via keyword arguments. If you
    pass both

    the DataFeed object and keyword arguments, the keyword arguments will take precedence.'
  syntax:
    content: update_data_feed(data_feed, **kwargs)
    parameters:
    - description: The data feed with updates or the data feed ID.
      id: data_feed
      isRequired: true
      type:
      - azure.ai.metricsadvisor.models.DataFeed
      - str
    - description: The name to update the data feed.
      id: name
      isRequired: true
      type:
      - str
    - description: User-defined timestamp column name.
      id: timestamp_column
      isRequired: true
      type:
      - str
    - description: Ingestion start time.
      id: ingestion_begin_time
      isRequired: true
      type:
      - datetime.datetime
    - description: 'The max concurrency of data ingestion queries against

        user data source. Zero (0) means no limitation.'
      id: data_source_request_concurrency
      isRequired: true
      type:
      - int
    - description: The min retry interval for failed data ingestion tasks, in seconds.
      id: ingestion_retry_delay
      isRequired: true
      type:
      - int
    - description: 'The time that the beginning of data ingestion task will delay

        for every data slice according to this offset, in seconds.'
      id: ingestion_start_offset
      isRequired: true
      type:
      - int
    - description: 'Stop retry data ingestion after the data slice first

        schedule time in seconds.'
      id: stop_retry_after
      isRequired: true
      type:
      - int
    - description: 'The identification value for the row of calculated

        all-up value.'
      id: rollup_identification_value
      isRequired: true
      type:
      - str
    - description: 'Mark if the data feed needs rollup. Possible values include: "NoRollup",

        "AutoRollup", "AlreadyRollup". Default value: "AutoRollup".'
      id: rollup_type
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataFeedRollupType
    - description: Roll up columns.
      id: auto_rollup_group_by_column_names
      isRequired: true
      type:
      - list[str]
    - description: 'Roll up method. Possible values include: "None", "Sum", "Max",
        "Min",

        "Avg", "Count".'
      id: rollup_method
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataFeedAutoRollupMethod
    - description: 'The type of fill missing point for anomaly detection. Possible

        values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        Default value:

        "SmartFilling".'
      id: fill_type
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataSourceMissingDataPointFillType
    - description: 'The value of fill missing point for anomaly detection

        if "CustomValue" fill type is specified.'
      id: custom_fill_value
      isRequired: true
      type:
      - float
    - description: Data feed administrators.
      id: admins
      isRequired: true
      type:
      - list[str]
    - description: Data feed description.
      id: data_feed_description
      isRequired: true
      type:
      - str
    - description: Data feed viewer.
      id: viewers
      isRequired: true
      type:
      - list[str]
    - description: 'Data feed access mode. Possible values include:

        "Private", "Public". Default value: "Private".'
      id: access_mode
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataFeedAccessMode
    - description: action link for alert.
      id: action_link_template
      isRequired: true
      type:
      - str
    - description: 'Data feed status. Possible values include: "Active", "Paused".'
      id: status
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.DataFeedStatus
    - description: The source of the data feed for update
      id: source
      isRequired: true
      type:
      - Union[AzureApplicationInsightsDataFeed, AzureBlobDataFeed, AzureCosmosDBDataFeed,AzureDataExplorerDataFeed,
        AzureDataLakeStorageGen2DataFeed, AzureTableDataFeed, HttpRequestDataFeed,InfluxDBDataFeed,
        MySqlDataFeed, PostgreSqlDataFeed, SQLServerDataFeed, MongoDBDataFeed,ElasticsearchDataFeed]
    return:
      description: DataFeed
      type:
      - azure.ai.metricsadvisor.models.DataFeed
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_data_feed
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Update an existing hook<!--[!code-python[Main](les\\sample_hooks.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\\
    azure-ai-metricsadvisor-1.0.0b1\\\\samples\\\\sample_hooks.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   hook.name = \"updated hook name\"\n   hook.description = \"updated hook description\"\
    \n\n   updated = client.update_hook(\n       hook,\n       emails_to_alert=[\"\
    newemail@alertme.com\"]\n   )\n   print(\"Updated name: {}\".format(updated.name))\n\
    \   print(\"Updated description: {}\".format(updated.description))\n   print(\"\
    Updated emails: {}\".format(updated.emails_to_alert))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_hook
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: update_hook(hook, **kwargs)
  namewithoutparameters: update_hook
  summary: 'Update a hook. Either pass the entire EmailHook or WebHook object with
    the chosen updates, or the

    ID to your hook configuration with the updates passed via keyword arguments.

    If you pass both the hook object and keyword arguments, the keyword arguments
    will take precedence.'
  syntax:
    content: update_hook(hook, **kwargs)
    parameters:
    - description: An email or web hook or the ID to the hook. If an ID is passed,
        you must pass *hook_type*.
      id: hook
      isRequired: true
      type:
      - Union[str, azure.ai.metricsadvisor.models.EmailHook, azure.ai.metricsadvisor.models.WebHook]
    - description: 'The hook type. Possible values are "Email" or "Web". Must be passed
        if only the

        hook ID is provided.'
      id: hook_type
      isRequired: true
      type:
      - str
    - description: Hook unique name.
      id: name
      isRequired: true
      type:
      - str
    - description: Hook description.
      id: description
      isRequired: true
      type:
      - str
    - description: Hook external link.
      id: external_link
      isRequired: true
      type:
      - str
    - description: 'Email TO: list. Only should be passed to update EmailHook.'
      id: emails_to_alert
      isRequired: true
      type:
      - list[str]
    - description: 'API address, will be called when alert is triggered, only support

        POST method via SSL. Only should be passed to update WebHook.'
      id: endpoint
      isRequired: true
      type:
      - str
    - description: basic authentication. Only should be passed to update WebHook.
      id: username
      isRequired: true
      type:
      - str
    - description: basic authentication. Only should be passed to update WebHook.
      id: password
      isRequired: true
      type:
      - str
    - description: client certificate. Only should be passed to update WebHook.
      id: certificate_key
      isRequired: true
      type:
      - str
    - description: client certificate password. Only should be passed to update WebHook.
      id: certificate_password
      isRequired: true
      type:
      - str
    return:
      description: EmailHook or WebHook
      type:
      - Union[azure.ai.metricsadvisor.models.Hook, azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook]
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_hook
- class: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  example:
  - "Update an existing anomaly detection configuration<!--[!code-python[Main](les\\\
    sample_anomaly_detection_configuration.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\29\\\\azure-ai-metricsadvisor-1.0.0b1\\\\\
    samples\\\\sample_anomaly_detection_configuration.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorAdministrationClient\n   from azure.ai.metricsadvisor.models import\
    \ (\n       MetricSeriesGroupDetectionCondition,\n       MetricSingleSeriesDetectionCondition,\n\
    \       SmartDetectionCondition,\n       SuppressCondition\n   )\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   detection_config.name = \"updated config name\"\n   detection_config.description\
    \ = \"updated with more detection conditions\"\n   smart_detection_condition =\
    \ SmartDetectionCondition(\n       anomaly_detector_direction=\"Up\",\n      \
    \ sensitivity=10,\n       suppress_condition=SuppressCondition(\n           min_number=2,\n\
    \           min_ratio=2\n       )\n   )\n\n   updated = client.update_metric_anomaly_detection_configuration(\n\
    \       detection_config,\n       series_group_detection_conditions=[\n      \
    \     MetricSeriesGroupDetectionCondition(\n               series_group_key={\"\
    city\": \"Seoul\"},\n               smart_detection_condition=smart_detection_condition\n\
    \           )\n       ],\n       series_detection_conditions=[\n           MetricSingleSeriesDetectionCondition(\n\
    \               series_key={\"city\": \"Osaka\", \"category\": \"Cell Phones\"\
    },\n               smart_detection_condition=smart_detection_condition\n     \
    \      )\n       ]\n   )\n   print(\"Updated detection name: {}\".format(updated.name))\n\
    \   print(\"Updated detection description: {}\".format(updated.description))\n\
    \   print(\"Updated detection condition for series group: {}\".format(\n     \
    \  updated.series_group_detection_conditions[0].series_group_key\n   ))\n   print(\"\
    Updated detection condition for series: {}\".format(\n       updated.series_detection_conditions[0].series_key\n\
    \   ))\n\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_metric_anomaly_detection_configuration
  langs:
  - python
  module: azure.ai.metricsadvisor
  name: update_metric_anomaly_detection_configuration(detection_configuration, **kwargs)
  namewithoutparameters: update_metric_anomaly_detection_configuration
  summary: 'Update anomaly metric detection configuration. Either pass the entire
    AnomalyDetectionConfiguration object

    with the chosen updates or the ID to your detection configuration with updates
    passed via keyword arguments.

    If you pass both the AnomalyDetectionConfiguration object and keyword arguments,
    the keyword arguments

    will take precedence.'
  syntax:
    content: update_metric_anomaly_detection_configuration(detection_configuration,
      **kwargs)
    parameters:
    - description: 'AnomalyDetectionConfiguration object or the ID to the detection

        configuration.'
      id: detection_configuration
      isRequired: true
      type:
      - str
      - azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    - description: The name for the anomaly detection configuration
      id: name
      isRequired: true
      type:
      - str
    - description: metric unique id.
      id: metric_id
      isRequired: true
      type:
      - str
    - description: 'Required.

        Conditions to detect anomalies in all time series of a metric.'
      id: whole_series_detection_condition
      isRequired: true
      type:
      - azure.ai.metricsadvisor.models.MetricDetectionCondition
    - description: anomaly detection configuration description.
      id: description
      isRequired: true
      type:
      - str
    - description: detection configuration for series group.
      id: series_group_detection_conditions
      isRequired: true
      type:
      - list[azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition]
    - description: detection configuration for specific series.
      id: series_detection_conditions
      isRequired: true
      type:
      - list[azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition]
    return:
      description: AnomalyDetectionConfiguration
      type:
      - azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  type: method
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_metric_anomaly_detection_configuration
references:
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.close
  isExternal: false
  name: close()
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.close
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_anomaly_alert_configuration
  isExternal: false
  name: create_anomaly_alert_configuration(name, metric_alert_configurations, hook_ids,
    **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_anomaly_alert_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_data_feed
  isExternal: false
  name: create_data_feed(name, source, granularity, schema, ingestion_settings, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_data_feed
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_hook
  isExternal: false
  name: create_hook(name, hook, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_hook
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_metric_anomaly_detection_configuration
  isExternal: false
  name: create_metric_anomaly_detection_configuration(name, metric_id, whole_series_detection_condition,
    **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.create_metric_anomaly_detection_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_anomaly_alert_configuration
  isExternal: false
  name: delete_anomaly_alert_configuration(alert_configuration_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_anomaly_alert_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_data_feed
  isExternal: false
  name: delete_data_feed(data_feed_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_data_feed
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_hook
  isExternal: false
  name: delete_hook(hook_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_hook
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_metric_anomaly_detection_configuration
  isExternal: false
  name: delete_metric_anomaly_detection_configuration(detection_configuration_id,
    **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.delete_metric_anomaly_detection_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_anomaly_alert_configuration
  isExternal: false
  name: get_anomaly_alert_configuration(alert_configuration_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_anomaly_alert_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed
  isExternal: false
  name: get_data_feed(data_feed_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed_ingestion_progress
  isExternal: false
  name: get_data_feed_ingestion_progress(data_feed_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_data_feed_ingestion_progress
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_hook
  isExternal: false
  name: get_hook(hook_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_hook
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_metric_anomaly_detection_configuration
  isExternal: false
  name: get_metric_anomaly_detection_configuration(detection_configuration_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.get_metric_anomaly_detection_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_anomaly_alert_configurations
  isExternal: false
  name: list_anomaly_alert_configurations(detection_configuration_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_anomaly_alert_configurations
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feed_ingestion_status
  isExternal: false
  name: list_data_feed_ingestion_status(data_feed_id, start_time, end_time, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feed_ingestion_status
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feeds
  isExternal: false
  name: list_data_feeds(**kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_data_feeds
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_hooks
  isExternal: false
  name: list_hooks(**kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_hooks
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_metric_anomaly_detection_configurations
  isExternal: false
  name: list_metric_anomaly_detection_configurations(metric_id, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.list_metric_anomaly_detection_configurations
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.refresh_data_feed_ingestion
  isExternal: false
  name: refresh_data_feed_ingestion(data_feed_id, start_time, end_time, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.refresh_data_feed_ingestion
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_anomaly_alert_configuration
  isExternal: false
  name: update_anomaly_alert_configuration(alert_configuration, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_anomaly_alert_configuration
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_data_feed
  isExternal: false
  name: update_data_feed(data_feed, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_data_feed
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_hook
  isExternal: false
  name: update_hook(hook, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_hook
- fullName: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_metric_anomaly_detection_configuration
  isExternal: false
  name: update_metric_anomaly_detection_configuration(detection_configuration, **kwargs)
  parent: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient
  uid: azure.ai.metricsadvisor.MetricsAdvisorAdministrationClient.update_metric_anomaly_detection_configuration
- fullName: list[azure.ai.metricsadvisor.models.MetricAlertConfiguration]
  name: list[MetricAlertConfiguration]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.MetricAlertConfiguration
    name: MetricAlertConfiguration
    uid: azure.ai.metricsadvisor.models.MetricAlertConfiguration
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.metricsadvisor.models.MetricAlertConfiguration]
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: Union[AzureApplicationInsightsDataFeed, AzureBlobDataFeed, AzureCosmosDBDataFeed,AzureDataExplorerDataFeed,
    AzureDataLakeStorageGen2DataFeed, AzureTableDataFeed, HttpRequestDataFeed,InfluxDBDataFeed,
    MySqlDataFeed, PostgreSqlDataFeed, SQLServerDataFeed, MongoDBDataFeed,ElasticsearchDataFeed]
  name: Union[AzureApplicationInsightsDataFeed, AzureBlobDataFeed, AzureCosmosDBDataFeed,AzureDataExplorerDataFeed,
    AzureDataLakeStorageGen2DataFeed, AzureTableDataFeed, HttpRequestDataFeed,InfluxDBDataFeed,
    MySqlDataFeed, PostgreSqlDataFeed, SQLServerDataFeed, MongoDBDataFeed,ElasticsearchDataFeed]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: AzureApplicationInsightsDataFeed
    name: AzureApplicationInsightsDataFeed
    uid: AzureApplicationInsightsDataFeed
  - fullName: ', '
    name: ', '
  - fullName: AzureBlobDataFeed
    name: AzureBlobDataFeed
    uid: AzureBlobDataFeed
  - fullName: ', '
    name: ', '
  - fullName: AzureCosmosDBDataFeed,AzureDataExplorerDataFeed
    name: AzureCosmosDBDataFeed,AzureDataExplorerDataFeed
    uid: AzureCosmosDBDataFeed,AzureDataExplorerDataFeed
  - fullName: ', '
    name: ', '
  - fullName: AzureDataLakeStorageGen2DataFeed
    name: AzureDataLakeStorageGen2DataFeed
    uid: AzureDataLakeStorageGen2DataFeed
  - fullName: ', '
    name: ', '
  - fullName: AzureTableDataFeed
    name: AzureTableDataFeed
    uid: AzureTableDataFeed
  - fullName: ', '
    name: ', '
  - fullName: HttpRequestDataFeed,InfluxDBDataFeed
    name: HttpRequestDataFeed,InfluxDBDataFeed
    uid: HttpRequestDataFeed,InfluxDBDataFeed
  - fullName: ', '
    name: ', '
  - fullName: MySqlDataFeed
    name: MySqlDataFeed
    uid: MySqlDataFeed
  - fullName: ', '
    name: ', '
  - fullName: PostgreSqlDataFeed
    name: PostgreSqlDataFeed
    uid: PostgreSqlDataFeed
  - fullName: ', '
    name: ', '
  - fullName: SQLServerDataFeed
    name: SQLServerDataFeed
    uid: SQLServerDataFeed
  - fullName: ', '
    name: ', '
  - fullName: MongoDBDataFeed,ElasticsearchDataFeed
    name: MongoDBDataFeed,ElasticsearchDataFeed
    uid: MongoDBDataFeed,ElasticsearchDataFeed
  - fullName: ']'
    name: ']'
  uid: Union[AzureApplicationInsightsDataFeed, AzureBlobDataFeed, AzureCosmosDBDataFeed,AzureDataExplorerDataFeed,
    AzureDataLakeStorageGen2DataFeed, AzureTableDataFeed, HttpRequestDataFeed,InfluxDBDataFeed,
    MySqlDataFeed, PostgreSqlDataFeed, SQLServerDataFeed, MongoDBDataFeed,ElasticsearchDataFeed]
- fullName: Union[str, azure.ai.metricsadvisor.models.DataFeedGranularityType,azure.ai.metricsadvisor.models.DataFeedGranularity]
  name: Union[str, DataFeedGranularity]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.DataFeedGranularityType,azure.ai.metricsadvisor.models.DataFeedGranularity
    name: DataFeedGranularity
    uid: azure.ai.metricsadvisor.models.DataFeedGranularityType,azure.ai.metricsadvisor.models.DataFeedGranularity
  - fullName: ']'
    name: ']'
  uid: Union[str, azure.ai.metricsadvisor.models.DataFeedGranularityType,azure.ai.metricsadvisor.models.DataFeedGranularity]
- fullName: Union[list[str], azure.ai.metricsadvisor.models.DataFeedSchema]
  name: Union[list[str], DataFeedSchema]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.DataFeedSchema
    name: DataFeedSchema
    uid: azure.ai.metricsadvisor.models.DataFeedSchema
  - fullName: ']'
    name: ']'
  uid: Union[list[str], azure.ai.metricsadvisor.models.DataFeedSchema]
- fullName: Union[datetime.datetime, azure.ai.metricsadvisor.models.DataFeedIngestionSettings]
  name: Union[datetime, DataFeedIngestionSettings]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: datetime.datetime
    name: datetime
    uid: datetime.datetime
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.DataFeedIngestionSettings
    name: DataFeedIngestionSettings
    uid: azure.ai.metricsadvisor.models.DataFeedIngestionSettings
  - fullName: ']'
    name: ']'
  uid: Union[datetime.datetime, azure.ai.metricsadvisor.models.DataFeedIngestionSettings]
- fullName: Union[azure.ai.metricsadvisor.models.EmailHook, azure.ai.metricsadvisor.models.WebHook]
  name: Union[EmailHook, WebHook]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.EmailHook
    name: EmailHook
    uid: azure.ai.metricsadvisor.models.EmailHook
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.WebHook
    name: WebHook
    uid: azure.ai.metricsadvisor.models.WebHook
  - fullName: ']'
    name: ']'
  uid: Union[azure.ai.metricsadvisor.models.EmailHook, azure.ai.metricsadvisor.models.WebHook]
- fullName: Union[azure.ai.metricsadvisor.models.Hook, azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook]
  name: Union[Hook, WebHook]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.Hook
    name: Hook
    uid: azure.ai.metricsadvisor.models.Hook
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook
    name: WebHook
    uid: azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook
  - fullName: ']'
    name: ']'
  uid: Union[azure.ai.metricsadvisor.models.Hook, azure.ai.metricsadvisor.models.EmailHook,azure.ai.metricsadvisor.models.WebHook]
- fullName: list[azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition]
  name: list[MetricSeriesGroupDetectionCondition]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition
    name: MetricSeriesGroupDetectionCondition
    uid: azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition]
- fullName: list[azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition]
  name: list[MetricSingleSeriesDetectionCondition]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition
    name: MetricSingleSeriesDetectionCondition
    uid: azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition]
- fullName: azure.core.paging.ItemPaged[AnomalyAlertConfiguration]
  name: ItemPaged[AnomalyAlertConfiguration]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: AnomalyAlertConfiguration
    name: AnomalyAlertConfiguration
    uid: AnomalyAlertConfiguration
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[AnomalyAlertConfiguration]
- fullName: azure.core.paging.ItemPaged[azure.ai.metricsadvisor.models.DataFeedIngestionStatus]
  name: ItemPaged[DataFeedIngestionStatus]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.DataFeedIngestionStatus
    name: DataFeedIngestionStatus
    uid: azure.ai.metricsadvisor.models.DataFeedIngestionStatus
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.ai.metricsadvisor.models.DataFeedIngestionStatus]
- fullName: azure.core.paging.ItemPaged[azure.ai.metricsadvisor.models.DataFeed]
  name: ItemPaged[DataFeed]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.DataFeed
    name: DataFeed
    uid: azure.ai.metricsadvisor.models.DataFeed
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.ai.metricsadvisor.models.DataFeed]
- fullName: azure.core.paging.ItemPaged[Union[azure.ai.metricsadvisor.models.Hook,azure.ai.metricsadvisor.models.EmailHook,
    azure.ai.metricsadvisor.models.WebHook]]
  name: ItemPaged[Union[EmailHook, WebHook]]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: azure.ai.metricsadvisor.models.Hook,azure.ai.metricsadvisor.models.EmailHook
    name: EmailHook
    uid: azure.ai.metricsadvisor.models.Hook,azure.ai.metricsadvisor.models.EmailHook
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.WebHook
    name: WebHook
    uid: azure.ai.metricsadvisor.models.WebHook
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[Union[azure.ai.metricsadvisor.models.Hook,azure.ai.metricsadvisor.models.EmailHook,
    azure.ai.metricsadvisor.models.WebHook]]
- fullName: azure.core.paging.ItemPaged[AnomalyDetectionConfiguration]
  name: ItemPaged[AnomalyDetectionConfiguration]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: AnomalyDetectionConfiguration
    name: AnomalyDetectionConfiguration
    uid: AnomalyDetectionConfiguration
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[AnomalyDetectionConfiguration]
- fullName: Union[str, azure.ai.metricsadvisor.models.EmailHook, azure.ai.metricsadvisor.models.WebHook]
  name: Union[str, EmailHook, WebHook]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.EmailHook
    name: EmailHook
    uid: azure.ai.metricsadvisor.models.EmailHook
  - fullName: ', '
    name: ', '
  - fullName: azure.ai.metricsadvisor.models.WebHook
    name: WebHook
    uid: azure.ai.metricsadvisor.models.WebHook
  - fullName: ']'
    name: ']'
  uid: Union[str, azure.ai.metricsadvisor.models.EmailHook, azure.ai.metricsadvisor.models.WebHook]
