### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.data.tables.aio.TableServiceClient.create_table
  - azure.data.tables.aio.TableServiceClient.create_table_if_not_exists
  - azure.data.tables.aio.TableServiceClient.delete_table
  - azure.data.tables.aio.TableServiceClient.from_connection_string
  - azure.data.tables.aio.TableServiceClient.get_service_properties
  - azure.data.tables.aio.TableServiceClient.get_service_stats
  - azure.data.tables.aio.TableServiceClient.get_table_client
  - azure.data.tables.aio.TableServiceClient.list_tables
  - azure.data.tables.aio.TableServiceClient.query_tables
  - azure.data.tables.aio.TableServiceClient.set_service_properties
  class: azure.data.tables.aio.TableServiceClient
  example:
  - "Creating the tableServiceClient with an account url and credential.<!--[!code-python[Main](les\\\
    async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\
    \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.data.tables.aio import\
    \ TableServiceClient\n   async with TableServiceClient.from_connection_string(conn_str=self.connection_string)\
    \ as table_service:\n       properties = await table_service.get_service_properties()\n\
    \       print(\"Shared Key: {}\".format(properties))\n\n   ````\n\nCreating the\
    \ tableServiceClient with Shared Access Signature.<!--[!code-python[Main](les\\\
    async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\
    \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.data.tables.aio import\
    \ TableServiceClient\n\n   # Create a SAS token to use for authentication of a\
    \ client\n   from azure.data.tables import generate_account_sas, ResourceTypes,\
    \ AccountSasPermissions\n   sas_token = generate_account_sas(\n       self.account_name,\n\
    \       self.access_key,\n       resource_types=ResourceTypes(service=True),\n\
    \       permission=AccountSasPermissions(read=True),\n       expiry=datetime.utcnow()\
    \ + timedelta(hours=1)\n   )\n\n   async with TableServiceClient(account_url=self.account_url,\
    \ credential=sas_token) as token_auth_table_service:\n       properties = await\
    \ token_auth_table_service.get_service_properties()\n       print(\"Shared Access\
    \ Signature: {}\".format(properties))\n\n   ````\n"
  fullName: azure.data.tables.aio.TableServiceClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.data.tables.aio._base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.data.tables._base_client.StorageAccountHostsMixin
    type: azure.data.tables._table_service_client_base.TableServiceClientBase
  langs:
  - python
  module: azure.data.tables.aio
  name: TableServiceClient
  summary: 'A client to interact with the Table Service at the account level.


    This client provides operations to retrieve and configure the account properties

    as well as list, create and delete tables within the account.

    For operations relating to a specific queue, a client for this entity

    can be retrieved using the <xref:azure.data.tables.aio.TableServiceClient.get_table_client>
    function.'
  syntax:
    content: TableServiceClient(account_url, credential=None, **kwargs)
    parameters:
    - description: 'The URL to the table service endpoint. Any other entities included

        in the URL path (e.g. queue) will be discarded. This URL can be optionally

        authenticated with a SAS token.'
      id: account_url
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key.'
      id: credential
      type:
      - str
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
  type: class
  uid: azure.data.tables.aio.TableServiceClient
- class: azure.data.tables.aio.TableServiceClient
  example:
  - "Creating a table from TableServiceClient.<!--[!code-python[Main](les\\async_samples\\\
    sample_create_delete_table_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\
    \\async_samples\\\\sample_create_delete_table_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   async with TableServiceClient.from_connection_string(self.connection_string)\
    \ as table_service_client:\n       try:\n           table_item = await table_service_client.create_table(table_name=self.table_name)\n\
    \           print(\"Created table {}!\".format(table_item.table_name))\n     \
    \  except ResourceExistsError:\n           print(\"Table already exists\")\n\n\
    \   ````\n"
  fullName: azure.data.tables.aio.TableServiceClient.create_table
  langs:
  - python
  module: azure.data.tables.aio
  name: create_table(table_name, **kwargs)
  namewithoutparameters: create_table
  summary: Creates a new table under the given account.
  syntax:
    content: create_table(table_name, **kwargs)
    parameters:
    - description: ''
      id: headers
      isRequired: true
    - description: The Table name.
      id: table_name
      isRequired: true
      type:
      - azure.data.tables._models.Table
    return:
      description: TableClient, or the result of cls(response)
      type:
      - azure.data.tables.TableClient
      - None
  type: method
  uid: azure.data.tables.aio.TableServiceClient.create_table
- class: azure.data.tables.aio.TableServiceClient
  example:
  - "Creating a table if it does not already exist<!--[!code-python[Main](les\\async_samples\\\
    sample_create_delete_table_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\
    \\async_samples\\\\sample_create_delete_table_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   async with TableServiceClient.from_connection_string(self.connection_string)\
    \ as table_service_client:\n       table_item = TableServiceClient.create_table_if_not_exists(table_name=self.table_name)\n\
    \       print(\"Table name: {}\".format(table_item.table_name))\n\n   ````\n"
  fullName: azure.data.tables.aio.TableServiceClient.create_table_if_not_exists
  langs:
  - python
  module: azure.data.tables.aio
  name: create_table_if_not_exists(table_name, **kwargs)
  namewithoutparameters: create_table_if_not_exists
  summary: 'Creates a new table if it does not currently exist.

    If the table currently exists, the current table is

    returned.'
  syntax:
    content: create_table_if_not_exists(table_name, **kwargs)
    parameters:
    - description: The Table name.
      id: table_name
      isRequired: true
      type:
      - str
    return:
      description: TableClient
      type:
      - azure.data.tables.aio.TableClient
  type: method
  uid: azure.data.tables.aio.TableServiceClient.create_table_if_not_exists
- class: azure.data.tables.aio.TableServiceClient
  example:
  - "Deleting a table<!--[!code-python[Main](les\\async_samples\\sample_create_delete_table_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\async_samples\\\\sample_create_delete_table_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   async with TableServiceClient.from_connection_string(self.connection_string)\
    \ as table_service_client:\n       try:\n           await table_service_client.delete_table(table_name=self.table_name)\n\
    \           print(\"Deleted table {}!\".format(self.table_name))\n       except\
    \ ResourceNotFoundError:\n           print(\"Table could not be found\")\n\n \
    \  ````\n"
  fullName: azure.data.tables.aio.TableServiceClient.delete_table
  langs:
  - python
  module: azure.data.tables.aio
  name: delete_table(table_name, **kwargs)
  namewithoutparameters: delete_table
  summary: Creates a new table under the given account.
  syntax:
    content: delete_table(table_name, **kwargs)
    parameters:
    - description: The Table name.
      id: table_name
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.aio.TableServiceClient.delete_table
- class: azure.data.tables.aio.TableServiceClient
  example:
  - "Creating the tableServiceClient from a connection string<!--[!code-python[Main](les\\\
    async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\
    \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.data.tables.aio import\
    \ TableServiceClient\n   async with TableServiceClient.from_connection_string(conn_str=self.connection_string)\
    \ as table_service:\n       properties = await table_service.get_service_properties()\n\
    \       print(\"Connection String: {}\".format(properties))\n\n   ````\n"
  fullName: azure.data.tables.aio.TableServiceClient.from_connection_string
  langs:
  - python
  module: azure.data.tables.aio
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create TableServiceClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage or Cosmos account.
      id: conn_str
      isRequired: true
      type:
      - str
    - id: conn_str
      isRequired: true
    return:
      description: A Table service client.
      type:
      - azure.data.tables.TableServiceClient
  type: method
  uid: azure.data.tables.aio.TableServiceClient.from_connection_string
- class: azure.data.tables.aio.TableServiceClient
  fullName: azure.data.tables.aio.TableServiceClient.get_service_properties
  langs:
  - python
  module: azure.data.tables.aio
  name: get_service_properties(**kwargs)
  namewithoutparameters: get_service_properties
  summary: 'Gets the properties of an account''s Table service,

    including properties for Analytics and CORS (Cross-Origin Resource Sharing) rules.'
  syntax:
    content: get_service_properties(**kwargs)
    parameters:
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: TableServiceProperties, or the result of cls(response)
      type:
      - azure.data.tables.models.TableServiceProperties
  type: method
  uid: azure.data.tables.aio.TableServiceClient.get_service_properties
- class: azure.data.tables.aio.TableServiceClient
  fullName: azure.data.tables.aio.TableServiceClient.get_service_stats
  langs:
  - python
  module: azure.data.tables.aio
  name: get_service_stats(**kwargs)
  namewithoutparameters: get_service_stats
  summary: "Retrieves statistics related to replication for the Table service. It\
    \ is only available on the secondary\nlocation endpoint when read-access geo-redundant\
    \ replication is enabled for the account.\n\n   keyword callable cls:\n      A\
    \ custom type or function that will be passed the direct response\n\n   return:\n\
    \      TableServiceStats, or the result of cls(response)\n\n   rtype:\n      ~azure.data.tables.models.TableServiceStats\n\
    \n   raises:\n      ~azure.core.exceptions.HttpResponseError"
  syntax:
    content: get_service_stats(**kwargs)
  type: method
  uid: azure.data.tables.aio.TableServiceClient.get_service_stats
- class: azure.data.tables.aio.TableServiceClient
  fullName: azure.data.tables.aio.TableServiceClient.get_table_client
  langs:
  - python
  module: azure.data.tables.aio
  name: get_table_client(table_name, **kwargs)
  namewithoutparameters: get_table_client
  summary: 'Get a client to interact with the specified table.


    The table need not already exist.'
  syntax:
    content: get_table_client(table_name, **kwargs)
    parameters:
    - description: 'The queue. This can either be the name of the queue,

        or an instance of QueueProperties.'
      id: table
      isRequired: true
      type:
      - str
      - azure.storage.table.TableProperties
    return:
      description: A <xref:azure.data.tables.TableClient> object.
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.aio.TableServiceClient.get_table_client
- class: azure.data.tables.aio.TableServiceClient
  example:
  - "Listing all tables in an account<!--[!code-python[Main](les\\async_samples\\\
    sample_query_tables_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\async_samples\\\
    \\sample_query_tables_async.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n           # List all the tables in the service\n           print(\"\
    Listing tables:\")\n           async for table in table_service.list_tables():\n\
    \               print(\"\\t{}\".format(table.table_name))\n\n   ````\n"
  fullName: azure.data.tables.aio.TableServiceClient.list_tables
  langs:
  - python
  module: azure.data.tables.aio
  name: list_tables(**kwargs)
  namewithoutparameters: list_tables
  summary: Queries tables under the given account.
  syntax:
    content: list_tables(**kwargs)
    parameters:
    - description: Number of tables per page in return ItemPaged
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: Specify desired properties of a table to return certain tables
      id: list(str)] select
      isRequired: true
      type:
      - Union[str,
    return:
      description: AsyncItemPaged
      type:
      - AsyncItemPaged[TableItem]
  type: method
  uid: azure.data.tables.aio.TableServiceClient.list_tables
- class: azure.data.tables.aio.TableServiceClient
  example:
  - "Querying tables in an account given specific parameters<!--[!code-python[Main](les\\\
    async_samples\\sample_query_tables_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\
    \\async_samples\\\\sample_query_tables_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n           # Query for \"table1\" in the tables created\n\
    \           table_name = \"mytable1\"\n           name_filter = \"TableName eq\
    \ '{}'\".format(table_name)\n           print(\"Queried_tables\")\n          \
    \ async for table in table_service.query_tables(filter=name_filter):\n       \
    \        print(\"\\t{}\".format(table.table_name))\n\n   ````\n"
  fullName: azure.data.tables.aio.TableServiceClient.query_tables
  langs:
  - python
  module: azure.data.tables.aio
  name: query_tables(filter, **kwargs)
  namewithoutparameters: query_tables
  summary: 'Queries tables under the given account.

    :param filter: Specify a filter to return certain tables

    :type filter: str

    :keyword int results_per_page: Number of tables per page in return ItemPaged

    :keyword Union[str, list(str)] select: Specify desired properties of a table to
    return certain tables

    :keyword dict parameters: Dictionary for formatting query with additional, user
    defined parameters

    :return: A query of tables

    :rtype: AsyncItemPaged[TableItem]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: query_tables(filter, **kwargs)
  type: method
  uid: azure.data.tables.aio.TableServiceClient.query_tables
- class: azure.data.tables.aio.TableServiceClient
  fullName: azure.data.tables.aio.TableServiceClient.set_service_properties
  langs:
  - python
  module: azure.data.tables.aio
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, **kwargs)
  namewithoutparameters: set_service_properties
  summary: "Sets properties for an account's Table service endpoint,\n   including\
    \ properties for Analytics and CORS (Cross-Origin Resource Sharing) rules."
  syntax:
    content: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, **kwargs)
    parameters:
    - description: Properties for analytics
      id: analytics_logging
      isRequired: true
      type:
      - azure.data.tables.TableAnalyticsLogging
    - description: Hour level metrics
      id: hour_metrics
      isRequired: true
      type:
      - azure.data.tables.Metrics
    - description: Minute level metrics
      id: minute_metrics
      isRequired: true
      type:
      - azure.data.tables.Metrics
    - description: Cross-origin resource sharing rules
      id: cors
      isRequired: true
      type:
      - azure.data.tables.CorsRule
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.aio.TableServiceClient.set_service_properties
references:
- fullName: azure.data.tables.aio.TableServiceClient.create_table
  isExternal: false
  name: create_table(table_name, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.create_table
- fullName: azure.data.tables.aio.TableServiceClient.create_table_if_not_exists
  isExternal: false
  name: create_table_if_not_exists(table_name, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.create_table_if_not_exists
- fullName: azure.data.tables.aio.TableServiceClient.delete_table
  isExternal: false
  name: delete_table(table_name, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.delete_table
- fullName: azure.data.tables.aio.TableServiceClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.from_connection_string
- fullName: azure.data.tables.aio.TableServiceClient.get_service_properties
  isExternal: false
  name: get_service_properties(**kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.get_service_properties
- fullName: azure.data.tables.aio.TableServiceClient.get_service_stats
  isExternal: false
  name: get_service_stats(**kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.get_service_stats
- fullName: azure.data.tables.aio.TableServiceClient.get_table_client
  isExternal: false
  name: get_table_client(table_name, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.get_table_client
- fullName: azure.data.tables.aio.TableServiceClient.list_tables
  isExternal: false
  name: list_tables(**kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.list_tables
- fullName: azure.data.tables.aio.TableServiceClient.query_tables
  isExternal: false
  name: query_tables(filter, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.query_tables
- fullName: azure.data.tables.aio.TableServiceClient.set_service_properties
  isExternal: false
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, **kwargs)
  parent: azure.data.tables.aio.TableServiceClient
  uid: azure.data.tables.aio.TableServiceClient.set_service_properties
- fullName: Union[str,
  name: Union[str,
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str,
    name: str,
    uid: str,
  uid: Union[str,
- fullName: AsyncItemPaged[TableItem]
  name: AsyncItemPaged[TableItem]
  spec.python:
  - fullName: AsyncItemPaged
    name: AsyncItemPaged
    uid: AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: TableItem
    name: TableItem
    uid: TableItem
  - fullName: ']'
    name: ']'
  uid: AsyncItemPaged[TableItem]
