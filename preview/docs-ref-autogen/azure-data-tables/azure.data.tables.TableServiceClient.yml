### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.data.tables.TableServiceClient.create_table
  - azure.data.tables.TableServiceClient.create_table_if_not_exists
  - azure.data.tables.TableServiceClient.delete_table
  - azure.data.tables.TableServiceClient.from_connection_string
  - azure.data.tables.TableServiceClient.get_service_properties
  - azure.data.tables.TableServiceClient.get_service_stats
  - azure.data.tables.TableServiceClient.get_table_client
  - azure.data.tables.TableServiceClient.list_tables
  - azure.data.tables.TableServiceClient.query_tables
  - azure.data.tables.TableServiceClient.set_service_properties
  class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.data.tables._base_client.StorageAccountHostsMixin
    type: azure.data.tables._table_service_client_base.TableServiceClientBase
  langs:
  - python
  module: azure.data.tables
  name: TableServiceClient
  summary: ''
  syntax:
    content: TableServiceClient(account_url, credential=None, **kwargs)
    variables:
    - description: Name of the storage account (Cosmos or Azure)
      id: account_name
      type:
      - str
  type: class
  uid: azure.data.tables.TableServiceClient
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.create_table
  langs:
  - python
  module: azure.data.tables
  name: create_table(table_name, **kwargs)
  namewithoutparameters: create_table
  summary: Creates a new table under the current account.
  syntax:
    content: create_table(table_name, **kwargs)
    parameters:
    - description: The Table name.
      id: table_name
      isRequired: true
      type:
      - str
    return:
      description: TableClient
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.TableServiceClient.create_table
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.create_table_if_not_exists
  langs:
  - python
  module: azure.data.tables
  name: create_table_if_not_exists(table_name, **kwargs)
  namewithoutparameters: create_table_if_not_exists
  summary: 'Creates a new table if it does not currently exist.

    If the table currently exists, the current table is

    returned.'
  syntax:
    content: create_table_if_not_exists(table_name, **kwargs)
    parameters:
    - description: The Table name.
      id: table_name
      isRequired: true
      type:
      - str
    return:
      description: TableClient
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.TableServiceClient.create_table_if_not_exists
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.delete_table
  langs:
  - python
  module: azure.data.tables
  name: delete_table(table_name, **kwargs)
  namewithoutparameters: delete_table
  summary: Deletes the table under the current account
  syntax:
    content: delete_table(table_name, **kwargs)
    parameters:
    - description: The Table name.
      id: table_name
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.TableServiceClient.delete_table
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.from_connection_string
  langs:
  - python
  module: azure.data.tables
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create TableServiceClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage or Cosmos account.
      id: conn_str
      isRequired: true
      type:
      - str
    - id: conn_str
      isRequired: true
    return:
      description: A Table service client.
      type:
      - azure.data.tables.TableServiceClient
  type: method
  uid: azure.data.tables.TableServiceClient.from_connection_string
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.get_service_properties
  langs:
  - python
  module: azure.data.tables
  name: get_service_properties(**kwargs)
  namewithoutparameters: get_service_properties
  summary: 'Gets the properties of an account''s Table service,

    including properties for Analytics and CORS (Cross-Origin Resource Sharing) rules.



    :rtype:dict[str, Any]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: get_service_properties(**kwargs)
    return:
      description: Dictionary of service properties
  type: method
  uid: azure.data.tables.TableServiceClient.get_service_properties
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.get_service_stats
  langs:
  - python
  module: azure.data.tables
  name: get_service_stats(**kwargs)
  namewithoutparameters: get_service_stats
  summary: 'Retrieves statistics related to replication for the Table service. It
    is only available on the secondary

    location endpoint when read-access geo-redundant replication is enabled for the
    account.



    :rtype:dict[str, object]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: get_service_stats(**kwargs)
    return:
      description: Dictionary of Service Stats
  type: method
  uid: azure.data.tables.TableServiceClient.get_service_stats
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.get_table_client
  langs:
  - python
  module: azure.data.tables
  name: get_table_client(table_name, **kwargs)
  namewithoutparameters: get_table_client
  summary: 'Get a client to interact with the specified table.


    The table need not already exist.'
  syntax:
    content: get_table_client(table_name, **kwargs)
    parameters:
    - description: The table name
      id: table_name
      isRequired: true
      type:
      - str
    return:
      description: A <xref:azure.data.tables.TableClient> object.
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.TableServiceClient.get_table_client
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.list_tables
  langs:
  - python
  module: azure.data.tables
  name: list_tables(**kwargs)
  namewithoutparameters: list_tables
  summary: Queries tables under the given account.
  syntax:
    content: list_tables(**kwargs)
    parameters:
    - description: Number of tables per page in return ItemPaged
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: Specify desired properties of a table to return certain tables
      id: list(str)] select
      isRequired: true
      type:
      - Union[str,
    return:
      description: A query of tables
      type:
      - ItemPaged[TableItem]
  type: method
  uid: azure.data.tables.TableServiceClient.list_tables
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.query_tables
  langs:
  - python
  module: azure.data.tables
  name: query_tables(filter, **kwargs)
  namewithoutparameters: query_tables
  summary: 'Queries tables under the given account.

    :param filter: Specify a filter to return certain tables

    :type filter: str

    :keyword int results_per_page: Number of tables per page in return ItemPaged

    :keyword Union[str, list(str)] select: Specify desired properties of a table to
    return certain tables

    :keyword dict parameters: Dictionary for formatting query with additional, user
    defined parameters

    :return: A query of tables

    :rtype: ItemPaged[TableItem]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: query_tables(filter, **kwargs)
  type: method
  uid: azure.data.tables.TableServiceClient.query_tables
- class: azure.data.tables.TableServiceClient
  fullName: azure.data.tables.TableServiceClient.set_service_properties
  langs:
  - python
  module: azure.data.tables
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, **kwargs)
  namewithoutparameters: set_service_properties
  summary: "Sets properties for an account's Table service endpoint,\n   including\
    \ properties for Analytics and CORS (Cross-Origin Resource Sharing) rules."
  syntax:
    content: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, **kwargs)
    parameters:
    - description: Properties for analytics
      id: analytics_logging
      isRequired: true
      type:
      - azure.data.tables.TableAnalyticsLogging
    - description: Hour level metrics
      id: hour_metrics
      isRequired: true
      type:
      - azure.data.tables.Metrics
    - description: Minute level metrics
      id: minute_metrics
      isRequired: true
      type:
      - azure.data.tables.Metrics
    - description: Cross-origin resource sharing rules
      id: cors
      isRequired: true
      type:
      - azure.data.tables.CorsRule
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.TableServiceClient.set_service_properties
references:
- fullName: azure.data.tables.TableServiceClient.create_table
  isExternal: false
  name: create_table(table_name, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.create_table
- fullName: azure.data.tables.TableServiceClient.create_table_if_not_exists
  isExternal: false
  name: create_table_if_not_exists(table_name, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.create_table_if_not_exists
- fullName: azure.data.tables.TableServiceClient.delete_table
  isExternal: false
  name: delete_table(table_name, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.delete_table
- fullName: azure.data.tables.TableServiceClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.from_connection_string
- fullName: azure.data.tables.TableServiceClient.get_service_properties
  isExternal: false
  name: get_service_properties(**kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.get_service_properties
- fullName: azure.data.tables.TableServiceClient.get_service_stats
  isExternal: false
  name: get_service_stats(**kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.get_service_stats
- fullName: azure.data.tables.TableServiceClient.get_table_client
  isExternal: false
  name: get_table_client(table_name, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.get_table_client
- fullName: azure.data.tables.TableServiceClient.list_tables
  isExternal: false
  name: list_tables(**kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.list_tables
- fullName: azure.data.tables.TableServiceClient.query_tables
  isExternal: false
  name: query_tables(filter, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.query_tables
- fullName: azure.data.tables.TableServiceClient.set_service_properties
  isExternal: false
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, **kwargs)
  parent: azure.data.tables.TableServiceClient
  uid: azure.data.tables.TableServiceClient.set_service_properties
- fullName: Union[str,
  name: Union[str,
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str,
    name: str,
    uid: str,
  uid: Union[str,
- fullName: ItemPaged[TableItem]
  name: ItemPaged[TableItem]
  spec.python:
  - fullName: ItemPaged
    name: ItemPaged
    uid: ItemPaged
  - fullName: '['
    name: '['
  - fullName: TableItem
    name: TableItem
    uid: TableItem
  - fullName: ']'
    name: ']'
  uid: ItemPaged[TableItem]
