### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.data.tables.TableClient.create_entity
  - azure.data.tables.TableClient.create_table
  - azure.data.tables.TableClient.delete_entity
  - azure.data.tables.TableClient.delete_table
  - azure.data.tables.TableClient.from_connection_string
  - azure.data.tables.TableClient.from_table_url
  - azure.data.tables.TableClient.get_entity
  - azure.data.tables.TableClient.get_table_access_policy
  - azure.data.tables.TableClient.list_entities
  - azure.data.tables.TableClient.query_entities
  - azure.data.tables.TableClient.set_table_access_policy
  - azure.data.tables.TableClient.update_entity
  - azure.data.tables.TableClient.upsert_entity
  class: azure.data.tables.TableClient
  fullName: azure.data.tables.TableClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.data.tables._base_client.StorageAccountHostsMixin
    type: azure.data.tables._table_client_base.TableClientBase
  langs:
  - python
  module: azure.data.tables
  name: TableClient
  summary: ''
  syntax:
    content: TableClient(account_url, table_name, credential=None, **kwargs)
    variables:
    - description: Name of the storage account (Cosmos or Azure)
      id: account_name
      type:
      - str
  type: class
  uid: azure.data.tables.TableClient
- class: azure.data.tables.TableClient
  example:
  - "Creating and adding an entity to a Table<!--[!code-python[Main](les\\sample_insert_delete_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_insert_delete_entities.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   try:\n       entity\
    \ = table_client.create_entity(entity=self.entity)\n       print(entity)\n   except\
    \ ResourceExistsError:\n       print(\"Entity already exists\")\n\n   ````\n"
  fullName: azure.data.tables.TableClient.create_entity
  langs:
  - python
  module: azure.data.tables
  name: create_entity(entity, **kwargs)
  namewithoutparameters: create_entity
  summary: Insert entity in a table.
  syntax:
    content: create_entity(entity, **kwargs)
    parameters:
    - description: The properties for the table entity.
      id: entity
      isRequired: true
      type:
      - Union[TableEntity, dict[str,str]]
    return:
      description: Dictionary mapping operation metadata returned from the service
      type:
      - dict[str,str]
  type: method
  uid: azure.data.tables.TableClient.create_entity
- class: azure.data.tables.TableClient
  example:
  - "Creating a table from the TableClient object<!--[!code-python[Main](les\\sample_create_delete_table.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_create_delete_table.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   table_client =\
    \ TableClient.from_connection_string(\n       conn_str=self.connection_string,\n\
    \       table_name=self.table_name\n   )\n   try:\n       table_item = table_client.create_table()\n\
    \       print(\"Created table {}!\".format(table_item.table_name))\n   except\
    \ ResourceExistsError:\n       print(\"Table already exists\")\n\n   ````\n"
  fullName: azure.data.tables.TableClient.create_table
  langs:
  - python
  module: azure.data.tables
  name: create_table(**kwargs)
  namewithoutparameters: create_table
  summary: Creates a new table under the current account.
  syntax:
    content: create_table(**kwargs)
    return:
      description: Dictionary of operation metadata returned from service
      type:
      - dict[str,str]
  type: method
  uid: azure.data.tables.TableClient.create_table
- class: azure.data.tables.TableClient
  example:
  - "Deleting an entity to a Table<!--[!code-python[Main](les\\sample_insert_delete_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_insert_delete_entities.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   try:\n       table_client.delete_entity(\n\
    \           row_key=self.entity[\"RowKey\"],\n           partition_key=self.entity[\"\
    PartitionKey\"]\n       )\n       print(\"Successfully deleted!\")\n   except\
    \ ResourceNotFoundError:\n       print(\"Entity does not exists\")\n\n   ````\n"
  fullName: azure.data.tables.TableClient.delete_entity
  langs:
  - python
  module: azure.data.tables
  name: delete_entity(partition_key, row_key, **kwargs)
  namewithoutparameters: delete_entity
  summary: Deletes the specified entity in a table.
  syntax:
    content: delete_entity(partition_key, row_key, **kwargs)
    parameters:
    - description: The partition key of the entity.
      id: partition_key
      isRequired: true
      type:
      - str
    - description: The row key of the entity.
      id: row_key
      isRequired: true
      type:
      - str
    - description: Etag of the entity
      id: etag
      isRequired: true
      type:
      - str
    - description: MatchCondition
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.TableClient.delete_entity
- class: azure.data.tables.TableClient
  example:
  - "Deleting a table from the TableClient object<!--[!code-python[Main](les\\sample_create_delete_table.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_create_delete_table.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   table_client =\
    \ TableClient.from_connection_string(\n       conn_str=self.connection_string,\n\
    \       table_name=self.table_name\n   )\n   try:\n       table_client.delete_table()\n\
    \       print(\"Deleted table {}!\".format(self.table_name))\n   except ResourceNotFoundError:\n\
    \       print(\"Table could not be found\")\n\n   ````\n"
  fullName: azure.data.tables.TableClient.delete_table
  langs:
  - python
  module: azure.data.tables
  name: delete_table(**kwargs)
  namewithoutparameters: delete_table
  summary: Deletes the table under the current account.
  syntax:
    content: delete_table(**kwargs)
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.TableClient.delete_table
- class: azure.data.tables.TableClient
  example:
  - "Authenticating a TableServiceClient from a connection_string<!--[!code-python[Main](les\\\
    sample_create_client.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_create_client.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.data.tables\
    \ import TableClient\n   table_client = TableClient.from_connection_string(\n\
    \       conn_str=self.connection_string,\n       table_name=\"tableName\"\n  \
    \ )\n   print(\"Table name: {}\".format(table_client.table_name))\n\n   ````\n"
  fullName: azure.data.tables.TableClient.from_connection_string
  langs:
  - python
  module: azure.data.tables
  name: from_connection_string(conn_str, table_name, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create TableClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, table_name, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage or Cosmos account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The table name.
      id: table_name
      isRequired: true
      type:
      - str
    - id: table_name
      isRequired: true
    return:
      description: A table client.
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.TableClient.from_connection_string
- class: azure.data.tables.TableClient
  fullName: azure.data.tables.TableClient.from_table_url
  langs:
  - python
  module: azure.data.tables
  name: from_table_url(table_url, credential=None, **kwargs)
  namewithoutparameters: from_table_url
  summary: A client to interact with a specific Table.
  syntax:
    content: from_table_url(table_url, credential=None, **kwargs)
    parameters:
    - description: The full URI to the table, including SAS token if used.
      id: table_url
      isRequired: true
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key.'
      id: credential
      isRequired: true
      type:
      - str
    - defaultValue: None
      id: credential
    return:
      description: A table client.
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.TableClient.from_table_url
- class: azure.data.tables.TableClient
  fullName: azure.data.tables.TableClient.get_entity
  langs:
  - python
  module: azure.data.tables
  name: get_entity(partition_key, row_key, **kwargs)
  namewithoutparameters: get_entity
  summary: Queries entities in a table.
  syntax:
    content: get_entity(partition_key, row_key, **kwargs)
    parameters:
    - description: The partition key of the entity.
      id: partition_key
      isRequired: true
      type:
      - str
    - description: The row key of the entity.
      id: row_key
      isRequired: true
      type:
      - str
    return:
      description: Dictionary mapping operation metadata returned from the service
      type:
      - dict[str,str]
  type: method
  uid: azure.data.tables.TableClient.get_entity
- class: azure.data.tables.TableClient
  fullName: azure.data.tables.TableClient.get_table_access_policy
  langs:
  - python
  module: azure.data.tables
  name: get_table_access_policy(**kwargs)
  namewithoutparameters: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.'
  syntax:
    content: get_table_access_policy(**kwargs)
    return:
      description: Dictionary of SignedIdentifiers
      type:
      - dict[str,AccessPolicy]
  type: method
  uid: azure.data.tables.TableClient.get_table_access_policy
- class: azure.data.tables.TableClient
  example:
  - "List all entities held within a table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       # Query the\
    \ entities in the table\n       entities = list(table.list_entities())\n\n   \
    \    for i, entity in enumerate(entities):\n           print(\"Entity #{}: {}\"\
    .format(entity, i))\n\n   ````\n"
  fullName: azure.data.tables.TableClient.list_entities
  langs:
  - python
  module: azure.data.tables
  name: list_entities(**kwargs)
  namewithoutparameters: list_entities
  summary: Lists entities in a table.
  syntax:
    content: list_entities(**kwargs)
    parameters:
    - description: Number of entities per page in return ItemPaged
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: Specify desired properties of an entity to return certain entities
      id: list(str)] select
      isRequired: true
      type:
      - Union[str,
    return:
      description: Query of table entities
      type:
      - ItemPaged[TableEntity]
  type: method
  uid: azure.data.tables.TableClient.list_entities
- class: azure.data.tables.TableClient
  example:
  - "Query entities held within a table<!--[!code-python[Main](les\\sample_query_table.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_query_table.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   try:\n       entity_name = \"\
    marker\"\n       name_filter = \"Name eq '{}'\".format(entity_name)\n       queried_entities\
    \ = table_client.query_entities(filter=name_filter, select=[\"Brand\",\"Color\"\
    ])\n\n       for entity_chosen in queried_entities:\n           print(entity_chosen)\n\
    \n   except HttpResponseError as e:\n       print(e.message)\n\n   ````\n"
  fullName: azure.data.tables.TableClient.query_entities
  langs:
  - python
  module: azure.data.tables
  name: query_entities(filter, **kwargs)
  namewithoutparameters: query_entities
  summary: Lists entities in a table.
  syntax:
    content: query_entities(filter, **kwargs)
    parameters:
    - description: Specify a filter to return certain entities
      id: filter
      isRequired: true
      type:
      - str
    - description: Number of entities per page in return ItemPaged
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: Specify desired properties of an entity to return certain entities
      id: list[str]] select
      isRequired: true
      type:
      - Union[str,
    - description: Dictionary for formatting query with additional, user defined parameters
      id: parameters
      isRequired: true
      type:
      - dict
    return:
      description: Query of table entities
      type:
      - ItemPaged[TableEntity]
  type: method
  uid: azure.data.tables.TableClient.query_entities
- class: azure.data.tables.TableClient
  fullName: azure.data.tables.TableClient.set_table_access_policy
  langs:
  - python
  module: azure.data.tables
  name: set_table_access_policy(signed_identifiers, **kwargs)
  namewithoutparameters: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  syntax:
    content: set_table_access_policy(signed_identifiers, **kwargs)
    parameters:
    - description: ''
      id: signed_identifiers
      isRequired: true
      type:
      - dict[str,AccessPolicy]
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.TableClient.set_table_access_policy
- class: azure.data.tables.TableClient
  example:
  - "Updating an already exiting entity in a Table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       # Update the\
    \ entity\n       created.text = \"NewMarker\"\n       table.update_entity(mode=UpdateMode.REPLACE,\
    \ entity=created)\n\n       # Get the replaced entity\n       replaced = table.get_entity(\n\
    \           partition_key=created.PartitionKey, row_key=created.RowKey)\n    \
    \   print(\"Replaced entity: {}\".format(replaced))\n\n       # Merge the entity\n\
    \       replaced.color = \"Blue\"\n       table.update_entity(mode=UpdateMode.MERGE,\
    \ entity=replaced)\n\n       # Get the merged entity\n       merged = table.get_entity(\n\
    \           partition_key=replaced.PartitionKey, row_key=replaced.RowKey)\n  \
    \     print(\"Merged entity: {}\".format(merged))\n\n   ````\n"
  fullName: azure.data.tables.TableClient.update_entity
  langs:
  - python
  module: azure.data.tables
  name: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  namewithoutparameters: update_entity
  summary: Update entity in a table.
  syntax:
    content: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
    parameters:
    - description: The properties for the table entity.
      id: entity
      isRequired: true
      type:
      - Union[TableEntity, dict[str,str]]
    - description: Merge or Replace entity
      id: mode
      isRequired: true
      type:
      - azure.data.tables.UpdateMode
    - description: The partition key of the entity.
      id: partition_key
      isRequired: true
      type:
      - str
    - description: The row key of the entity.
      id: row_key
      isRequired: true
      type:
      - str
    - description: Etag of the entity
      id: etag
      isRequired: true
      type:
      - str
    - description: MatchCondition
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    return:
      description: Dictionary mapping operation metadata returned from the service
      type:
      - dict[str,str]
  type: method
  uid: azure.data.tables.TableClient.update_entity
- class: azure.data.tables.TableClient
  example:
  - "Update/merge or insert an entity into a table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\30\\\\azure-data-tables-12.0.0b2\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       # Try Replace\
    \ and then Insert on Fail\n       insert_entity = table.upsert_entity(mode=UpdateMode.REPLACE,\
    \ entity=entity1)\n       print(\"Inserted entity: {}\".format(insert_entity))\n\
    \n       # Try merge, and merge since already in table\n       created.text =\
    \ \"NewMarker\"\n       merged_entity = table.upsert_entity(mode=UpdateMode.MERGE,\
    \ entity=entity)\n       print(\"Merged entity: {}\".format(merged_entity))\n\n\
    \   ````\n"
  fullName: azure.data.tables.TableClient.upsert_entity
  langs:
  - python
  module: azure.data.tables
  name: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  namewithoutparameters: upsert_entity
  summary: Update/Merge or Insert entity into table.
  syntax:
    content: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
    parameters:
    - description: The properties for the table entity.
      id: entity
      isRequired: true
      type:
      - Union[TableEntity, dict[str,str]]
    - description: Merge or Replace and Insert on fail
      id: mode
      isRequired: true
      type:
      - azure.data.tables.UpdateMode
    return:
      description: Dictionary mapping operation metadata returned from the service
      type:
      - dict[str,str]
  type: method
  uid: azure.data.tables.TableClient.upsert_entity
references:
- fullName: azure.data.tables.TableClient.create_entity
  isExternal: false
  name: create_entity(entity, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.create_entity
- fullName: azure.data.tables.TableClient.create_table
  isExternal: false
  name: create_table(**kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.create_table
- fullName: azure.data.tables.TableClient.delete_entity
  isExternal: false
  name: delete_entity(partition_key, row_key, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.delete_entity
- fullName: azure.data.tables.TableClient.delete_table
  isExternal: false
  name: delete_table(**kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.delete_table
- fullName: azure.data.tables.TableClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, table_name, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.from_connection_string
- fullName: azure.data.tables.TableClient.from_table_url
  isExternal: false
  name: from_table_url(table_url, credential=None, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.from_table_url
- fullName: azure.data.tables.TableClient.get_entity
  isExternal: false
  name: get_entity(partition_key, row_key, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.get_entity
- fullName: azure.data.tables.TableClient.get_table_access_policy
  isExternal: false
  name: get_table_access_policy(**kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.get_table_access_policy
- fullName: azure.data.tables.TableClient.list_entities
  isExternal: false
  name: list_entities(**kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.list_entities
- fullName: azure.data.tables.TableClient.query_entities
  isExternal: false
  name: query_entities(filter, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.query_entities
- fullName: azure.data.tables.TableClient.set_table_access_policy
  isExternal: false
  name: set_table_access_policy(signed_identifiers, **kwargs)
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.set_table_access_policy
- fullName: azure.data.tables.TableClient.update_entity
  isExternal: false
  name: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.update_entity
- fullName: azure.data.tables.TableClient.upsert_entity
  isExternal: false
  name: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  parent: azure.data.tables.TableClient
  uid: azure.data.tables.TableClient.upsert_entity
- fullName: Union[TableEntity, dict[str,str]]
  name: Union[TableEntity, dict[str,str]]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: TableEntity
    name: TableEntity
    uid: TableEntity
  - fullName: ', '
    name: ', '
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Union[TableEntity, dict[str,str]]
- fullName: dict[str,str]
  name: dict[str,str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: ']'
    name: ']'
  uid: dict[str,str]
- fullName: dict[str,AccessPolicy]
  name: dict[str,AccessPolicy]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str,AccessPolicy
    name: str,AccessPolicy
    uid: str,AccessPolicy
  - fullName: ']'
    name: ']'
  uid: dict[str,AccessPolicy]
- fullName: Union[str,
  name: Union[str,
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str,
    name: str,
    uid: str,
  uid: Union[str,
- fullName: ItemPaged[TableEntity]
  name: ItemPaged[TableEntity]
  spec.python:
  - fullName: ItemPaged
    name: ItemPaged
    uid: ItemPaged
  - fullName: '['
    name: '['
  - fullName: TableEntity
    name: TableEntity
    uid: TableEntity
  - fullName: ']'
    name: ']'
  uid: ItemPaged[TableEntity]
