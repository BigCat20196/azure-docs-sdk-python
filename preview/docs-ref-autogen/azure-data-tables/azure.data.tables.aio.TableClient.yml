### YamlMime:PythonClass
uid: azure.data.tables.aio.TableClient
name: TableClient
fullName: azure.data.tables.aio.TableClient
module: azure.data.tables.aio
inheritances:
- azure.data.tables.aio._base_client_async.AsyncStorageAccountHostsMixin
- azure.data.tables._table_client_base.TableClientBase
constructor:
  syntax: TableClient(account_url, table_name, credential=None, **kwargs)
variables:
- description: Name of the storage account (Cosmos or Azure)
  name: account_name
  types:
  - <xref:str>
methods:
- uid: azure.data.tables.aio.TableClient.create_entity
  name: create_entity
  summary: 'Insert entity in a table.

    :param entity: The properties for the table entity.

    :type entity: dict[str, str]

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: create_entity(entity, **kwargs)
- uid: azure.data.tables.aio.TableClient.create_table
  name: create_table
  summary: 'Creates a new table under the given account.

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: create_table(**kwargs)
- uid: azure.data.tables.aio.TableClient.delete_entity
  name: delete_entity
  summary: 'Deletes the specified entity in a table.

    :param partition_key: The partition key of the entity.

    :type partition_key: str

    :param row_key: The row key of the entity.

    :type row_key: str

    :keyword str etag: Etag of the entity

    :keyword  ~azure.core.MatchConditions match_condition: MatchCondition

    :return: None

    :rtype: None

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: delete_entity(partition_key, row_key, **kwargs)
- uid: azure.data.tables.aio.TableClient.delete_table
  name: delete_table
  summary: 'Creates a new table under the given account.

    :return: None

    :rtype: None'
  signature: delete_table(**kwargs)
- uid: azure.data.tables.aio.TableClient.from_connection_string
  name: from_connection_string
  summary: Create TableClient from a Connection String.
  signature: from_connection_string(conn_str, table_name, **kwargs)
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage or Cosmos account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    isRequired: true
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.aio.TableClient.from_table_url
  name: from_table_url
  summary: A client to interact with a specific Table.
  signature: from_table_url(table_url, credential=None, **kwargs)
  parameters:
  - name: table_url
    description: The full URI to the table, including SAS token if used.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string, an
      account

      shared access key.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    defaultValue: None
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.aio.TableClient.get_entity
  name: get_entity
  summary: 'Queries entities in a table.

    :param partition_key: The partition key of the entity.

    :type partition_key: str

    :param row_key: The row key of the entity.

    :type row_key: str

    :return: TableEntity mapping str to azure.data.tables.EntityProperty

    :rtype: ~azure.data.tables.TableEntity

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: get_entity(partition_key, row_key, **kwargs)
- uid: azure.data.tables.aio.TableClient.get_table_access_policy
  name: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.

    :return: Dictionary of SignedIdentifiers

    :rtype: dict[str,~azure.data.tables.AccessPolicy]

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: get_table_access_policy(**kwargs)
- uid: azure.data.tables.aio.TableClient.list_entities
  name: list_entities
  summary: Lists entities in a table.
  signature: list_entities(**kwargs)
  parameters:
  - name: results_per_page
    description: Number of entities per page in return ItemPaged
    isRequired: true
    types:
    - <xref:int>
  - name: list(str)] select
    description: Specify desired properties of an entity to return certain entities
    isRequired: true
    types:
    - <xref:Union>[<xref:str,>
  return:
    description: Query of table entities
    types:
    - <xref:AsyncItemPaged>[<xref:TableEntity>]
- uid: azure.data.tables.aio.TableClient.query_entities
  name: query_entities
  summary: Lists entities in a table.
  signature: query_entities(filter, **kwargs)
  parameters:
  - name: filter
    description: Specify a filter to return certain entities
    isRequired: true
    types:
    - <xref:str>
  - name: results_per_page
    description: Number of entities per page in return ItemPaged
    isRequired: true
    types:
    - <xref:int>
  - name: list[str]] select
    description: Specify desired properties of an entity to return certain entities
    isRequired: true
    types:
    - <xref:Union>[<xref:str,>
  - name: parameters
    description: Dictionary for formatting query with additional, user defined parameters
    isRequired: true
    types:
    - <xref:dict>
  return:
    description: Query of table entities
    types:
    - <xref:ItemPaged>[<xref:TableEntity>]
- uid: azure.data.tables.aio.TableClient.set_table_access_policy
  name: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  signature: set_table_access_policy(signed_identifiers, **kwargs)
  parameters:
  - name: signed_identifiers
    isRequired: true
    types:
    - <xref:dict>[<xref:str,AccessPolicy>]
  return:
    description: None
    types:
    - <xref:None>
- uid: azure.data.tables.aio.TableClient.update_entity
  name: update_entity
  summary: 'Update entity in a table.

    :param mode: Merge or Replace entity

    :type mode: ~azure.data.tables.UpdateMode

    :param entity: The properties for the table entity.

    :type entity: dict[str, str]

    :param partition_key: The partition key of the entity.

    :type partition_key: str

    :param row_key: The row key of the entity.

    :type row_key: str

    :param etag: Etag of the entity

    :type etag: str

    :param match_condition: MatchCondition

    :type match_condition: ~azure.core.MatchConditions

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
- uid: azure.data.tables.aio.TableClient.upsert_entity
  name: upsert_entity
  summary: 'Update/Merge or Insert entity into table.

    :param mode: Merge or Replace and Insert on fail

    :type mode: ~azure.data.tables.UpdateMode

    :param entity: The properties for the table entity.

    :type entity: dict[str, str]

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  signature: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
