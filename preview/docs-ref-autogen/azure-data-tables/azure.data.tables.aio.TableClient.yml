### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.data.tables.aio.TableClient.create_entity
  - azure.data.tables.aio.TableClient.create_table
  - azure.data.tables.aio.TableClient.delete_entity
  - azure.data.tables.aio.TableClient.delete_table
  - azure.data.tables.aio.TableClient.from_connection_string
  - azure.data.tables.aio.TableClient.from_table_url
  - azure.data.tables.aio.TableClient.get_entity
  - azure.data.tables.aio.TableClient.get_table_access_policy
  - azure.data.tables.aio.TableClient.list_entities
  - azure.data.tables.aio.TableClient.query_entities
  - azure.data.tables.aio.TableClient.set_table_access_policy
  - azure.data.tables.aio.TableClient.update_entity
  - azure.data.tables.aio.TableClient.upsert_entity
  class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.data.tables.aio._base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.data.tables._base_client.StorageAccountHostsMixin
    type: azure.data.tables._table_client_base.TableClientBase
  langs:
  - python
  module: azure.data.tables.aio
  name: TableClient
  summary: ''
  syntax:
    content: TableClient(account_url, table_name, credential=None, **kwargs)
    variables:
    - description: Name of the storage account (Cosmos or Azure)
      id: account_name
      type:
      - str
  type: class
  uid: azure.data.tables.aio.TableClient
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.create_entity
  langs:
  - python
  module: azure.data.tables.aio
  name: create_entity(entity, **kwargs)
  namewithoutparameters: create_entity
  summary: 'Insert entity in a table.

    :param entity: The properties for the table entity.

    :type entity: dict[str, str]

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: create_entity(entity, **kwargs)
  type: method
  uid: azure.data.tables.aio.TableClient.create_entity
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.create_table
  langs:
  - python
  module: azure.data.tables.aio
  name: create_table(**kwargs)
  namewithoutparameters: create_table
  summary: 'Creates a new table under the given account.

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: create_table(**kwargs)
  type: method
  uid: azure.data.tables.aio.TableClient.create_table
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.delete_entity
  langs:
  - python
  module: azure.data.tables.aio
  name: delete_entity(partition_key, row_key, **kwargs)
  namewithoutparameters: delete_entity
  summary: 'Deletes the specified entity in a table.

    :param partition_key: The partition key of the entity.

    :type partition_key: str

    :param row_key: The row key of the entity.

    :type row_key: str

    :keyword str etag: Etag of the entity

    :keyword  ~azure.core.MatchConditions match_condition: MatchCondition

    :return: None

    :rtype: None

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: delete_entity(partition_key, row_key, **kwargs)
  type: method
  uid: azure.data.tables.aio.TableClient.delete_entity
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.delete_table
  langs:
  - python
  module: azure.data.tables.aio
  name: delete_table(**kwargs)
  namewithoutparameters: delete_table
  summary: 'Creates a new table under the given account.

    :return: None

    :rtype: None'
  syntax:
    content: delete_table(**kwargs)
  type: method
  uid: azure.data.tables.aio.TableClient.delete_table
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.from_connection_string
  langs:
  - python
  module: azure.data.tables.aio
  name: from_connection_string(conn_str, table_name, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create TableClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, table_name, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage or Cosmos account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The table name.
      id: table_name
      isRequired: true
      type:
      - str
    - id: table_name
      isRequired: true
    return:
      description: A table client.
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.aio.TableClient.from_connection_string
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.from_table_url
  langs:
  - python
  module: azure.data.tables.aio
  name: from_table_url(table_url, credential=None, **kwargs)
  namewithoutparameters: from_table_url
  summary: A client to interact with a specific Table.
  syntax:
    content: from_table_url(table_url, credential=None, **kwargs)
    parameters:
    - description: The full URI to the table, including SAS token if used.
      id: table_url
      isRequired: true
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key.'
      id: credential
      isRequired: true
      type:
      - str
    - defaultValue: None
      id: credential
    return:
      description: A table client.
      type:
      - azure.data.tables.TableClient
  type: method
  uid: azure.data.tables.aio.TableClient.from_table_url
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.get_entity
  langs:
  - python
  module: azure.data.tables.aio
  name: get_entity(partition_key, row_key, **kwargs)
  namewithoutparameters: get_entity
  summary: 'Queries entities in a table.

    :param partition_key: The partition key of the entity.

    :type partition_key: str

    :param row_key: The row key of the entity.

    :type row_key: str

    :return: TableEntity mapping str to azure.data.tables.EntityProperty

    :rtype: ~azure.data.tables.TableEntity

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: get_entity(partition_key, row_key, **kwargs)
  type: method
  uid: azure.data.tables.aio.TableClient.get_entity
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.get_table_access_policy
  langs:
  - python
  module: azure.data.tables.aio
  name: get_table_access_policy(**kwargs)
  namewithoutparameters: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.

    :return: Dictionary of SignedIdentifiers

    :rtype: dict[str,~azure.data.tables.AccessPolicy]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: get_table_access_policy(**kwargs)
  type: method
  uid: azure.data.tables.aio.TableClient.get_table_access_policy
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.list_entities
  langs:
  - python
  module: azure.data.tables.aio
  name: list_entities(**kwargs)
  namewithoutparameters: list_entities
  summary: Lists entities in a table.
  syntax:
    content: list_entities(**kwargs)
    parameters:
    - description: Number of entities per page in return ItemPaged
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: Specify desired properties of an entity to return certain entities
      id: list(str)] select
      isRequired: true
      type:
      - Union[str,
    return:
      description: Query of table entities
      type:
      - AsyncItemPaged[TableEntity]
  type: method
  uid: azure.data.tables.aio.TableClient.list_entities
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.query_entities
  langs:
  - python
  module: azure.data.tables.aio
  name: query_entities(filter, **kwargs)
  namewithoutparameters: query_entities
  summary: Lists entities in a table.
  syntax:
    content: query_entities(filter, **kwargs)
    parameters:
    - description: Specify a filter to return certain entities
      id: filter
      isRequired: true
      type:
      - str
    - description: Number of entities per page in return ItemPaged
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: Specify desired properties of an entity to return certain entities
      id: list[str]] select
      isRequired: true
      type:
      - Union[str,
    - description: Dictionary for formatting query with additional, user defined parameters
      id: parameters
      isRequired: true
      type:
      - dict
    return:
      description: Query of table entities
      type:
      - ItemPaged[TableEntity]
  type: method
  uid: azure.data.tables.aio.TableClient.query_entities
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.set_table_access_policy
  langs:
  - python
  module: azure.data.tables.aio
  name: set_table_access_policy(signed_identifiers, **kwargs)
  namewithoutparameters: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  syntax:
    content: set_table_access_policy(signed_identifiers, **kwargs)
    parameters:
    - description: ''
      id: signed_identifiers
      isRequired: true
      type:
      - dict[str,AccessPolicy]
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.data.tables.aio.TableClient.set_table_access_policy
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.update_entity
  langs:
  - python
  module: azure.data.tables.aio
  name: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  namewithoutparameters: update_entity
  summary: 'Update entity in a table.

    :param mode: Merge or Replace entity

    :type mode: ~azure.data.tables.UpdateMode

    :param entity: The properties for the table entity.

    :type entity: dict[str, str]

    :param partition_key: The partition key of the entity.

    :type partition_key: str

    :param row_key: The row key of the entity.

    :type row_key: str

    :param etag: Etag of the entity

    :type etag: str

    :param match_condition: MatchCondition

    :type match_condition: ~azure.core.MatchConditions

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  type: method
  uid: azure.data.tables.aio.TableClient.update_entity
- class: azure.data.tables.aio.TableClient
  fullName: azure.data.tables.aio.TableClient.upsert_entity
  langs:
  - python
  module: azure.data.tables.aio
  name: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  namewithoutparameters: upsert_entity
  summary: 'Update/Merge or Insert entity into table.

    :param mode: Merge or Replace and Insert on fail

    :type mode: ~azure.data.tables.UpdateMode

    :param entity: The properties for the table entity.

    :type entity: dict[str, str]

    :return: Dictionary of operation metadata returned from service

    :rtype: dict[str,str]

    :raises: ~azure.core.exceptions.HttpResponseError'
  syntax:
    content: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  type: method
  uid: azure.data.tables.aio.TableClient.upsert_entity
references:
- fullName: azure.data.tables.aio.TableClient.create_entity
  isExternal: false
  name: create_entity(entity, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.create_entity
- fullName: azure.data.tables.aio.TableClient.create_table
  isExternal: false
  name: create_table(**kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.create_table
- fullName: azure.data.tables.aio.TableClient.delete_entity
  isExternal: false
  name: delete_entity(partition_key, row_key, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.delete_entity
- fullName: azure.data.tables.aio.TableClient.delete_table
  isExternal: false
  name: delete_table(**kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.delete_table
- fullName: azure.data.tables.aio.TableClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, table_name, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.from_connection_string
- fullName: azure.data.tables.aio.TableClient.from_table_url
  isExternal: false
  name: from_table_url(table_url, credential=None, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.from_table_url
- fullName: azure.data.tables.aio.TableClient.get_entity
  isExternal: false
  name: get_entity(partition_key, row_key, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.get_entity
- fullName: azure.data.tables.aio.TableClient.get_table_access_policy
  isExternal: false
  name: get_table_access_policy(**kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.get_table_access_policy
- fullName: azure.data.tables.aio.TableClient.list_entities
  isExternal: false
  name: list_entities(**kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.list_entities
- fullName: azure.data.tables.aio.TableClient.query_entities
  isExternal: false
  name: query_entities(filter, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.query_entities
- fullName: azure.data.tables.aio.TableClient.set_table_access_policy
  isExternal: false
  name: set_table_access_policy(signed_identifiers, **kwargs)
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.set_table_access_policy
- fullName: azure.data.tables.aio.TableClient.update_entity
  isExternal: false
  name: 'update_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.update_entity
- fullName: azure.data.tables.aio.TableClient.upsert_entity
  isExternal: false
  name: 'upsert_entity(entity, mode=<UpdateMode.MERGE: ''merge''>, **kwargs)'
  parent: azure.data.tables.aio.TableClient
  uid: azure.data.tables.aio.TableClient.upsert_entity
- fullName: Union[str,
  name: Union[str,
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str,
    name: str,
    uid: str,
  uid: Union[str,
- fullName: AsyncItemPaged[TableEntity]
  name: AsyncItemPaged[TableEntity]
  spec.python:
  - fullName: AsyncItemPaged
    name: AsyncItemPaged
    uid: AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: TableEntity
    name: TableEntity
    uid: TableEntity
  - fullName: ']'
    name: ']'
  uid: AsyncItemPaged[TableEntity]
- fullName: ItemPaged[TableEntity]
  name: ItemPaged[TableEntity]
  spec.python:
  - fullName: ItemPaged
    name: ItemPaged
    uid: ItemPaged
  - fullName: '['
    name: '['
  - fullName: TableEntity
    name: TableEntity
    uid: TableEntity
  - fullName: ']'
    name: ']'
  uid: ItemPaged[TableEntity]
- fullName: dict[str,AccessPolicy]
  name: dict[str,AccessPolicy]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str,AccessPolicy
    name: str,AccessPolicy
    uid: str,AccessPolicy
  - fullName: ']'
    name: ']'
  uid: dict[str,AccessPolicy]
