### YamlMime:PythonClass
uid: azure.data.tables.aio.TableClient
name: TableClient
fullName: azure.data.tables.aio.TableClient
module: azure.data.tables.aio
inheritances:
- azure.data.tables.aio._base_client_async.AsyncTablesBaseClient
summary: A client to interact with a specific Table in an Azure Tables account.
constructor:
  syntax: 'TableClient(endpoint: str, table_name: str, credential: typing.Union[azure.core.credentials.AzureSasCredential,
    azure.core.credentials.AzureNamedKeyCredential] = None, **kwargs) -> None'
variables:
- description: The name of the Tables account.
  name: account_name
  types:
  - <xref:str>
- description: The name of the table.
  name: table_name
  types:
  - <xref:str>
- description: The full URL to the Tables account.
  name: url
  types:
  - <xref:str>
methods:
- uid: azure.data.tables.aio.TableClient.create_entity
  name: create_entity
  summary: Insert entity in a table.
  signature: 'create_entity(entity: typing.Union[azure.data.tables._entity.TableEntity,
    Mapping[str, typing.Any]], **kwargs) -> Mapping[str, typing.Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - Dict[str,str]
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:Dict>[<xref:str>,<xref:str>]
  exceptions:
  - 'type: azure.core.exceptions.ResourceExistsError> If the entity already exist'
- uid: azure.data.tables.aio.TableClient.create_table
  name: create_table
  summary: Creates a new table under the given account.
  signature: create_table(**kwargs) -> None
  return:
    description: Dictionary of operation metadata returned from service
    types:
    - <xref:Dict>[<xref:str>,<xref:str>]
  exceptions:
  - 'type: azure.core.exceptions.ResourceExistsError> If the entity already exist'
- uid: azure.data.tables.aio.TableClient.delete_entity
  name: delete_entity
  summary: 'Deletes the specified entity in a table. No error will be raised if

    the entity or PartitionKey-RowKey pairing is not found.'
  parameters:
  - name: partition_key
    description: The partition key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: row_key
    description: The row key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: entity
    description: The entity to delete
    isRequired: true
    types:
    - <xref:azure.data.tables.aio.Union>[<xref:azure.data.tables.TableEntity>, <xref:azure.data.tables.aio.Mapping>[<xref:str>,
      <xref:str>]]
  return:
    description: None
    types:
    - <xref:None>
- uid: azure.data.tables.aio.TableClient.delete_table
  name: delete_table
  summary: 'Deletes the table under the current account. No error will be raised if

    the given table name is not found.'
  signature: delete_table(**kwargs) -> None
  return:
    description: None
    types:
    - <xref:None>
- uid: azure.data.tables.aio.TableClient.from_connection_string
  name: from_connection_string
  summary: Create TableClient from a Connection string.
  signature: 'from_connection_string(conn_str: str, table_name: str, **kwargs) ->
    azure.data.tables.aio._table_client_async.TableClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    isRequired: true
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.aio.TableClient.from_table_url
  name: from_table_url
  summary: A client to interact with a specific Table.
  signature: 'from_table_url(table_url: str, credential: typing.Union[azure.core.credentials.AzureSasCredential,
    azure.core.credentials.AzureNamedKeyCredential] = None, **kwargs) -> azure.data.tables.aio._table_client_async.TableClient'
  parameters:
  - name: table_url
    description: The full URI to the table, including SAS token if used.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string, an
      account

      shared access key.'
    isRequired: true
  - name: credential
    defaultValue: None
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.aio.TableClient.get_entity
  name: get_entity
  summary: Get a single entity in a table.
  signature: 'get_entity(partition_key: str, row_key: str, **kwargs) -> azure.data.tables._entity.TableEntity'
  parameters:
  - name: partition_key
    description: The partition key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: row_key
    description: The row key of the entity.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:azure.data.tables.TableEntity>
- uid: azure.data.tables.aio.TableClient.get_table_access_policy
  name: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.'
  signature: get_table_access_policy(**kwargs) -> Mapping[str, azure.data.tables._models.AccessPolicy]
  return:
    description: Dictionary of SignedIdentifiers
    types:
    - Dict[str, <xref:azure.data.tables.AccessPolicy>]
- uid: azure.data.tables.aio.TableClient.list_entities
  name: list_entities
  summary: Lists entities in a table.
  signature: list_entities(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.data.tables._entity.TableEntity]
  return:
    description: AsyncItemPaged[<xref:azure.data.tables.TableEntity>]
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>
- uid: azure.data.tables.aio.TableClient.query_entities
  name: query_entities
  summary: Lists entities in a table.
  signature: 'query_entities(query_filter: str, **kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.data.tables._entity.TableEntity]'
  parameters:
  - name: query_filter
    description: Specify a filter to return certain entities
    isRequired: true
    types:
    - <xref:str>
  return:
    description: AsyncItemPaged[<xref:azure.data.tables.TableEntity>]
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>
- uid: azure.data.tables.aio.TableClient.set_table_access_policy
  name: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  signature: 'set_table_access_policy(signed_identifiers: Mapping[str, azure.data.tables._models.AccessPolicy],
    **kwargs) -> None'
  parameters:
  - name: signed_identifiers
    description: Access policies to set for the table
    isRequired: true
    types:
    - Dict[str, <xref:azure.data.tables.AccessPolicy>]
  return:
    description: None
    types:
    - <xref:None>
- uid: azure.data.tables.aio.TableClient.submit_transaction
  name: submit_transaction
  summary: 'Commit a list of operations as a single transaction.


    If any one of these operations fails, the entire transaction will be rejected.'
  signature: 'submit_transaction(operations: typing.Iterable[typing.Union[typing.Tuple[str,
    typing.Union[azure.data.tables._entity.TableEntity, Mapping[str, typing.Any]]],
    typing.Tuple[str, typing.Union[azure.data.tables._entity.TableEntity, Mapping[str,
    typing.Any]], Mapping[str, typing.Any]]]], **kwargs) -> typing.List[Mapping[str,
    typing.Any]]'
  parameters:
  - name: operations
    description: 'The list of operations to commit in a transaction. This should be
      a list of

      tuples containing an operation name, the entity on which to operate, and optionally,
      a dict of additional

      kwargs for that operation.'
    isRequired: true
    types:
    - <xref:azure.data.tables.aio.Iterable>[<xref:azure.data.tables.aio.Tuple>[<xref:str>,
      <xref:azure.data.tables.aio.EntityType>]]
  return:
    description: A list of mappings with response metadata for each operation in the
      transaction.
    types:
    - <xref:azure.data.tables.aio.List>[<xref:azure.data.tables.aio.Mapping>[<xref:str>,
      <xref:azure.data.tables.aio.Any>]]
  exceptions:
  - 'type: azure.data.tables.TableTransactionError'
- uid: azure.data.tables.aio.TableClient.update_entity
  name: update_entity
  summary: Update entity in a table.
  signature: 'update_entity(entity: typing.Union[azure.data.tables._entity.TableEntity,
    Mapping[str, typing.Any]], mode: str = <UpdateMode.MERGE: ''merge''>, **kwargs)
    -> Mapping[str, typing.Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - Dict[str,str]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  return:
    description: Dictionary of operation metadata returned from service
    types:
    - <xref:Dict>[<xref:str>,<xref:str>]
- uid: azure.data.tables.aio.TableClient.upsert_entity
  name: upsert_entity
  summary: Update/Merge or Insert entity into table.
  signature: 'upsert_entity(entity: typing.Union[azure.data.tables._entity.TableEntity,
    Mapping[str, typing.Any]], mode: str = <UpdateMode.MERGE: ''merge''>, **kwargs)
    -> Mapping[str, typing.Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - Dict[str,str]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:Dict>[<xref:str>,<xref:str>]
