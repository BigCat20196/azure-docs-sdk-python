### YamlMime:PythonClass
uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder
name: AvroEncoder
fullName: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder
module: azure.schemaregistry.encoder.avroencoder.aio
inheritances:
- builtins.object
summary: 'AvroEncoder provides the ability to encode and decode data according

  to the given avro schema. It would automatically register, get and cache the schema.'
constructor:
  syntax: 'AvroEncoder(**kwargs: Any)'
  parameters:
  - name: client
    description: 'Required. The schema registry client

      which is used to register schema and retrieve schema from the service.'
    types:
    - <xref:azure.schemaregistry.aio.SchemaRegistryClient>
  - name: group_name
    description: Required. Schema group under which schema should be registered.
    types:
    - <xref:str>
  - name: auto_register_schemas
    description: 'When true, register new schemas passed to encode.

      Otherwise, and by default, encode will fail if the schema has not been pre-registered
      in the registry.'
    types:
    - <xref:bool>
methods:
- uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: async close() -> None
- uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder.decode
  name: decode
  summary: "Decode bytes data using schema ID in the content type field. *message*\
    \ must be one of the following:\n   1. A Subtype of the MessageType protocol.\
    \ \n\n   2. A dict {\"data\": ..., \"content_type\": ...}, where \"data\" is bytes\
    \ and \"content_type\" is string. \n\n   3. If using to decode data that was serialized\
    \ with the AvroSerializer, a dict\n\n         {\"data\": ..., \"content_type\"\
    : None}, where \"data\" is bytes and \"content_type\" is None.\nData must follow\
    \ format of associated Avro RecordSchema:\n[https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema](https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema)"
  signature: 'async decode(message: Union[azure.schemaregistry.encoder.avroencoder._message_protocol.MessageType,
    azure.schemaregistry.encoder.avroencoder._message_protocol.MessageMetadataDict],
    *, readers_schema: Optional[str] = None, **kwargs) -> Dict[str, Any]'
  parameters:
  - name: message
    description: 'The message object which holds the data to be decoded and content
      type

      containing the schema ID.'
    isRequired: true
    types:
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageType>
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageMetadataDict>
  - name: readers_schema
    description: An optional reader's schema as defined by the Apache Avro specification.
    types:
    - <xref:str>
    - <xref:None>
  return:
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
  exceptions:
  - type: azure.schemaregistry.encoder.avroencoder.exceptions.SchemaParseError
    description: Indicates an issue with parsing schema.
  - type: azure.schemaregistry.encoder.avroencoder.exceptions.SchemaDecodeError
    description: Indicates an issue with decoding value.
- uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder.encode
  name: encode
  summary: "Encode data with the given schema. Create content type value, which consists\
    \ of the Avro Mime Type string\n   and the schema ID corresponding to given schema.\
    \ If provided with a message constructor callback,\n   pass encoded data and content\
    \ type to create message object. If not provided, return the following dict:\n\
    \   {\"data\": Avro encoded value, \"content_type\": Avro mime type string + schema\
    \ ID}.\n\nIf *message_type* is set, then additional keyword arguments will be\
    \ passed to the message callback\n   function provided.\nSchema must be an Avro\
    \ RecordSchema:\n[https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema](https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema)"
  signature: 'async encode(data: Mapping[str, Any], *, schema: str, message_type:
    Optional[Callable] = None, **kwargs: Any) -> Union[azure.schemaregistry.encoder.avroencoder._message_protocol.MessageType,
    azure.schemaregistry.encoder.avroencoder._message_protocol.MessageMetadataDict]'
  parameters:
  - name: data
    description: The data to be encoded.
    isRequired: true
    types:
    - <xref:Mapping>[<xref:str>, <xref:Any>]
  - name: schema
    description: Required. The schema used to encode the data.
    types:
    - <xref:str>
  - name: message_type
    description: 'The callback function or message class to construct the message.
      If message class,

      it must be a subtype of the azure.schemaregistry.encoder.avroencoder.MessageType
      protocol.

      If callback function, it must have the following method signature:

      *(data: bytes, content_type: str, **kwargs) -> MessageType*, where *data* and
      *content_type*

      are positional parameters.'
    types:
    - <xref:Callable>
    - <xref:None>
  return:
    types:
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageType>
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageMetadataDict>
  exceptions:
  - type: azure.schemaregistry.encoder.avroencoder.exceptions.SchemaParseError
    description: Indicates an issue with parsing schema.
  - type: azure.schemaregistry.encoder.avroencoder.exceptions.SchemaEncodeError
    description: Indicates an issue with encoding data for provided schema.
