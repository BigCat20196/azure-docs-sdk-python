### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.durable_functions.tasks.task_utilities.find_event_raised
  - azure.durable_functions.tasks.task_utilities.find_matching_event
  - azure.durable_functions.tasks.task_utilities.find_sub_orchestration
  - azure.durable_functions.tasks.task_utilities.find_sub_orchestration_completed
  - azure.durable_functions.tasks.task_utilities.find_sub_orchestration_created
  - azure.durable_functions.tasks.task_utilities.find_sub_orchestration_failed
  - azure.durable_functions.tasks.task_utilities.find_task_completed
  - azure.durable_functions.tasks.task_utilities.find_task_failed
  - azure.durable_functions.tasks.task_utilities.find_task_retry_timer_created
  - azure.durable_functions.tasks.task_utilities.find_task_retry_timer_fired
  - azure.durable_functions.tasks.task_utilities.find_task_scheduled
  - azure.durable_functions.tasks.task_utilities.find_task_timer_created
  - azure.durable_functions.tasks.task_utilities.get_retried_task
  - azure.durable_functions.tasks.task_utilities.parse_history_event
  - azure.durable_functions.tasks.task_utilities.set_processed
  - azure.durable_functions.tasks.task_utilities.should_suspend
  fullName: azure.durable_functions.tasks.task_utilities
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: task_utilities
  type: module
  uid: azure.durable_functions.tasks.task_utilities
- exceptions:
  - type: ValueError
  fullName: azure.durable_functions.tasks.task_utilities.find_event_raised
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_event_raised(state, name)
  summary: Find if the event with the given event name is raised.
  syntax:
    content: find_event_raised(state, name)
    parameters:
    - description: List of histories to search from
      id: state
      type:
      - List[HistoryEvent]
    - description: Name of the event to search for
      id: name
      type:
      - str
    return:
      description: 'The raised event with the given event name that has not yet been
        processed.

        Returns None if no event with the given conditions was found.'
      type:
      - HistoryEvent
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_event_raised
- fullName: azure.durable_functions.tasks.task_utilities.find_matching_event
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: 'find_matching_event(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    event_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  summary: Find matching event in the state array, if it exists.
  syntax:
    content: 'find_matching_event(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      event_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
      scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]'
    parameters:
    - description: The list of Durable events
      id: state
      type:
      - 'List[HistoryEvent]:'
    - description: The type of event being searched-for.
      id: event_type
      type:
      - 'HistoryEventType:'
    - description: 'The corresponding *scheduled* task for the searched-for event,

        only available when looking for a completed or failed event.

        Defaults to None.'
      id: Optional[HistoryEvent], optional
      type:
      - scheduled_task"
    return:
      description: The matching event from the state array, if it exists.
      type:
      - Optional[HistoryEvent]
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_matching_event
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: 'find_sub_orchestration(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    event_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    name: typing.Union[str, NoneType] = None, context=None, instance_id: typing.Union[str,
    NoneType] = None, scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  summary: Look-up matching sub-orchestrator event in the state array.
  syntax:
    content: 'find_sub_orchestration(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      event_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
      name: typing.Union[str, NoneType] = None, context=None, instance_id: typing.Union[str,
      NoneType] = None, scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]'
    parameters:
    - description: The history of Durable events
      id: state
      type:
      - List[HistoryEvent]
    - description: The type of Durable event to look for.
      id: event_type
      type:
      - HistoryEventType
    - description: Name of the sub-orchestrator.
      id: name
      type:
      - 'Optional[str]:'
    - description: A reference to the orchestration context
      id: context
      type:
      - Optional['DurableOrchestrationContext']
    - description: Instance ID of the sub-orchestrator. Defaults to None.
      id: instance_id
      type:
      - 'Optional[str], optional:'
    - description: 'The corresponding *scheduled* task for the searched-for event,

        only available when looking for a completed or failed event.

        Defaults to None.'
      id: Optional[HistoryEvent], optional
      type:
      - scheduled_task"
    return:
      description: The matching event from the state array, if it exists.
      type:
      - Optional[HistoryEvent]
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_completed
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: 'find_sub_orchestration_completed(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  summary: Look-up the sub-orchestration completed event.
  syntax:
    content: 'find_sub_orchestration_completed(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]'
    parameters:
    - description: The history of Durable events
      id: state
      type:
      - 'List[HistoryEvent]:'
    - description: The sub-orchestration creation event, if found.
      id: scheduled_task
      type:
      - 'Optional[HistoryEvent]:'
    return:
      description: The matching sub-orchestration completed event, if found. Else,
        None.
      type:
      - Optional[HistoryEvent]
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_completed
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_created
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: 'find_sub_orchestration_created(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str, context=None, instance_id: typing.Union[str, NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  summary: Look-up matching sub-orchestrator created event in the state array.
  syntax:
    content: 'find_sub_orchestration_created(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      name: str, context=None, instance_id: typing.Union[str, NoneType] = None) ->
      typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]'
    parameters:
    - description: The history of Durable events
      id: state
      type:
      - 'List[HistoryEvent]:'
    - description: Name of the sub-orchestrator.
      id: name
      type:
      - 'str:'
    - description: A reference to the orchestration context.
      id: context
      type:
      - 'Optional[''DurableOrchestrationContext'']:'
    - description: Instance ID of the sub-orchestrator. Defaults to None.
      id: instance_id
      type:
      - 'Optional[str], optional:'
    return:
      description: The matching sub-orchestration creation event. Else, None.
      type:
      - Optional[HistoryEvent]
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_created
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_failed
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: 'find_sub_orchestration_failed(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  summary: Look-up the sub-orchestration failure event.
  syntax:
    content: 'find_sub_orchestration_failed(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
      NoneType]'
    parameters:
    - description: The history of Durable events
      id: state
      type:
      - 'List[HistoryEvent]:'
    - description: The sub-orchestration creation event, if found.
      id: scheduled_task
      type:
      - 'Optional[HistoryEvent]:'
    return:
      description: The matching sub-orchestration failure event, if found. Else, None.
      type:
      - Optional[HistoryEvent]
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_failed
- fullName: azure.durable_functions.tasks.task_utilities.find_task_completed
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_task_completed(state, scheduled_task)
  summary: 'Locate the Completed Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a completed  task type,

    and has the a scheduled id that equals the EventId of the provided scheduled task.'
  syntax:
    content: find_task_completed(state, scheduled_task)
    parameters:
    - id: state
    - id: scheduled_task
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_task_completed
- fullName: azure.durable_functions.tasks.task_utilities.find_task_failed
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_task_failed(state, scheduled_task)
  summary: 'Locate the Failed Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a failed task type,

    and has the a scheduled id that equals the EventId of the provided scheduled task.'
  syntax:
    content: find_task_failed(state, scheduled_task)
    parameters:
    - id: state
    - id: scheduled_task
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_task_failed
- fullName: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_created
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_task_retry_timer_created(state, failed_task)
  summary: 'Locate the Timer Created Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a timer created task type,

    and has the an event id that is one higher then Scheduled Id of the provided

    failed task provided.'
  syntax:
    content: find_task_retry_timer_created(state, failed_task)
    parameters:
    - id: state
    - id: failed_task
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_created
- fullName: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_fired
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_task_retry_timer_fired(state, retry_timer_created)
  summary: 'Locate the Timer Fired Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a timer fired task type,

    and has the an timer id that is equal to the EventId of the provided

    timer created task provided.'
  syntax:
    content: find_task_retry_timer_fired(state, retry_timer_created)
    parameters:
    - id: state
    - id: retry_timer_created
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_fired
- fullName: azure.durable_functions.tasks.task_utilities.find_task_scheduled
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_task_scheduled(state, name)
  summary: 'Locate the Scheduled Task.


    Within the state passed, search for an event that has hasn''t been processed

    and has the the name provided.'
  syntax:
    content: find_task_scheduled(state, name)
    parameters:
    - id: state
    - id: name
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_task_scheduled
- fullName: azure.durable_functions.tasks.task_utilities.find_task_timer_created
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: find_task_timer_created(state, fire_at)
  summary: 'Locate the Timer Created Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a timer created task type,

    and has the an event id that is one higher then Scheduled Id of the provided

    failed task provided.'
  syntax:
    content: find_task_timer_created(state, fire_at)
    parameters:
    - id: state
    - id: fire_at
  type: function
  uid: azure.durable_functions.tasks.task_utilities.find_task_timer_created
- fullName: azure.durable_functions.tasks.task_utilities.get_retried_task
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: 'get_retried_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    max_number_of_attempts: int, scheduled_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    completed_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    failed_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    action: azure.durable_functions.models.actions.Action.Action) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of scheduling some task for execution with retry options.
  syntax:
    content: 'get_retried_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      max_number_of_attempts: int, scheduled_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
      completed_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
      failed_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
      action: azure.durable_functions.models.actions.Action.Action) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: The list of history events
      id: state
      type:
      - List[HistoryEvent]
    - description: The maximum number of retrying attempts
      id: max_number_of_ints
      type:
      - int
    - description: The event type corresponding to scheduling the searched-for task
      id: scheduled_type
      type:
      - HistoryEventType
    - description: The event type corresponding to a completion of the searched-for
        task
      id: completed_type
      type:
      - HistoryEventType
    - description: The event type coresponding to the failure of the searched-for
        task
      id: failed_type
      type:
      - HistoryEventType
    - description: The action corresponding to the searched-for task
      id: action
      type:
      - Action
    return:
      description: 'A Task encompassing the state of the scheduled work item, that
        is,

        either completed, failed, or incomplete.'
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.task_utilities.get_retried_task
- fullName: azure.durable_functions.tasks.task_utilities.parse_history_event
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: parse_history_event(directive_result)
  summary: Based on the type of event, parse the JSON.serializable portion of the
    event.
  syntax:
    content: parse_history_event(directive_result)
    parameters:
    - id: directive_result
  type: function
  uid: azure.durable_functions.tasks.task_utilities.parse_history_event
- fullName: azure.durable_functions.tasks.task_utilities.set_processed
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: set_processed(tasks)
  summary: 'Set the isProcessed attribute of all of the tasks to true.


    This provides the ability to not look at events that have already been processed
    within

    searching the history of events.'
  syntax:
    content: set_processed(tasks)
    parameters:
    - id: tasks
  type: function
  uid: azure.durable_functions.tasks.task_utilities.set_processed
- fullName: azure.durable_functions.tasks.task_utilities.should_suspend
  langs:
  - python
  module: azure.durable_functions.tasks.task_utilities
  name: should_suspend(partial_result) -> bool
  summary: Check the state of the result to determine if the orchestration should
    suspend.
  syntax:
    content: should_suspend(partial_result) -> bool
  type: function
  uid: azure.durable_functions.tasks.task_utilities.should_suspend
references:
- fullName: azure.durable_functions.tasks.task_utilities.find_event_raised
  isExternal: false
  name: find_event_raised(state, name)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_event_raised
- fullName: azure.durable_functions.tasks.task_utilities.find_matching_event
  isExternal: false
  name: 'find_matching_event(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    event_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_matching_event
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration
  isExternal: false
  name: 'find_sub_orchestration(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    event_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    name: typing.Union[str, NoneType] = None, context=None, instance_id: typing.Union[str,
    NoneType] = None, scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_completed
  isExternal: false
  name: 'find_sub_orchestration_completed(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_completed
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_created
  isExternal: false
  name: 'find_sub_orchestration_created(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str, context=None, instance_id: typing.Union[str, NoneType] = None) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_created
- fullName: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_failed
  isExternal: false
  name: 'find_sub_orchestration_failed(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    scheduled_task: typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]) -> typing.Union[azure.durable_functions.models.history.HistoryEvent.HistoryEvent,
    NoneType]'
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_failed
- fullName: azure.durable_functions.tasks.task_utilities.find_task_completed
  isExternal: false
  name: find_task_completed(state, scheduled_task)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_task_completed
- fullName: azure.durable_functions.tasks.task_utilities.find_task_failed
  isExternal: false
  name: find_task_failed(state, scheduled_task)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_task_failed
- fullName: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_created
  isExternal: false
  name: find_task_retry_timer_created(state, failed_task)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_created
- fullName: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_fired
  isExternal: false
  name: find_task_retry_timer_fired(state, retry_timer_created)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_fired
- fullName: azure.durable_functions.tasks.task_utilities.find_task_scheduled
  isExternal: false
  name: find_task_scheduled(state, name)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_task_scheduled
- fullName: azure.durable_functions.tasks.task_utilities.find_task_timer_created
  isExternal: false
  name: find_task_timer_created(state, fire_at)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.find_task_timer_created
- fullName: azure.durable_functions.tasks.task_utilities.get_retried_task
  isExternal: false
  name: 'get_retried_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    max_number_of_attempts: int, scheduled_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    completed_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    failed_type: azure.durable_functions.models.history.HistoryEventType.HistoryEventType,
    action: azure.durable_functions.models.actions.Action.Action) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.get_retried_task
- fullName: azure.durable_functions.tasks.task_utilities.parse_history_event
  isExternal: false
  name: parse_history_event(directive_result)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.parse_history_event
- fullName: azure.durable_functions.tasks.task_utilities.set_processed
  isExternal: false
  name: set_processed(tasks)
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.set_processed
- fullName: azure.durable_functions.tasks.task_utilities.should_suspend
  isExternal: false
  name: should_suspend(partial_result) -> bool
  parent: azure.durable_functions.tasks.task_utilities
  uid: azure.durable_functions.tasks.task_utilities.should_suspend
- fullName: List[HistoryEvent]
  name: List[HistoryEvent]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: HistoryEvent
    name: HistoryEvent
    uid: HistoryEvent
  - fullName: ']'
    name: ']'
  uid: List[HistoryEvent]
- fullName: 'List[HistoryEvent]:'
  name: 'List[HistoryEvent]:'
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: HistoryEvent
    name: HistoryEvent
    uid: HistoryEvent
  - fullName: ']'
    name: ']'
  - fullName: ':'
    name: ':'
    uid: ':'
  uid: 'List[HistoryEvent]:'
- fullName: Optional[HistoryEvent]
  name: Optional[HistoryEvent]
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: HistoryEvent
    name: HistoryEvent
    uid: HistoryEvent
  - fullName: ']'
    name: ']'
  uid: Optional[HistoryEvent]
- fullName: 'Optional[str]:'
  name: 'Optional[str]:'
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ':'
    name: ':'
    uid: ':'
  uid: 'Optional[str]:'
- fullName: Optional['DurableOrchestrationContext']
  name: Optional['DurableOrchestrationContext']
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: '''DurableOrchestrationContext'''
    name: '''DurableOrchestrationContext'''
    uid: '''DurableOrchestrationContext'''
  - fullName: ']'
    name: ']'
  uid: Optional['DurableOrchestrationContext']
- fullName: 'Optional[str], optional:'
  name: 'Optional[str], optional:'
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: 'optional:'
    name: 'optional:'
    uid: 'optional:'
  uid: 'Optional[str], optional:'
- fullName: 'Optional[HistoryEvent]:'
  name: 'Optional[HistoryEvent]:'
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: HistoryEvent
    name: HistoryEvent
    uid: HistoryEvent
  - fullName: ']'
    name: ']'
  - fullName: ':'
    name: ':'
    uid: ':'
  uid: 'Optional[HistoryEvent]:'
- fullName: 'Optional[''DurableOrchestrationContext'']:'
  name: 'Optional[''DurableOrchestrationContext'']:'
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: '''DurableOrchestrationContext'''
    name: '''DurableOrchestrationContext'''
    uid: '''DurableOrchestrationContext'''
  - fullName: ']'
    name: ']'
  - fullName: ':'
    name: ':'
    uid: ':'
  uid: 'Optional[''DurableOrchestrationContext'']:'
