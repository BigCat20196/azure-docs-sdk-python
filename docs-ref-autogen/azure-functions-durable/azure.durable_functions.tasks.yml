### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.durable_functions.tasks.call_activity_task
  - azure.durable_functions.tasks.call_activity_with_retry_task
  - azure.durable_functions.tasks.call_sub_orchestrator_task
  - azure.durable_functions.tasks.call_sub_orchestrator_with_retry_task
  - azure.durable_functions.tasks.call_http
  - azure.durable_functions.tasks.continue_as_new
  - azure.durable_functions.tasks.new_uuid
  - azure.durable_functions.tasks.task_all
  - azure.durable_functions.tasks.task_any
  - azure.durable_functions.tasks.should_suspend
  - azure.durable_functions.tasks.wait_for_external_event_task
  - azure.durable_functions.tasks.create_timer_task
  - azure.durable_functions.tasks.call_activity
  - azure.durable_functions.tasks.call_activity_with_retry
  - azure.durable_functions.tasks.call_http
  - azure.durable_functions.tasks.call_suborchestrator
  - azure.durable_functions.tasks.call_suborchestrator_with_retry
  - azure.durable_functions.tasks.continue_as_new
  - azure.durable_functions.tasks.create_timer
  - azure.durable_functions.tasks.new_uuid
  - azure.durable_functions.tasks.task_all
  - azure.durable_functions.tasks.task_any
  - azure.durable_functions.tasks.task_utilities
  - azure.durable_functions.tasks.timer_task
  - azure.durable_functions.tasks.wait_for_external_event
  fullName: azure.durable_functions.tasks
  kind: import
  langs:
  - python
  module: azure.durable_functions.tasks
  name: tasks
  summary: Contains the definitions for the functions that enable scheduling of activities.
  type: package
  uid: azure.durable_functions.tasks
- fullName: azure.durable_functions.tasks.call_activity_task
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'call_activity_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str, input_: typing.Any = None) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of Scheduling an activity for execution.
  syntax:
    content: 'call_activity_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      name: str, input_: typing.Any = None) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: The list of history events to search to determine the current state
        of the activity.
      id: state
      type:
      - List[HistoryEvent]
    - description: The name of the activity function to schedule.
      id: name
      type:
      - str
    - description: The JSON-serializable input to pass to the activity function.
      id: input
      type:
      - Any
    return:
      description: A Durable Task that completes when the called activity function
        completes or fails.
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.call_activity_task
- fullName: azure.durable_functions.tasks.call_activity_with_retry_task
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'call_activity_with_retry_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
    str, input_: typing.Any = None) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of scheduling an activity for execution with retry
    options.
  syntax:
    content: 'call_activity_with_retry_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
      str, input_: typing.Any = None) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: The list of history events to search to determine the current state
        of the activity.
      id: state
      type:
      - List[HistoryEvent]
    - description: The retry options for the activity function.
      id: retry_options
      type:
      - RetryOptions
    - description: The name of the activity function to call.
      id: name
      type:
      - str
    - description: The JSON-serializable input to pass to the activity function.
      id: input
      type:
      - Any
    return:
      description: 'A Durable Task that completes when the called activity function
        completes or fails

        completely.'
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.call_activity_with_retry_task
- fullName: azure.durable_functions.tasks.call_sub_orchestrator_task
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'call_sub_orchestrator_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of Scheduling a sub-orchestrator for execution.
  syntax:
    content: 'call_sub_orchestrator_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      name: str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
      NoneType] = None) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: A reference to the orchestration context.
      id: context
      type:
      - '''DurableOrchestrationContext'':'
    - description: The list of history events to search to determine the current state
        of the activity.
      id: state
      type:
      - List[HistoryEvent]
    - description: The name of the activity function to schedule.
      id: name
      type:
      - str
    - description: The JSON-serializable input to pass to the activity function. Defaults
        to None.
      id: input
      type:
      - Optional[Any]
    - description: The instance ID of the sub-orchestrator to call. Defaults to "".
      id: instance_id
      type:
      - str
    return:
      description: A Durable Task that completes when the called sub-orchestrator
        completes or fails.
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.call_sub_orchestrator_task
- fullName: azure.durable_functions.tasks.call_sub_orchestrator_with_retry_task
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'call_sub_orchestrator_with_retry_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
    str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of Scheduling a sub-orchestrator for execution, with
    retry options.
  syntax:
    content: 'call_sub_orchestrator_with_retry_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
      str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
      NoneType] = None) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: A reference to the orchestration context.
      id: context
      type:
      - '''DurableOrchestrationContext'':'
    - description: The list of history events to search to determine the current state
        of the activity.
      id: state
      type:
      - List[HistoryEvent]
    - description: The settings for retrying this sub-orchestrator in case of a failure.
      id: retry_options
      type:
      - RetryOptions
    - description: The name of the activity function to schedule.
      id: name
      type:
      - str
    - description: The JSON-serializable input to pass to the activity function. Defaults
        to None.
      id: input
      type:
      - Optional[Any]
    - description: The instance ID of the sub-orchestrator to call. Defaults to "".
      id: instance_id
      type:
      - str
    return:
      description: A Durable Task that completes when the called sub-orchestrator
        completes or fails.
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.call_sub_orchestrator_with_retry_task
- fullName: azure.durable_functions.tasks.call_http
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'call_http(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    method: str, uri: str, content: typing.Union[str, NoneType] = None, headers: typing.Dict[str,
    str] = None, token_source: typing.Union[azure.durable_functions.models.TokenSource.TokenSource,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  summary: Get task used to schedule a durable HTTP call to the specified endpoint.
  syntax:
    content: 'call_http(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      method: str, uri: str, content: typing.Union[str, NoneType] = None, headers:
      typing.Dict[str, str] = None, token_source: typing.Union[azure.durable_functions.models.TokenSource.TokenSource,
      NoneType] = None) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: 'The list of events that have been processed to determine the state
        of the task to be

        scheduled'
      id: state
      type:
      - List[HistoryEvent]
    - description: The HTTP request method.
      id: method
      type:
      - str
    - description: The HTTP request uri.
      id: uri
      type:
      - str
    - description: The HTTP request content.
      id: content
      type:
      - str
    - description: The HTTP request headers.
      id: headers
      type:
      - Dict[str, str]
    - description: The source of OAuth token to add to the request.
      id: token_source
      type:
      - TokenSource
    return:
      description: The durable HTTP request to schedule.
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.call_http
- fullName: azure.durable_functions.tasks.continue_as_new
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'continue_as_new(context, input_: typing.Any = None)'
  summary: Create a new continue as new action.
  syntax:
    content: 'continue_as_new(context, input_: typing.Any = None)'
    parameters:
    - description: The JSON-serializable input to pass to the activity function.
      id: input
      type:
      - Any
  type: function
  uid: azure.durable_functions.tasks.continue_as_new
- fullName: azure.durable_functions.tasks.new_uuid
  langs:
  - python
  module: azure.durable_functions.tasks
  name: new_uuid
  summary: "Create a new UUID that is safe for replay within an orchestration or operation.\n\
    \nThe default implementation of this method creates a name-based UUID\nusing the\
    \ algorithm from RFC 4122 \xA74.3. The name input used to generate\nthis value\
    \ is a combination of the orchestration instance ID and an\ninternally managed\
    \ sequence number."
  syntax:
    parameters:
    - description: 'Provides reference to the instance id, current_utc_datetime and
        a new_uuid_counter

        attribute that is combined together to form that name that is used for the
        V5 UUID.'
      id: context
      type:
      - DurableOrchestrationContext
    return:
      description: New UUID that is safe for replay within an orchestration or operation.
      type:
      - str
  type: function
  uid: azure.durable_functions.tasks.new_uuid
- fullName: azure.durable_functions.tasks.task_all
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'task_all(tasks: typing.List[azure.durable_functions.models.Task.Task])'
  summary: Determine the state of scheduling the activities for execution with retry
    options.
  syntax:
    content: 'task_all(tasks: typing.List[azure.durable_functions.models.Task.Task])'
    parameters:
    - description: The tasks to evaluate their current state.
      id: tasks
      type:
      - List[Task]
    return:
      description: A Durable Task Set that reports the state of running all of the
        tasks within it.
      type:
      - TaskSet
  type: function
  uid: azure.durable_functions.tasks.task_all
- fullName: azure.durable_functions.tasks.task_any
  langs:
  - python
  module: azure.durable_functions.tasks
  name: task_any(tasks)
  summary: Determine whether any of the given tasks is completed.
  syntax:
    content: task_any(tasks)
    parameters:
    - description: The tasks to evaluate their current state.
      id: tasks
      type:
      - Task
    return:
      description: 'Returns a completed Durable Task Set if any of the tasks is completed.

        Returns a not completed Durable Task Set if none of the tasks are completed.

        Returns a faulted Taskset if all tasks are faulted'
      type:
      - TaskSet
  type: function
  uid: azure.durable_functions.tasks.task_any
- fullName: azure.durable_functions.tasks.should_suspend
  langs:
  - python
  module: azure.durable_functions.tasks
  name: should_suspend(partial_result) -> bool
  summary: Check the state of the result to determine if the orchestration should
    suspend.
  syntax:
    content: should_suspend(partial_result) -> bool
  type: function
  uid: azure.durable_functions.tasks.should_suspend
- fullName: azure.durable_functions.tasks.wait_for_external_event_task
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'wait_for_external_event_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str) -> azure.durable_functions.models.Task.Task'
  summary: Determine the state of a task that is waiting for an event to occur.
  syntax:
    content: 'wait_for_external_event_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      name: str) -> azure.durable_functions.models.Task.Task'
    parameters:
    - description: The list of history events to search to determine the current
      id: state
      type:
      - List[HistoryEvent]
    - description: ''
      id: of the task.
      type:
      - state
    - description: The event name of the event that the task is waiting for.
      id: name
      type:
      - str
    return:
      description: 'Returns a completed task if the expected event was raised.

        Returns a not completed task if the expected event has not occurred yet.'
      type:
      - Task
  type: function
  uid: azure.durable_functions.tasks.wait_for_external_event_task
- fullName: azure.durable_functions.tasks.create_timer_task
  langs:
  - python
  module: azure.durable_functions.tasks
  name: 'create_timer_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    fire_at: datetime.datetime) -> azure.durable_functions.tasks.timer_task.TimerTask'
  summary: Durable Timers are used in orchestrator function to implement delays.
  syntax:
    content: 'create_timer_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
      fire_at: datetime.datetime) -> azure.durable_functions.tasks.timer_task.TimerTask'
    parameters:
    - description: The list of history events to search to determine the current state
        of the activity
      id: state
      type:
      - List[HistoryEvent]
    - description: The time interval to fire the timer trigger
      id: fire_at
      type:
      - datetime
    return:
      description: A Durable Timer Task that schedules the timer to wake up the activity
      type:
      - TimerTask
  type: function
  uid: azure.durable_functions.tasks.create_timer_task
references:
- fullName: azure.durable_functions.tasks.call_activity_task
  isExternal: false
  name: 'call_activity_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str, input_: typing.Any = None) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_activity_task
- fullName: azure.durable_functions.tasks.call_activity_with_retry_task
  isExternal: false
  name: 'call_activity_with_retry_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
    str, input_: typing.Any = None) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_activity_with_retry_task
- fullName: azure.durable_functions.tasks.call_sub_orchestrator_task
  isExternal: false
  name: 'call_sub_orchestrator_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_sub_orchestrator_task
- fullName: azure.durable_functions.tasks.call_sub_orchestrator_with_retry_task
  isExternal: false
  name: 'call_sub_orchestrator_with_retry_task(context, state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    retry_options: azure.durable_functions.models.RetryOptions.RetryOptions, name:
    str, input_: typing.Union[typing.Any, NoneType] = None, instance_id: typing.Union[str,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_sub_orchestrator_with_retry_task
- fullName: azure.durable_functions.tasks.call_http
  isExternal: false
  name: 'call_http(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    method: str, uri: str, content: typing.Union[str, NoneType] = None, headers: typing.Dict[str,
    str] = None, token_source: typing.Union[azure.durable_functions.models.TokenSource.TokenSource,
    NoneType] = None) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_http
- fullName: azure.durable_functions.tasks.continue_as_new
  isExternal: false
  name: 'continue_as_new(context, input_: typing.Any = None)'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.continue_as_new
- fullName: azure.durable_functions.tasks.new_uuid
  isExternal: false
  name: new_uuid
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.new_uuid
- fullName: azure.durable_functions.tasks.task_all
  isExternal: false
  name: 'task_all(tasks: typing.List[azure.durable_functions.models.Task.Task])'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.task_all
- fullName: azure.durable_functions.tasks.task_any
  isExternal: false
  name: task_any(tasks)
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.task_any
- fullName: azure.durable_functions.tasks.should_suspend
  isExternal: false
  name: should_suspend(partial_result) -> bool
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.should_suspend
- fullName: azure.durable_functions.tasks.wait_for_external_event_task
  isExternal: false
  name: 'wait_for_external_event_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    name: str) -> azure.durable_functions.models.Task.Task'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.wait_for_external_event_task
- fullName: azure.durable_functions.tasks.create_timer_task
  isExternal: false
  name: 'create_timer_task(state: typing.List[azure.durable_functions.models.history.HistoryEvent.HistoryEvent],
    fire_at: datetime.datetime) -> azure.durable_functions.tasks.timer_task.TimerTask'
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.create_timer_task
- fullName: azure.durable_functions.tasks.call_activity
  isExternal: false
  name: call_activity
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_activity
- fullName: azure.durable_functions.tasks.call_activity_with_retry
  isExternal: false
  name: call_activity_with_retry
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_activity_with_retry
- fullName: azure.durable_functions.tasks.call_http
  isExternal: false
  name: call_http
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_http
- fullName: azure.durable_functions.tasks.call_suborchestrator
  isExternal: false
  name: call_suborchestrator
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_suborchestrator
- fullName: azure.durable_functions.tasks.call_suborchestrator_with_retry
  isExternal: false
  name: call_suborchestrator_with_retry
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.call_suborchestrator_with_retry
- fullName: azure.durable_functions.tasks.continue_as_new
  isExternal: false
  name: continue_as_new
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.continue_as_new
- fullName: azure.durable_functions.tasks.create_timer
  isExternal: false
  name: create_timer
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.create_timer
- fullName: azure.durable_functions.tasks.new_uuid
  isExternal: false
  name: new_uuid
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.new_uuid
- fullName: azure.durable_functions.tasks.task_all
  isExternal: false
  name: task_all
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.task_all
- fullName: azure.durable_functions.tasks.task_any
  isExternal: false
  name: task_any
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.task_any
- fullName: azure.durable_functions.tasks.task_utilities
  isExternal: false
  name: task_utilities
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.task_utilities
- fullName: azure.durable_functions.tasks.timer_task
  isExternal: false
  name: timer_task
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.timer_task
- fullName: azure.durable_functions.tasks.wait_for_external_event
  isExternal: false
  name: wait_for_external_event
  parent: azure.durable_functions.tasks
  uid: azure.durable_functions.tasks.wait_for_external_event
- fullName: List[HistoryEvent]
  name: List[HistoryEvent]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: HistoryEvent
    name: HistoryEvent
    uid: HistoryEvent
  - fullName: ']'
    name: ']'
  uid: List[HistoryEvent]
- fullName: Optional[Any]
  name: Optional[Any]
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Optional[Any]
- fullName: Dict[str, str]
  name: Dict[str, str]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: Dict[str, str]
- fullName: List[Task]
  name: List[Task]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: Task
    name: Task
    uid: Task
  - fullName: ']'
    name: ']'
  uid: List[Task]
