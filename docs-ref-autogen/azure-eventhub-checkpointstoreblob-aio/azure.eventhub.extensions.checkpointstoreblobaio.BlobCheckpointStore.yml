### YamlMime:PythonClass
uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
name: BlobCheckpointStore
fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
module: azure.eventhub.extensions.checkpointstoreblobaio
inheritances:
- azure.eventhub.aio._eventprocessor.checkpoint_store.CheckpointStore
summary: 'A CheckpointStore that uses Azure Blob Storage to store the partition ownership
  and checkpoint data.


  This class implements methods list_ownership, claim_ownership, update_checkpoint
  and list_checkpoints that are

  defined in class azure.eventhub.aio.CheckpointStore of package azure-eventhub.'
constructor:
  syntax: BlobCheckpointStore(blob_account_url, container_name, *, credential=None,
    **kwargs)
  parameters:
  - name: blob_account_url
    description: The URI to the storage account.
    types:
    - <xref:str>
  - name: container_name
    description: The name of the container for the blobs.
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string, an
      account

      shared access key, or an instance of a TokenCredentials class from azure.identity.

      If the URL already has a SAS token, specifying an explicit credential will take
      priority.'
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2019-07-07'.
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
methods:
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
  name: claim_ownership
  signature: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
    -> typing.Iterable[typing.Dict[str, typing.Any]]'
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
  name: close
  summary: Close an open HTTP session and connection.
  signature: close() -> None
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
  name: from_connection_string
  summary: Create BlobCheckpointStore from a storage connection string.
  signature: from_connection_string(conn_str, container_name, *, credential=None,
    **kwargs)
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The container name for the blobs.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string, an account shared access

      key, or an instance of a TokenCredentials class from azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.'
    isRequired: true
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2019-07-07'.
    isRequired: true
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A blob checkpoint store.
    types:
    - <xref:azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore>
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
  name: list_checkpoints
  signature: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  parameters:
  - name: fully_qualified_namespace
    isRequired: true
  - name: eventhub_name
    isRequired: true
  - name: consumer_group
    isRequired: true
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
  name: list_ownership
  signature: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
    str) -> typing.Iterable[typing.Dict[str, typing.Any]]'
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
  name: update_checkpoint
  signature: 'update_checkpoint(checkpoint: typing.Dict[str, typing.Any]) -> None'
