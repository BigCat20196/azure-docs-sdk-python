### YamlMime:PythonClass
uid: azure.identity.TokenCachePersistenceOptions
name: TokenCachePersistenceOptions
fullName: azure.identity.TokenCachePersistenceOptions
module: azure.identity
inheritances:
- builtins.object
summary: "Options for persistent token caching.\n\nMost credentials accept an instance\
  \ of this class to configure persistent token caching. The default values\nconfigure\
  \ a credential to use a cache shared with Microsoft developer tools and\n<xref:azure.identity.SharedTokenCacheCredential>.\
  \ To isolate a credential's data from other applications,\nspecify a *name* for\
  \ the cache.\n\nBy default, the cache is encrypted with the current platform's user\
  \ data protection API, and will raise an error\nwhen this is not available. To configure\
  \ the cache to fall back to an unencrypted file instead of raising an\nerror, specify\
  \ *allow_unencrypted_storage=True*.\n\n\n> [!WARNING]\n> The cache contains authentication\
  \ secrets. If the cache is not encrypted, protecting it is the\n>\n> application's\
  \ responsibility. A breach of its contents will fully compromise accounts.\n>\n\
  > \n>\n> Configuring a credential for persistent caching\n>\n> \n>\n> cache_options\
  \ = TokenCachePersistenceOptions()\n>\n> credential = InteractiveBrowserCredential(cache_persistence_options=cache_options)\n\
  >\n> \n>\n> # specify a cache name to isolate the cache from other applications\n\
  >\n> TokenCachePersistenceOptions(name=\"my_application\")\n>\n> \n>\n> # configure\
  \ the cache to fall back to unencrypted storage when encryption isn't available\n\
  >\n> TokenCachePersistenceOptions(allow_unencrypted_storage=True)\n>\n> \n>"
constructor:
  syntax: TokenCachePersistenceOptions(**kwargs)
