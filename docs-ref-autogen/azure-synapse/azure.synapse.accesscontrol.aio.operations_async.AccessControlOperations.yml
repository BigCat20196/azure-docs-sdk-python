### YamlMime:PythonClass
uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations
name: AccessControlOperations
fullName: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations
module: azure.synapse.accesscontrol.aio.operations_async
inheritances:
- builtins.object
summary: 'AccessControlOperations async operations.


  You should not instantiate this class directly. Instead, you should create a Client
  instance that

  instantiates it for you and attaches it as an attribute.'
constructor:
  syntax: AccessControlOperations(client, config, serializer, deserializer) -> None
  parameters:
  - name: client
    description: Client for service requests.
  - name: config
    description: Configuration of service client.
  - name: serializer
    description: An object model serializer.
  - name: deserializer
    description: An object model deserializer.
variables:
- description: Alias to model classes used in this operation group.
  name: "models \u2013 Alias to model classes used in this operation group"
methods:
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.create_role_assignment
  name: create_role_assignment
  summary: Create role assignment.
  signature: 'create_role_assignment(create_role_assignment_options: models.RoleAssignmentOptions,
    **kwargs) -> ''models.RoleAssignmentDetails'''
  parameters:
  - name: create_role_assignment_options
    description: Details of role id and object id.
    isRequired: true
    types:
    - <xref:azure.synapse.accesscontrol.models.RoleAssignmentOptions>
  return:
    description: RoleAssignmentDetails, or the result of cls(response)
    types:
    - <xref:azure.synapse.accesscontrol.models.RoleAssignmentDetails>
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.delete_role_assignment_by_id
  name: delete_role_assignment_by_id
  summary: Delete role assignment by role assignment Id.
  signature: 'delete_role_assignment_by_id(role_assignment_id: str, **kwargs) -> None'
  parameters:
  - name: role_assignment_id
    description: The ID of the role assignment.
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: None, or the result of cls(response)
    types:
    - '[None](https://docs.python.org/3.6/library/constants.html#None)'
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.get_caller_role_assignments
  name: get_caller_role_assignments
  summary: List role assignments of the caller.
  signature: get_caller_role_assignments(**kwargs) -> List[str]
  return:
    description: list of str, or the result of cls(response)
    types:
    - '[list](https://docs.python.org/3.6/library/stdtypes.html#list)[[str](https://docs.python.org/3.6/library/stdtypes.html#str)]'
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.get_role_assignment_by_id
  name: get_role_assignment_by_id
  summary: Get role assignment by role assignment Id.
  signature: 'get_role_assignment_by_id(role_assignment_id: str, **kwargs) -> ''models.RoleAssignmentDetails'''
  parameters:
  - name: role_assignment_id
    description: The ID of the role assignment.
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: RoleAssignmentDetails, or the result of cls(response)
    types:
    - <xref:azure.synapse.accesscontrol.models.RoleAssignmentDetails>
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.get_role_assignments
  name: get_role_assignments
  summary: List role assignments.
  signature: 'get_role_assignments(role_id: Optional[str] = None, principal_id: Optional[str]
    = None, continuation_token_parameter: Optional[str] = None, **kwargs) -> List[_ForwardRef(''models.RoleAssignmentDetails'')]'
  parameters:
  - name: role_id
    description: Synapse Built-In Role Id.
    defaultValue: None
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: principal_id
    description: Object ID of the AAD principal or security-group.
    defaultValue: None
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: continuation_token_parameter
    description: Continuation token.
    defaultValue: None
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: list of RoleAssignmentDetails, or the result of cls(response)
    types:
    - '[list](https://docs.python.org/3.6/library/stdtypes.html#list)[<xref:azure.synapse.accesscontrol.models.RoleAssignmentDetails>]'
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.get_role_definition_by_id
  name: get_role_definition_by_id
  summary: Get role by role Id.
  signature: 'get_role_definition_by_id(role_id: str, **kwargs) -> ''models.SynapseRole'''
  parameters:
  - name: role_id
    description: Synapse Built-In Role Id.
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: SynapseRole, or the result of cls(response)
    types:
    - <xref:azure.synapse.accesscontrol.models.SynapseRole>
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.get_role_definitions
  name: get_role_definitions
  summary: List roles.
  signature: get_role_definitions(**kwargs) -> AsyncIterable[_ForwardRef('models.RolesListResponse')]
  return:
    description: An iterator like instance of either RolesListResponse or the result
      of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.synapse.accesscontrol.models.RolesListResponse>]
attributes:
- uid: azure.synapse.accesscontrol.aio.operations_async.AccessControlOperations.models
  name: models
  signature: models = <module 'azure.synapse.accesscontrol.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\synapse\\accesscontrol\\models\\__init__.py'>
