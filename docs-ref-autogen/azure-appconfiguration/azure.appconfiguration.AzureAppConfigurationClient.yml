### YamlMime:PythonClass
uid: azure.appconfiguration.AzureAppConfigurationClient
name: AzureAppConfigurationClient
fullName: azure.appconfiguration.AzureAppConfigurationClient
module: azure.appconfiguration
inheritances:
- builtins.object
summary: Represents an client that calls restful API of Azure App Configuration service.
constructor:
  syntax: AzureAppConfigurationClient(base_url, credential, **kwargs)
  parameters:
  - name: base_url
    description: base url of the service
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: credential
    description: An object which can provide secrets for the app configuration service
    types:
    - <xref:azure.AppConfigConnectionStringCredential>
methods:
- uid: azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
  name: add_configuration_setting
  summary: "Add a ConfigurationSetting into the Azure App Configuration service.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   config_setting = ConfigurationSetting(\n       key=\"\
    MyKey\",\n       label=\"MyLabel\",\n       value=\"my value\",\n       content_type=\"\
    my content type\",\n       tags={\"my tag\": \"my tag value\"}\n   )\n   added_config_setting\
    \ = client.add_configuration_setting(config_setting)\n   ````"
  signature: add_configuration_setting(configuration_setting, **kwargs)
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting object to be added
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  return:
    description: The ConfigurationSetting object returned from the App Configuration
      service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
- uid: azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
  name: delete_configuration_setting
  summary: "Delete a ConfigurationSetting if it exists\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   deleted_config_setting\
    \ = client.delete_configuration_setting(\n       key=\"MyKey\", label=\"MyLabel\"\
    \n   )\n   ````"
  signature: delete_configuration_setting(key, label=None, **kwargs)
  parameters:
  - name: key
    description: key used to identify the ConfigurationSetting
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: label
    description: label used to identify the ConfigurationSetting
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: The deleted ConfigurationSetting returned from the service, or None
      if it doesn't exist.
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
- uid: azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
  name: from_connection_string
  summary: "Create AzureAppConfigurationClient from a Connection String.\n\n   param\
    \ connection_string:\n      Connection String\n      (one of the access keys of\
    \ the Azure App Configuration resource)\n      used to access the Azure App Configuration.\n\
    \n   type connection_string:\n      str\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.appconfiguration\
    \ import AzureAppConfigurationClient\n   connection_str = \"<my connection string>\"\
    \n   client = AzureAppConfigurationClient.from_connection_string(connection_str)\n\
    \   ````"
  signature: from_connection_string(connection_string, **kwargs)
  parameters:
  - name: cls
    isRequired: true
  - name: connection_string
    isRequired: true
- uid: azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
  name: get_configuration_setting
  summary: "Get the matched ConfigurationSetting from Azure App Configuration service\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   fetched_config_setting = client.get_configuration_setting(\n\
    \       key=\"MyKey\", label=\"MyLabel\"\n   )\n   ````"
  signature: 'get_configuration_setting(key, label=None, etag=''*'', match_condition=<MatchConditions.Unconditionally:
    1>, **kwargs)'
  parameters:
  - name: key
    description: key of the ConfigurationSetting
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: label
    description: label of the ConfigurationSetting
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str) or [None](https://docs.python.org/3.6/library/constants.html#None)'
  - name: match_condition
    description: the match condition to use upon the etag
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: The matched ConfigurationSetting object
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
- uid: azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
  name: list_configuration_settings
  summary: "List the configuration settings stored in the configuration service, optionally\
    \ filtered by\nlabel and accept_datetime\n\nExample\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n\n   accept_datetime = datetime.today() + timedelta(days=-1)\n\
    \n   all_listed = client.list_configuration_settings()\n   for item in all_listed:\n\
    \       pass  # do something\n\n   filtered_listed = client.list_configuration_settings(\n\
    \       label_filter=\"Labe*\", key_filter=\"Ke*\", accept_datetime=accept_datetime\n\
    \   )\n   for item in filtered_listed:\n       pass  # do something\n   ````"
  signature: list_configuration_settings(key_filter=None, label_filter=None, **kwargs)
  parameters:
  - name: key_filter
    description: 'filter results based on their keys. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: label_filter
    description: 'filter results based on their label. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
    types:
    - <xref:azure.core.paging.ItemPaged[ConfigurationSetting]>
- uid: azure.appconfiguration.AzureAppConfigurationClient.list_revisions
  name: list_revisions
  summary: "Find the ConfigurationSetting revision history.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n\n   accept_datetime = datetime.today() + timedelta(days=-1)\n\
    \n   all_revisions = client.list_revisions()\n   for item in all_revisions:\n\
    \       pass  # do something\n\n   filtered_revisions = client.list_revisions(\n\
    \       label_filter=\"Labe*\", key_filter=\"Ke*\", accept_datetime=accept_datetime\n\
    \   )\n   for item in filtered_revisions:\n       pass  # do something\n   ````"
  signature: list_revisions(key_filter=None, label_filter=None, **kwargs)
  parameters:
  - name: key_filter
    description: 'filter results based on their keys. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: label_filter
    description: 'filter results based on their label. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
    types:
    - <xref:azure.core.paging.ItemPaged[ConfigurationSetting]>
- uid: azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
  name: set_configuration_setting
  summary: "Add or update a ConfigurationSetting.\nIf the configuration setting identified\
    \ by key and label does not exist, this is a create.\nOtherwise this is an update.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   config_setting = ConfigurationSetting(\n       key=\"\
    MyKey\",\n       label=\"MyLabel\",\n       value=\"my set value\",\n       content_type=\"\
    my set content type\",\n       tags={\"my set tag\": \"my set tag value\"}\n \
    \  )\n   returned_config_setting = client.set_configuration_setting(config_setting)\n\
    \   ````"
  signature: 'set_configuration_setting(configuration_setting, match_condition=<MatchConditions.Unconditionally:
    1>, **kwargs)'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting to be added (if not exists)         or updated
      (if exists) to the service
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  - name: match_condition
    description: the match condition to use upon the etag
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: The ConfigurationSetting returned from the service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
- uid: azure.appconfiguration.AzureAppConfigurationClient.set_read_only
  name: set_read_only
  summary: "Set a configuration setting read only\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   config_setting\
    \ = client.get_configuration_setting(\n       key=\"MyKey\", label=\"MyLabel\"\
    \n   )\n\n   read_only_config_setting = client.set_read_only(config_setting)\n\
    \   read_only_config_setting = client.set_read_only(config_setting, read_only=False)\n\
    \   ````"
  signature: set_read_only(configuration_setting, read_only=True, **kwargs)
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting to be set read only
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  - name: read_only
    description: set the read only setting if true, else clear the read only setting
    isRequired: true
    types:
    - '[bool](https://docs.python.org/3.6/library/functions.html#bool)'
  return:
    description: The ConfigurationSetting returned from the service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
