### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.datafactory.models.AvroWriteSettings
  fullName: azure.mgmt.datafactory.models.AvroWriteSettings
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: msrest.serialization.Model
    type: azure.mgmt.datafactory.models._models_py3.FormatWriteSettings
  langs:
  - python
  module: azure.mgmt.datafactory.models
  name: AvroWriteSettings
  summary: 'Avro write settings.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: 'AvroWriteSettings(*, additional_properties=None, record_name: str =
      None, record_namespace: str = None, max_rows_per_file=None, file_name_prefix=None,
      **kwargs) -> None'
    parameters:
    - description: 'Unmatched properties from the message are

        deserialized this collection'
      id: additional_properties
      type:
      - dict[str, object]
    - description: Required. Constant filled by server.
      id: type
      type:
      - str
    - description: 'Top level record name in write result, which is

        required in AVRO spec.'
      id: record_name
      type:
      - str
    - description: Record namespace in the write result.
      id: record_namespace
      type:
      - str
    - description: 'Limit the written file''s row count to be smaller

        than or equal to the specified count. Type: integer (or Expression with

        resultType integer).'
      id: max_rows_per_file
      type:
      - object
    - description: 'Specifies the file name pattern

        <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based

        store without partitionOptions. Type: string (or Expression with

        resultType string).'
      id: file_name_prefix
      type:
      - object
  type: class
  uid: azure.mgmt.datafactory.models.AvroWriteSettings
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
