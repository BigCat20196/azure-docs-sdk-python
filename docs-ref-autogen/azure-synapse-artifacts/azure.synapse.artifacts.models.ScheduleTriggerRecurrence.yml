### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.synapse.artifacts.models.ScheduleTriggerRecurrence
  fullName: azure.synapse.artifacts.models.ScheduleTriggerRecurrence
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.synapse.artifacts.models
  name: ScheduleTriggerRecurrence
  summary: The workflow trigger recurrence.
  syntax:
    content: 'ScheduleTriggerRecurrence(*, additional_properties: typing.Union[typing.Dict[str,
      object], NoneType] = None, frequency: typing.Union[str, _ForwardRef(''RecurrenceFrequency''),
      NoneType] = None, interval: typing.Union[int, NoneType] = None, start_time:
      typing.Union[datetime.datetime, NoneType] = None, end_time: typing.Union[datetime.datetime,
      NoneType] = None, time_zone: typing.Union[str, NoneType] = None, schedule: typing.Union[_ForwardRef(''RecurrenceSchedule''),
      NoneType] = None, **kwargs)'
    parameters:
    - description: 'Unmatched properties from the message are deserialized to this

        collection.'
      id: additional_properties
      type:
      - dict[str, object]
    - description: 'The frequency. Possible values include: "NotSpecified", "Minute",
        "Hour",

        "Day", "Week", "Month", "Year".'
      id: frequency
      type:
      - str
      - azure.synapse.artifacts.models.RecurrenceFrequency
    - description: The interval.
      id: interval
      type:
      - int
    - description: The start time.
      id: start_time
      type:
      - datetime.datetime
    - description: The end time.
      id: end_time
      type:
      - datetime.datetime
    - description: The time zone.
      id: time_zone
      type:
      - str
    - description: The recurrence schedule.
      id: schedule
      type:
      - azure.synapse.artifacts.models.RecurrenceSchedule
  type: class
  uid: azure.synapse.artifacts.models.ScheduleTriggerRecurrence
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
