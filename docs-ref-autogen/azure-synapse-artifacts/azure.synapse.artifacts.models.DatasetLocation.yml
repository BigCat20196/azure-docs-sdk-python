### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.synapse.artifacts.models.DatasetLocation
  fullName: azure.synapse.artifacts.models.DatasetLocation
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.synapse.artifacts.models
  name: DatasetLocation
  summary: 'Dataset location.


    You probably want to use the sub-classes and not this class directly. Known

    sub-classes are: AmazonS3Location, AzureBlobFSLocation, AzureBlobStorageLocation,
    AzureDataLakeStoreLocation, AzureFileStorageLocation, FileServerLocation, FtpServerLocation,
    GoogleCloudStorageLocation, HdfsLocation, HttpServerLocation, SftpLocation.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: 'DatasetLocation(*, additional_properties: typing.Union[typing.Dict[str,
      object], NoneType] = None, folder_path: object = None, file_name: object = None,
      **kwargs)'
    parameters:
    - description: 'Unmatched properties from the message are deserialized to this

        collection.'
      id: additional_properties
      type:
      - dict[str, object]
    - description: Required. Type of dataset storage location.Constant filled by server.
      id: type
      type:
      - str
    - description: 'Specify the folder path of dataset. Type: string (or Expression
        with

        resultType string).'
      id: folder_path
      type:
      - object
    - description: 'Specify the file name of dataset. Type: string (or Expression
        with resultType

        string).'
      id: file_name
      type:
      - object
  type: class
  uid: azure.synapse.artifacts.models.DatasetLocation
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
