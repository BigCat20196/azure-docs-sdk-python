### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.synapse.artifacts.models.SparkJobDefinition
  fullName: azure.synapse.artifacts.models.SparkJobDefinition
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.synapse.artifacts.models
  name: SparkJobDefinition
  summary: 'Spark job definition.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: 'SparkJobDefinition(*, target_big_data_pool: azure.synapse.artifacts.models._models_py3.BigDataPoolReference,
      job_properties: azure.synapse.artifacts.models._models_py3.SparkJobProperties,
      additional_properties: typing.Union[typing.Dict[str, object], NoneType] = None,
      description: typing.Union[str, NoneType] = None, required_spark_version: typing.Union[str,
      NoneType] = None, language: typing.Union[str, NoneType] = None, **kwargs)'
    parameters:
    - description: 'Unmatched properties from the message are deserialized to this

        collection.'
      id: additional_properties
      type:
      - dict[str, object]
    - description: The description of the Spark job definition.
      id: description
      type:
      - str
    - description: Required. Big data pool reference.
      id: target_big_data_pool
      type:
      - azure.synapse.artifacts.models.BigDataPoolReference
    - description: The required Spark version of the application.
      id: required_spark_version
      type:
      - str
    - description: The language of the Spark application.
      id: language
      type:
      - str
    - description: Required. The properties of the Spark job.
      id: job_properties
      type:
      - azure.synapse.artifacts.models.SparkJobProperties
  type: class
  uid: azure.synapse.artifacts.models.SparkJobDefinition
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
