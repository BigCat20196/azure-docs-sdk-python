### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_create_or_update_linked_service
  - azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_delete_linked_service
  - azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_service
  - azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_services_by_workspace
  - azure.synapse.artifacts.aio.operations.LinkedServiceOperations.models
  class: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.synapse.artifacts.aio.operations
  name: LinkedServiceOperations
  summary: 'LinkedServiceOperations async operations.


    You should not instantiate this class directly. Instead, you should create a Client
    instance that

    instantiates it for you and attaches it as an attribute.'
  syntax:
    content: LinkedServiceOperations(client, config, serializer, deserializer) ->
      None
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
    variables:
    - description: Alias to model classes used in this operation group.
      id: models
  type: class
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
- class: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_create_or_update_linked_service
  langs:
  - python
  module: azure.synapse.artifacts.aio.operations
  name: 'begin_create_or_update_linked_service(linked_service_name: str, properties:
    azure.synapse.artifacts.models._models_py3.LinkedService, if_match: typing.Union[str,
    NoneType] = None, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[_ForwardRef(''models.LinkedServiceResource'')]'
  namewithoutparameters: begin_create_or_update_linked_service
  summary: Creates or updates a linked service.
  syntax:
    content: 'begin_create_or_update_linked_service(linked_service_name: str, properties:
      azure.synapse.artifacts.models._models_py3.LinkedService, if_match: typing.Union[str,
      NoneType] = None, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[_ForwardRef(''models.LinkedServiceResource'')]'
    parameters:
    - description: The linked service name.
      id: linked_service_name
      isRequired: true
      type:
      - str
    - description: Properties of linked service.
      id: properties
      isRequired: true
      type:
      - azure.synapse.artifacts.models.LinkedService
    - description: 'ETag of the linkedService entity.  Should only be specified for
        update, for

        which it should match existing entity or can be * for unconditional update.'
      id: if_match
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    - description: A continuation token to restart a poller from a saved state.
      id: continuation_token
      isRequired: true
      type:
      - str
    - description: 'True for ARMPolling, False for no polling, or a

        polling object for personal polling strategy'
      id: polling
      isRequired: true
      type:
      - bool
      - azure.core.polling.AsyncPollingMethod
    - description: Default waiting time between two polls for LRO operations if no
        Retry-After header is present.
      id: polling_interval
      isRequired: true
      type:
      - int
    return:
      description: An instance of AsyncLROPoller that returns either LinkedServiceResource
        or the result of cls(response)
      type:
      - azure.core.polling.AsyncLROPoller[azure.synapse.artifacts.models.LinkedServiceResource]
  type: method
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_create_or_update_linked_service
- class: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_delete_linked_service
  langs:
  - python
  module: azure.synapse.artifacts.aio.operations
  name: 'begin_delete_linked_service(linked_service_name: str, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[NoneType]'
  namewithoutparameters: begin_delete_linked_service
  summary: Deletes a linked service.
  syntax:
    content: 'begin_delete_linked_service(linked_service_name: str, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[NoneType]'
    parameters:
    - description: The linked service name.
      id: linked_service_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    - description: A continuation token to restart a poller from a saved state.
      id: continuation_token
      isRequired: true
      type:
      - str
    - description: 'True for ARMPolling, False for no polling, or a

        polling object for personal polling strategy'
      id: polling
      isRequired: true
      type:
      - bool
      - azure.core.polling.AsyncPollingMethod
    - description: Default waiting time between two polls for LRO operations if no
        Retry-After header is present.
      id: polling_interval
      isRequired: true
      type:
      - int
    return:
      description: An instance of AsyncLROPoller that returns either None or the result
        of cls(response)
      type:
      - azure.core.polling.AsyncLROPoller[None]
  type: method
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_delete_linked_service
- class: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_service
  langs:
  - python
  module: azure.synapse.artifacts.aio.operations
  name: 'get_linked_service(linked_service_name: str, if_none_match: typing.Union[str,
    NoneType] = None, **kwargs) -> typing.Union[_ForwardRef(''models.LinkedServiceResource''),
    NoneType]'
  namewithoutparameters: get_linked_service
  summary: Gets a linked service.
  syntax:
    content: 'get_linked_service(linked_service_name: str, if_none_match: typing.Union[str,
      NoneType] = None, **kwargs) -> typing.Union[_ForwardRef(''models.LinkedServiceResource''),
      NoneType]'
    parameters:
    - description: The linked service name.
      id: linked_service_name
      isRequired: true
      type:
      - str
    - description: 'ETag of the linked service entity. Should only be specified for
        get. If

        the ETag matches the existing entity tag, or if * was provided, then no content
        will be

        returned.'
      id: if_none_match
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: LinkedServiceResource, or the result of cls(response)
      type:
      - azure.synapse.artifacts.models.LinkedServiceResource
      - None
  type: method
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_service
- class: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_services_by_workspace
  langs:
  - python
  module: azure.synapse.artifacts.aio.operations
  name: get_linked_services_by_workspace(**kwargs) -> typing.AsyncIterable[_ForwardRef('models.LinkedServiceListResponse')]
  namewithoutparameters: get_linked_services_by_workspace
  summary: Lists linked services.
  syntax:
    content: get_linked_services_by_workspace(**kwargs) -> typing.AsyncIterable[_ForwardRef('models.LinkedServiceListResponse')]
    parameters:
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: An iterator like instance of either LinkedServiceListResponse or
        the result of cls(response)
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.synapse.artifacts.models.LinkedServiceListResponse]
  type: method
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_services_by_workspace
- class: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.models
  langs:
  - python
  module: azure.synapse.artifacts.aio.operations
  name: models
  syntax:
    content: models = <module 'azure.synapse.artifacts.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\synapse\\artifacts\\models\\__init__.py'>
  type: attribute
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.models
references:
- fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_create_or_update_linked_service
  isExternal: false
  name: 'begin_create_or_update_linked_service(linked_service_name: str, properties:
    azure.synapse.artifacts.models._models_py3.LinkedService, if_match: typing.Union[str,
    NoneType] = None, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[_ForwardRef(''models.LinkedServiceResource'')]'
  parent: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_create_or_update_linked_service
- fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_delete_linked_service
  isExternal: false
  name: 'begin_delete_linked_service(linked_service_name: str, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[NoneType]'
  parent: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.begin_delete_linked_service
- fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_service
  isExternal: false
  name: 'get_linked_service(linked_service_name: str, if_none_match: typing.Union[str,
    NoneType] = None, **kwargs) -> typing.Union[_ForwardRef(''models.LinkedServiceResource''),
    NoneType]'
  parent: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_service
- fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_services_by_workspace
  isExternal: false
  name: get_linked_services_by_workspace(**kwargs) -> typing.AsyncIterable[_ForwardRef('models.LinkedServiceListResponse')]
  parent: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.get_linked_services_by_workspace
- fullName: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.models
  isExternal: false
  name: models
  parent: azure.synapse.artifacts.aio.operations.LinkedServiceOperations
  uid: azure.synapse.artifacts.aio.operations.LinkedServiceOperations.models
- fullName: azure.core.polling.AsyncLROPoller[azure.synapse.artifacts.models.LinkedServiceResource]
  name: AsyncLROPoller[LinkedServiceResource]
  spec.python:
  - fullName: azure.core.polling.AsyncLROPoller
    name: AsyncLROPoller
    uid: azure.core.polling.AsyncLROPoller
  - fullName: '['
    name: '['
  - fullName: azure.synapse.artifacts.models.LinkedServiceResource
    name: LinkedServiceResource
    uid: azure.synapse.artifacts.models.LinkedServiceResource
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.AsyncLROPoller[azure.synapse.artifacts.models.LinkedServiceResource]
- fullName: azure.core.polling.AsyncLROPoller[None]
  name: AsyncLROPoller[None]
  spec.python:
  - fullName: azure.core.polling.AsyncLROPoller
    name: AsyncLROPoller
    uid: azure.core.polling.AsyncLROPoller
  - fullName: '['
    name: '['
  - fullName: None
    name: None
    uid: None
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.AsyncLROPoller[None]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.synapse.artifacts.models.LinkedServiceListResponse]
  name: AsyncItemPaged[LinkedServiceListResponse]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.synapse.artifacts.models.LinkedServiceListResponse
    name: LinkedServiceListResponse
    uid: azure.synapse.artifacts.models.LinkedServiceListResponse
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.synapse.artifacts.models.LinkedServiceListResponse]
