### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.iot.device.aio.IoTHubModuleClient.connect
  - azure.iot.device.aio.IoTHubModuleClient.create_from_connection_string
  - azure.iot.device.aio.IoTHubModuleClient.create_from_edge_environment
  - azure.iot.device.aio.IoTHubModuleClient.create_from_x509_certificate
  - azure.iot.device.aio.IoTHubModuleClient.disconnect
  - azure.iot.device.aio.IoTHubModuleClient.get_twin
  - azure.iot.device.aio.IoTHubModuleClient.invoke_method
  - azure.iot.device.aio.IoTHubModuleClient.on_message_received
  - azure.iot.device.aio.IoTHubModuleClient.patch_twin_reported_properties
  - azure.iot.device.aio.IoTHubModuleClient.receive_message_on_input
  - azure.iot.device.aio.IoTHubModuleClient.receive_method_request
  - azure.iot.device.aio.IoTHubModuleClient.receive_twin_desired_properties_patch
  - azure.iot.device.aio.IoTHubModuleClient.send_message
  - azure.iot.device.aio.IoTHubModuleClient.send_message_to_output
  - azure.iot.device.aio.IoTHubModuleClient.send_method_response
  class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubClient
    type: azure.iot.device.iothub.aio.async_clients.GenericIoTHubClient
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubClient
    type: azure.iot.device.iothub.abstract_clients.AbstractIoTHubModuleClient
  langs:
  - python
  module: azure.iot.device.aio
  name: IoTHubModuleClient
  summary: 'An asynchronous module client that connects to an Azure IoT Hub or Azure
    IoT Edge instance.


    Intended for usage with Python 3.5.3+'
  syntax:
    content: IoTHubModuleClient(mqtt_pipeline, http_pipeline)
  type: class
  uid: azure.iot.device.aio.IoTHubModuleClient
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.connect
  langs:
  - python
  module: azure.iot.device.aio
  name: connect()
  namewithoutparameters: connect
  summary: 'Connects the client to an Azure IoT Hub or Azure IoT Edge Hub instance.


    The destination is chosen based on the credentials passed via the auth_provider
    parameter

    that was provided when this object was initialized.'
  syntax:
    content: connect()
    parameters: []
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.connect
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.create_from_connection_string
  langs:
  - python
  module: azure.iot.device.aio
  name: create_from_connection_string(connection_string, **kwargs)
  namewithoutparameters: create_from_connection_string
  summary: 'Instantiate the client from a IoTHub device or module connection string.



    broker. If no other messages are being exchanged, this controls the

    rate at which the client will send ping messages to the broker.

    If not provided default value of 60 secs will be used.'
  syntax:
    content: create_from_connection_string(connection_string, **kwargs)
    parameters:
    - id: cls
      isRequired: true
    - id: connection_string
      isRequired: true
    return:
      description: An instance of an IoTHub client that uses a connection string for
        authentication.
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.create_from_connection_string
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.create_from_edge_environment
  langs:
  - python
  module: azure.iot.device.aio
  name: create_from_edge_environment(**kwargs)
  namewithoutparameters: create_from_edge_environment
  summary: 'Instantiate the client from the IoT Edge environment.


    This method can only be run from inside an IoT Edge container, or in a debugging

    environment configured for Edge development (e.g. Visual Studio, Visual Studio
    Code)



    broker. If no other messages are being exchanged, this controls the

    rate at which the client will send ping messages to the broker.

    If not provided default value of 60 secs will be used.'
  syntax:
    content: create_from_edge_environment(**kwargs)
    parameters:
    - id: cls
      isRequired: true
    return:
      description: 'An instance of an IoTHub client that uses the IoT Edge environment
        for

        authentication.'
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.create_from_edge_environment
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.create_from_x509_certificate
  langs:
  - python
  module: azure.iot.device.aio
  name: create_from_x509_certificate(x509, hostname, device_id, module_id, **kwargs)
  namewithoutparameters: create_from_x509_certificate
  summary: 'Instantiate a client which using X509 certificate authentication.



    broker. If no other messages are being exchanged, this controls the

    rate at which the client will send ping messages to the broker.

    If not provided default value of 60 secs will be used.'
  syntax:
    content: create_from_x509_certificate(x509, hostname, device_id, module_id, **kwargs)
    parameters:
    - id: cls
      isRequired: true
    - id: x509
      isRequired: true
    - id: hostname
      isRequired: true
    - id: device_id
      isRequired: true
    - id: module_id
      isRequired: true
    return:
      description: An instance of an IoTHub client that uses an X509 certificate for
        authentication.
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.create_from_x509_certificate
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.disconnect
  langs:
  - python
  module: azure.iot.device.aio
  name: disconnect()
  namewithoutparameters: disconnect
  summary: 'Disconnect the client from the Azure IoT Hub or Azure IoT Edge Hub instance.


    It is recommended that you make sure to call this coroutine when you are completely
    done

    with the your client instance.'
  syntax:
    content: disconnect()
    parameters: []
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.disconnect
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.get_twin
  langs:
  - python
  module: azure.iot.device.aio
  name: get_twin()
  namewithoutparameters: get_twin
  summary: Gets the device or module twin from the Azure IoT Hub or Azure IoT Edge
    Hub service.
  syntax:
    content: get_twin()
    parameters: []
    return:
      description: Complete Twin as a JSON dict
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.get_twin
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.invoke_method
  langs:
  - python
  module: azure.iot.device.aio
  name: invoke_method(method_params, device_id, module_id=None)
  namewithoutparameters: invoke_method
  summary: Invoke a method from your client onto a device or module client, and receive
    the response to the method call.
  syntax:
    content: invoke_method(method_params, device_id, module_id=None)
    parameters:
    - description: 'Should contain a methodName (str), payload (str),

        connectTimeoutInSeconds (int), responseTimeoutInSeconds (int).'
      id: method_params
      isRequired: true
      type:
      - dict
    - description: Device ID of the target device where the method will be invoked.
      id: device_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: Module ID of the target module where the method will be invoked.
        (Optional)
      id: module_id
      type:
      - str
    return:
      description: method_result should contain a status, and a payload
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.invoke_method
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.on_message_received
  langs:
  - python
  module: azure.iot.device.aio
  name: on_message_received
  summary: 'The handler function or coroutine that will be called when an input message
    is received.


    The function definitionor coroutine should take one positional argument (the

    <xref:azure.iot.device.Message> object)'
  syntax: {}
  type: attribute
  uid: azure.iot.device.aio.IoTHubModuleClient.on_message_received
- class: azure.iot.device.aio.IoTHubModuleClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubModuleClient.patch_twin_reported_properties
  langs:
  - python
  module: azure.iot.device.aio
  name: patch_twin_reported_properties(reported_properties_patch)
  namewithoutparameters: patch_twin_reported_properties
  summary: 'Update reported properties with the Azure IoT Hub or Azure IoT Edge Hub
    service.


    If the service returns an error on the patch operation, this function will raise
    the

    appropriate error.'
  syntax:
    content: patch_twin_reported_properties(reported_properties_patch)
    parameters:
    - description: Twin Reported Properties patch as a JSON dict
      id: reported_properties_patch
      isRequired: true
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.patch_twin_reported_properties
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.receive_message_on_input
  langs:
  - python
  module: azure.iot.device.aio
  name: receive_message_on_input(input_name)
  namewithoutparameters: receive_message_on_input
  summary: 'Receive an input message that has been sent from another Module to a specific
    input.


    If no message is yet available, will wait until an item is available.'
  syntax:
    content: receive_message_on_input(input_name)
    parameters:
    - description: The input name to receive a message on.
      id: input_name
      isRequired: true
      type:
      - str
    return:
      description: Message that was sent to the specified input.
      type:
      - azure.iot.device.Message
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.receive_message_on_input
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.receive_method_request
  langs:
  - python
  module: azure.iot.device.aio
  name: receive_method_request(method_name=None)
  namewithoutparameters: receive_method_request
  summary: 'Receive a method request via the Azure IoT Hub or Azure IoT Edge Hub.


    If no method request is yet available, will wait until it is available.'
  syntax:
    content: receive_method_request(method_name=None)
    parameters:
    - defaultValue: None
      description: 'Optionally provide the name of the method to receive requests
        for.

        If this parameter is not given, all methods not already being specifically
        targeted by

        a different call to receive_method will be received.'
      id: method_name
      type:
      - str
    return:
      description: MethodRequest object representing the received method request.
      type:
      - azure.iot.device.MethodRequest
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.receive_method_request
- class: azure.iot.device.aio.IoTHubModuleClient
  fullName: azure.iot.device.aio.IoTHubModuleClient.receive_twin_desired_properties_patch
  langs:
  - python
  module: azure.iot.device.aio
  name: receive_twin_desired_properties_patch()
  namewithoutparameters: receive_twin_desired_properties_patch
  summary: 'Receive a desired property patch via the Azure IoT Hub or Azure IoT Edge
    Hub.


    If no method request is yet available, will wait until it is available.'
  syntax:
    content: receive_twin_desired_properties_patch()
    parameters: []
    return:
      description: Twin Desired Properties patch as a JSON dict
      type:
      - dict
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.receive_twin_desired_properties_patch
- class: azure.iot.device.aio.IoTHubModuleClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubModuleClient.send_message
  langs:
  - python
  module: azure.iot.device.aio
  name: send_message(message)
  namewithoutparameters: send_message
  summary: 'Sends a message to the default events endpoint on the Azure IoT Hub or
    Azure IoT Edge Hub instance.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_message(message)
    parameters:
    - description: 'The actual message to send. Anything passed that is not an instance
        of the

        Message class will be converted to Message object.'
      id: message
      isRequired: true
      type:
      - azure.iot.device.Message
      - str
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.send_message
- class: azure.iot.device.aio.IoTHubModuleClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubModuleClient.send_message_to_output
  langs:
  - python
  module: azure.iot.device.aio
  name: send_message_to_output(message, output_name)
  namewithoutparameters: send_message_to_output
  summary: 'Sends an event/message to the given module output.


    These are outgoing events and are meant to be "output events"


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_message_to_output(message, output_name)
    parameters:
    - description: 'Message to send to the given output. Anything passed that is not
        an

        instance of the Message class will be converted to Message object.'
      id: message
      isRequired: true
      type:
      - azure.iot.device.Message
      - str
    - description: Name of the output to send the event to.
      id: output_name
      isRequired: true
      type:
      - str
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.send_message_to_output
- class: azure.iot.device.aio.IoTHubModuleClient
  exceptions:
  - type: azure.iot.device.exceptions.CredentialError
  - type: azure.iot.device.exceptions.ConnectionFailedError
  - type: azure.iot.device.exceptions.ConnectionDroppedError
  - type: azure.iot.device.exceptions.ClientError
  fullName: azure.iot.device.aio.IoTHubModuleClient.send_method_response
  langs:
  - python
  module: azure.iot.device.aio
  name: send_method_response(method_response)
  namewithoutparameters: send_method_response
  summary: 'Send a response to a method request via the Azure IoT Hub or Azure IoT
    Edge Hub.


    If the connection to the service has not previously been opened by a call to connect,
    this

    function will open the connection before sending the event.'
  syntax:
    content: send_method_response(method_response)
    parameters:
    - description: The MethodResponse to send
      id: method_response
      isRequired: true
      type:
      - azure.iot.device.MethodResponse
  type: method
  uid: azure.iot.device.aio.IoTHubModuleClient.send_method_response
references:
- fullName: azure.iot.device.aio.IoTHubModuleClient.connect
  isExternal: false
  name: connect()
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.connect
- fullName: azure.iot.device.aio.IoTHubModuleClient.create_from_connection_string
  isExternal: false
  name: create_from_connection_string(connection_string, **kwargs)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.create_from_connection_string
- fullName: azure.iot.device.aio.IoTHubModuleClient.create_from_edge_environment
  isExternal: false
  name: create_from_edge_environment(**kwargs)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.create_from_edge_environment
- fullName: azure.iot.device.aio.IoTHubModuleClient.create_from_x509_certificate
  isExternal: false
  name: create_from_x509_certificate(x509, hostname, device_id, module_id, **kwargs)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.create_from_x509_certificate
- fullName: azure.iot.device.aio.IoTHubModuleClient.disconnect
  isExternal: false
  name: disconnect()
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.disconnect
- fullName: azure.iot.device.aio.IoTHubModuleClient.get_twin
  isExternal: false
  name: get_twin()
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.get_twin
- fullName: azure.iot.device.aio.IoTHubModuleClient.invoke_method
  isExternal: false
  name: invoke_method(method_params, device_id, module_id=None)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.invoke_method
- fullName: azure.iot.device.aio.IoTHubModuleClient.on_message_received
  isExternal: false
  name: on_message_received
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.on_message_received
- fullName: azure.iot.device.aio.IoTHubModuleClient.patch_twin_reported_properties
  isExternal: false
  name: patch_twin_reported_properties(reported_properties_patch)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.patch_twin_reported_properties
- fullName: azure.iot.device.aio.IoTHubModuleClient.receive_message_on_input
  isExternal: false
  name: receive_message_on_input(input_name)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.receive_message_on_input
- fullName: azure.iot.device.aio.IoTHubModuleClient.receive_method_request
  isExternal: false
  name: receive_method_request(method_name=None)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.receive_method_request
- fullName: azure.iot.device.aio.IoTHubModuleClient.receive_twin_desired_properties_patch
  isExternal: false
  name: receive_twin_desired_properties_patch()
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.receive_twin_desired_properties_patch
- fullName: azure.iot.device.aio.IoTHubModuleClient.send_message
  isExternal: false
  name: send_message(message)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.send_message
- fullName: azure.iot.device.aio.IoTHubModuleClient.send_message_to_output
  isExternal: false
  name: send_message_to_output(message, output_name)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.send_message_to_output
- fullName: azure.iot.device.aio.IoTHubModuleClient.send_method_response
  isExternal: false
  name: send_method_response(method_response)
  parent: azure.iot.device.aio.IoTHubModuleClient
  uid: azure.iot.device.aio.IoTHubModuleClient.send_method_response
