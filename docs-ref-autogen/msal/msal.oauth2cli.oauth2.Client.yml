### YamlMime:PythonClass
uid: msal.oauth2cli.oauth2.Client
name: Client
fullName: msal.oauth2cli.oauth2.Client
module: msal.oauth2cli.oauth2
inheritances:
- msal.oauth2cli.oauth2.BaseClient
summary: 'This is the main API for oauth2 client.


  Its methods define and document parameters mentioned in OAUTH2 RFC 6749.'
constructor:
  syntax: Client(server_configuration, client_id, on_obtaining_tokens=<function Client.<lambda>>,
    on_removing_rt=<function Client.<lambda>>, on_updating_rt=<function Client.<lambda>>,
    **kwargs)
methods:
- uid: msal.oauth2cli.oauth2.Client.build_auth_request_uri
  name: build_auth_request_uri
  summary: 'Generate an authorization uri to be visited by resource owner.


    Later when the response reaches your redirect_uri,

    you can use parse_auth_response() to check the returned state.


    This method could be named build_authorization_request_uri() instead,

    but then there would be a build_authentication_request_uri() in the OIDC

    subclass doing almost the same thing. So we use a loose term "auth" here.'
  signature: build_auth_request_uri(response_type, redirect_uri=None, scope=None,
    state=None, **kwargs)
  parameters:
  - name: response_type
    description: 'Must be "code" when you are using Authorization Code Grant,

      "token" when you are using Implicit Grant, or other

      (possibly space-delimited) strings as registered extension value.

      See [https://tools.ietf.org/html/rfc6749#section-3.1.1](https://tools.ietf.org/html/rfc6749#section-3.1.1)'
    isRequired: true
  - name: redirect_uri
    description: 'Optional. Server will use the pre-registered one.'
    defaultValue: None
  - name: scope
    description: 'It is a space-delimited, case-sensitive string.

      Some ID provider can accept empty string to represent default scope.'
    defaultValue: None
  - name: state
    description: 'Recommended. An opaque value used by the client to

      maintain state between the request and callback.'
    defaultValue: None
  - name: kwargs
    description: Other parameters, typically defined in OpenID Connect.
    isRequired: true
- uid: msal.oauth2cli.oauth2.Client.initiate_device_flow
  name: initiate_device_flow
  summary: 'Initiate a device flow.


    Returns the data defined in Device Flow specs.

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.2](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.2)


    You should then orchestrate the User Interaction as defined in here

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3)


    And possibly here

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3.1](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3.1)'
  signature: initiate_device_flow(scope=None, **kwargs)
  parameters:
  - name: scope
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
  name: obtain_token_by_assertion
  summary: 'This method implements Assertion Framework for OAuth2 (RFC 7521).

    See details at [https://tools.ietf.org/html/rfc7521#section-4.1](https://tools.ietf.org/html/rfc7521#section-4.1)'
  signature: obtain_token_by_assertion(assertion, grant_type, scope=None, **kwargs)
  parameters:
  - name: assertion
    description: The assertion bytes can be a raw SAML2 assertion, or a JWT assertion.
    isRequired: true
  - name: grant_type
    description: 'It is typically either the value of <xref:msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2>,

      or <xref:msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT>, the only two profiles
      defined in RFC 7521.'
    isRequired: true
  - name: scope
    description: Optional. It must be a subset of previously granted scopes.
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
  name: obtain_token_by_authorization_code
  summary: 'Get a token via authorization code. a.k.a. Authorization Code Grant.


    This is typically used by a server-side app (Confidential Client),

    but it can also be used by a device-side native app (Public Client).

    See more detail at [https://tools.ietf.org/html/rfc6749#section-4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)'
  signature: obtain_token_by_authorization_code(code, redirect_uri=None, scope=None,
    **kwargs)
  parameters:
  - name: code
    description: The authorization code received from authorization server.
    isRequired: true
  - name: redirect_uri
    description: 'Required, if the "redirect_uri" parameter was included in the

      authorization request, and their values MUST be identical.'
    defaultValue: None
  - name: scope
    description: 'It is both unnecessary and harmless to use scope here, per RFC 6749.

      We suggest to use the same scope already used in auth request uri,

      so that this library can link the obtained tokens with their scope.'
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
  name: obtain_token_by_device_flow
  summary: Obtain token by a device flow object, with customizable polling effect.
  signature: obtain_token_by_device_flow(flow, exit_condition=<function Client.<lambda>>,
    **kwargs)
  parameters:
  - name: flow
    description: 'An object previously generated by initiate_device_flow(...).

      Its content WILL BE CHANGED by this method during each run.

      We share this object with you, so that you could implement

      your own loop, should you choose to do so.'
    isRequired: true
    types:
    - <xref:dict>
  - name: exit_condition
    description: "This method implements a loop to provide polling effect.\nThe loop's\
      \ exit condition is calculated by this callback.\n\nThe default callback makes\
      \ the loop run until the flow expires.\nTherefore, one of the ways to exit the\
      \ polling early,\nis to change the flow[\"expires_at\"] to a small number such\
      \ as 0.\n\nIn case you are doing async programming, you may want to\ncompletely\
      \ turn off the loop. You can do so by using a callback as:\n\n   exit_condition\
      \ = lambda flow: True\n\nto make the loop run only once, i.e. no polling, hence\
      \ non-block."
    defaultValue: <function Client.<lambda> at 0x00000171BFBD12F0>
    types:
    - <xref:Callable>
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
  name: obtain_token_by_refresh_token
  summary: This is an overload which will trigger token storage callbacks.
  signature: obtain_token_by_refresh_token(token_item, scope=None, rt_getter=<function
    Client.<lambda>>, on_removing_rt=None, on_updating_rt=None, on_obtaining_tokens=None,
    **kwargs)
  parameters:
  - name: token_item
    description: 'A refresh token (RT) item, in flexible format. It can be a string,

      or a whatever data structure containing RT string and its metadata,

      in such case the *rt_getter* callable must be able to

      extract the RT string out from the token item data structure.


      Either way, this token_item will be passed into other callbacks as-is.'
    isRequired: true
  - name: scope
    description: 'If omitted, is treated as equal to the scope originally

      granted by the resource owner,

      according to [https://tools.ietf.org/html/rfc6749#section-6](https://tools.ietf.org/html/rfc6749#section-6)'
    defaultValue: None
  - name: rt_getter
    description: A callable to translate the token_item to a raw RT string
    defaultValue: <function Client.<lambda> at 0x00000171BFBD1950>
  - name: on_removing_rt
    description: If absent, fall back to the one defined in initialization
    defaultValue: None
  - name: on_updating_rt
    description: 'Default to None, it will fall back to the one defined in initialization.

      This is the most common case.


      As a special case, you can pass in a False,

      then this function will NOT trigger on_updating_rt() for RT UPDATE,

      instead it will allow the RT to be added by on_obtaining_tokens().

      This behavior is useful when you are migrating RTs from elsewhere

      into a token storage managed by this library.'
    defaultValue: None
  - name: on_obtaining_tokens
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
  name: obtain_token_by_username_password
  summary: The Resource Owner Password Credentials Grant, used by legacy app.
  signature: obtain_token_by_username_password(username, password, scope=None, **kwargs)
  parameters:
  - name: username
    isRequired: true
  - name: password
    isRequired: true
  - name: scope
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_for_client
  name: obtain_token_for_client
  summary: 'Obtain token for this client (rather than for an end user),

    a.k.a. the Client Credentials Grant, used by Backend Applications.


    We don''t name it obtain_token_by_client_credentials(...) because those

    credentials are typically already provided in class constructor, not here.

    You can still explicitly provide an optional client_secret parameter,

    or you can provide such extra parameters as *default_body* during the

    class initialization.'
  signature: obtain_token_for_client(scope=None, **kwargs)
  parameters:
  - name: scope
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.parse_auth_response
  name: parse_auth_response
  summary: Parse the authorization response being redirected back.
  signature: parse_auth_response(params, state=None)
  parameters:
  - name: params
    description: A string or dict of the query string
    isRequired: true
  - name: state
    description: 'REQUIRED if the state parameter was present in the client

      authorization request. This function will compare it with response.'
    defaultValue: None
attributes:
- uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW
  name: DEVICE_FLOW
  signature: 'DEVICE_FLOW = {''GRANT_TYPE'': ''urn:ietf:params:oauth:grant-type:device_code'',
    ''DEVICE_CODE'': ''device_code''}'
- uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
  name: DEVICE_FLOW_RETRIABLE_ERRORS
  signature: DEVICE_FLOW_RETRIABLE_ERRORS = ('authorization_pending', 'slow_down')
- uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
  name: GRANT_TYPE_JWT
  signature: GRANT_TYPE_JWT = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
- uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
  name: GRANT_TYPE_SAML2
  signature: GRANT_TYPE_SAML2 = 'urn:ietf:params:oauth:grant-type:saml2-bearer'
- uid: msal.oauth2cli.oauth2.Client.grant_assertion_encoders
  name: grant_assertion_encoders
  signature: 'grant_assertion_encoders = {''urn:ietf:params:oauth:grant-type:saml2-bearer'':
    <function BaseClient.encode_saml_assertion>}'
