### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msal.token_cache.TokenCache.add
  - msal.token_cache.TokenCache.find
  - msal.token_cache.TokenCache.modify
  - msal.token_cache.TokenCache.remove_account
  - msal.token_cache.TokenCache.remove_at
  - msal.token_cache.TokenCache.remove_idt
  - msal.token_cache.TokenCache.remove_rt
  - msal.token_cache.TokenCache.update_rt
  class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: msal.token_cache
  name: TokenCache
  summary: 'This is considered as a base class containing minimal cache behavior.


    Although it maintains tokens using unified schema across all MSAL libraries,

    this class does not serialize/persist them.

    See subclass <xref:msal.token_cache.SerializableTokenCache> for details on serialization.'
  syntax:
    content: TokenCache()
  type: class
  uid: msal.token_cache.TokenCache
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.add
  langs:
  - python
  module: msal.token_cache
  name: add(event, now=None)
  namewithoutparameters: add
  summary: 'Handle a token obtaining event, and add tokens into cache.


    Known side effects: This function modifies the input event in place.'
  syntax:
    content: add(event, now=None)
    parameters:
    - id: event
      isRequired: true
    - defaultValue: None
      id: now
  type: method
  uid: msal.token_cache.TokenCache.add
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.find
  langs:
  - python
  module: msal.token_cache
  name: find(credential_type, target=None, query=None)
  namewithoutparameters: find
  syntax:
    content: find(credential_type, target=None, query=None)
    parameters:
    - id: credential_type
      isRequired: true
    - defaultValue: None
      id: target
    - defaultValue: None
      id: query
  type: method
  uid: msal.token_cache.TokenCache.find
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.modify
  langs:
  - python
  module: msal.token_cache
  name: modify(credential_type, old_entry, new_key_value_pairs=None)
  namewithoutparameters: modify
  syntax:
    content: modify(credential_type, old_entry, new_key_value_pairs=None)
    parameters:
    - id: credential_type
      isRequired: true
    - id: old_entry
      isRequired: true
    - defaultValue: None
      id: new_key_value_pairs
  type: method
  uid: msal.token_cache.TokenCache.modify
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.remove_account
  langs:
  - python
  module: msal.token_cache
  name: remove_account(account_item)
  namewithoutparameters: remove_account
  syntax:
    content: remove_account(account_item)
    parameters:
    - id: account_item
      isRequired: true
  type: method
  uid: msal.token_cache.TokenCache.remove_account
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.remove_at
  langs:
  - python
  module: msal.token_cache
  name: remove_at(at_item)
  namewithoutparameters: remove_at
  syntax:
    content: remove_at(at_item)
    parameters:
    - id: at_item
      isRequired: true
  type: method
  uid: msal.token_cache.TokenCache.remove_at
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.remove_idt
  langs:
  - python
  module: msal.token_cache
  name: remove_idt(idt_item)
  namewithoutparameters: remove_idt
  syntax:
    content: remove_idt(idt_item)
    parameters:
    - id: idt_item
      isRequired: true
  type: method
  uid: msal.token_cache.TokenCache.remove_idt
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.remove_rt
  langs:
  - python
  module: msal.token_cache
  name: remove_rt(rt_item)
  namewithoutparameters: remove_rt
  syntax:
    content: remove_rt(rt_item)
    parameters:
    - id: rt_item
      isRequired: true
  type: method
  uid: msal.token_cache.TokenCache.remove_rt
- class: msal.token_cache.TokenCache
  fullName: msal.token_cache.TokenCache.update_rt
  langs:
  - python
  module: msal.token_cache
  name: update_rt(rt_item, new_rt)
  namewithoutparameters: update_rt
  syntax:
    content: update_rt(rt_item, new_rt)
    parameters:
    - id: rt_item
      isRequired: true
    - id: new_rt
      isRequired: true
  type: method
  uid: msal.token_cache.TokenCache.update_rt
references:
- fullName: msal.token_cache.TokenCache.add
  isExternal: false
  name: add(event, now=None)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.add
- fullName: msal.token_cache.TokenCache.find
  isExternal: false
  name: find(credential_type, target=None, query=None)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.find
- fullName: msal.token_cache.TokenCache.modify
  isExternal: false
  name: modify(credential_type, old_entry, new_key_value_pairs=None)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.modify
- fullName: msal.token_cache.TokenCache.remove_account
  isExternal: false
  name: remove_account(account_item)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.remove_account
- fullName: msal.token_cache.TokenCache.remove_at
  isExternal: false
  name: remove_at(at_item)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.remove_at
- fullName: msal.token_cache.TokenCache.remove_idt
  isExternal: false
  name: remove_idt(idt_item)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.remove_idt
- fullName: msal.token_cache.TokenCache.remove_rt
  isExternal: false
  name: remove_rt(rt_item)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.remove_rt
- fullName: msal.token_cache.TokenCache.update_rt
  isExternal: false
  name: update_rt(rt_item, new_rt)
  parent: msal.token_cache.TokenCache
  uid: msal.token_cache.TokenCache.update_rt
