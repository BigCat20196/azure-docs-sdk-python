### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msal.oauth2cli.assertion.AssertionCreator.create_normal_assertion
  - msal.oauth2cli.assertion.AssertionCreator.create_regenerative_assertion
  class: msal.oauth2cli.assertion.AssertionCreator
  fullName: msal.oauth2cli.assertion.AssertionCreator
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: msal.oauth2cli.assertion
  name: AssertionCreator
  summary: ''
  syntax: {}
  type: class
  uid: msal.oauth2cli.assertion.AssertionCreator
- class: msal.oauth2cli.assertion.AssertionCreator
  fullName: msal.oauth2cli.assertion.AssertionCreator.create_normal_assertion
  langs:
  - python
  module: msal.oauth2cli.assertion
  name: create_normal_assertion(audience, issuer, subject, expires_at=None, expires_in=600,
    issued_at=None, assertion_id=None, **kwargs)
  namewithoutparameters: create_normal_assertion
  summary: 'Create an assertion in bytes, based on the provided claims.


    All parameter names are defined in [https://tools.ietf.org/html/rfc7521#section-5](https://tools.ietf.org/html/rfc7521#section-5)

    except the expires_in is defined here as lifetime-in-seconds,

    which will be automatically translated into expires_at in UTC.'
  syntax:
    content: create_normal_assertion(audience, issuer, subject, expires_at=None, expires_in=600,
      issued_at=None, assertion_id=None, **kwargs)
    parameters:
    - id: audience
      isRequired: true
    - id: issuer
      isRequired: true
    - id: subject
      isRequired: true
    - defaultValue: None
      id: expires_at
    - defaultValue: '600'
      id: expires_in
    - defaultValue: None
      id: issued_at
    - defaultValue: None
      id: assertion_id
  type: method
  uid: msal.oauth2cli.assertion.AssertionCreator.create_normal_assertion
- class: msal.oauth2cli.assertion.AssertionCreator
  fullName: msal.oauth2cli.assertion.AssertionCreator.create_regenerative_assertion
  langs:
  - python
  module: msal.oauth2cli.assertion
  name: create_regenerative_assertion(audience, issuer, subject=None, expires_in=600,
    **kwargs)
  namewithoutparameters: create_regenerative_assertion
  summary: 'Create an assertion as a callable,

    which will then compute the assertion later when necessary.


    This is a useful optimization to reuse the client assertion.'
  syntax:
    content: create_regenerative_assertion(audience, issuer, subject=None, expires_in=600,
      **kwargs)
    parameters:
    - id: audience
      isRequired: true
    - id: issuer
      isRequired: true
    - defaultValue: None
      id: subject
    - defaultValue: '600'
      id: expires_in
  type: method
  uid: msal.oauth2cli.assertion.AssertionCreator.create_regenerative_assertion
references:
- fullName: msal.oauth2cli.assertion.AssertionCreator.create_normal_assertion
  isExternal: false
  name: create_normal_assertion(audience, issuer, subject, expires_at=None, expires_in=600,
    issued_at=None, assertion_id=None, **kwargs)
  parent: msal.oauth2cli.assertion.AssertionCreator
  uid: msal.oauth2cli.assertion.AssertionCreator.create_normal_assertion
- fullName: msal.oauth2cli.assertion.AssertionCreator.create_regenerative_assertion
  isExternal: false
  name: create_regenerative_assertion(audience, issuer, subject=None, expires_in=600,
    **kwargs)
  parent: msal.oauth2cli.assertion.AssertionCreator
  uid: msal.oauth2cli.assertion.AssertionCreator.create_regenerative_assertion
