### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msal.token_cache.SerializableTokenCache.add
  - msal.token_cache.SerializableTokenCache.deserialize
  - msal.token_cache.SerializableTokenCache.modify
  - msal.token_cache.SerializableTokenCache.serialize
  - msal.token_cache.SerializableTokenCache.has_state_changed
  class: msal.token_cache.SerializableTokenCache
  fullName: msal.token_cache.SerializableTokenCache
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msal.token_cache.TokenCache
  langs:
  - python
  module: msal.token_cache
  name: SerializableTokenCache
  summary: "This serialization can be a starting point to implement your own persistence.\n\
    \nThis class does NOT actually persist the cache on disk/db/etc..\nDepending on\
    \ your need,\nthe following simple recipe for file-based persistence may be sufficient:\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\"} -->\n\n````\n\n   import\
    \ os, atexit, msal\n   cache = msal.SerializableTokenCache()\n   if os.path.exists(\"\
    my_cache.bin\"):\n       cache.deserialize(open(\"my_cache.bin\", \"r\").read())\n\
    \   atexit.register(lambda:\n       open(\"my_cache.bin\", \"w\").write(cache.serialize())\n\
    \       # Hint: The following optional line persists only when state changed\n\
    \       if cache.has_state_changed else None\n       )\n   app = msal.ClientApplication(...,\
    \ token_cache=cache)\n   ...\n   ````"
  syntax:
    content: SerializableTokenCache()
    variables:
    - description: 'Indicates whether the cache state in the memory has changed since
        last

        <xref:msal.token_cache.SerializableTokenCache.serialize> or <xref:msal.token_cache.SerializableTokenCache.deserialize>
        call.'
      id: has_state_changed
      type:
      - bool
  type: class
  uid: msal.token_cache.SerializableTokenCache
- class: msal.token_cache.SerializableTokenCache
  fullName: msal.token_cache.SerializableTokenCache.add
  langs:
  - python
  module: msal.token_cache
  name: add(event, **kwargs)
  namewithoutparameters: add
  syntax:
    content: add(event, **kwargs)
    parameters:
    - id: event
      isRequired: true
  type: method
  uid: msal.token_cache.SerializableTokenCache.add
- class: msal.token_cache.SerializableTokenCache
  fullName: msal.token_cache.SerializableTokenCache.deserialize
  langs:
  - python
  module: msal.token_cache
  name: deserialize(state)
  namewithoutparameters: deserialize
  summary: Deserialize the cache from a state previously obtained by serialize()
  syntax:
    content: deserialize(state)
    parameters:
    - id: state
      isRequired: true
  type: method
  uid: msal.token_cache.SerializableTokenCache.deserialize
- class: msal.token_cache.SerializableTokenCache
  fullName: msal.token_cache.SerializableTokenCache.modify
  langs:
  - python
  module: msal.token_cache
  name: modify(credential_type, old_entry, new_key_value_pairs=None)
  namewithoutparameters: modify
  syntax:
    content: modify(credential_type, old_entry, new_key_value_pairs=None)
    parameters:
    - id: credential_type
      isRequired: true
    - id: old_entry
      isRequired: true
    - defaultValue: None
      id: new_key_value_pairs
  type: method
  uid: msal.token_cache.SerializableTokenCache.modify
- class: msal.token_cache.SerializableTokenCache
  fullName: msal.token_cache.SerializableTokenCache.serialize
  langs:
  - python
  module: msal.token_cache
  name: serialize()
  namewithoutparameters: serialize
  summary: Serialize the current cache state into a string.
  syntax:
    content: serialize()
    parameters: []
  type: method
  uid: msal.token_cache.SerializableTokenCache.serialize
- class: msal.token_cache.SerializableTokenCache
  fullName: msal.token_cache.SerializableTokenCache.has_state_changed
  langs:
  - python
  module: msal.token_cache
  name: has_state_changed
  syntax:
    content: has_state_changed = False
  type: attribute
  uid: msal.token_cache.SerializableTokenCache.has_state_changed
references:
- fullName: msal.token_cache.SerializableTokenCache.add
  isExternal: false
  name: add(event, **kwargs)
  parent: msal.token_cache.SerializableTokenCache
  uid: msal.token_cache.SerializableTokenCache.add
- fullName: msal.token_cache.SerializableTokenCache.deserialize
  isExternal: false
  name: deserialize(state)
  parent: msal.token_cache.SerializableTokenCache
  uid: msal.token_cache.SerializableTokenCache.deserialize
- fullName: msal.token_cache.SerializableTokenCache.modify
  isExternal: false
  name: modify(credential_type, old_entry, new_key_value_pairs=None)
  parent: msal.token_cache.SerializableTokenCache
  uid: msal.token_cache.SerializableTokenCache.modify
- fullName: msal.token_cache.SerializableTokenCache.serialize
  isExternal: false
  name: serialize()
  parent: msal.token_cache.SerializableTokenCache
  uid: msal.token_cache.SerializableTokenCache.serialize
- fullName: msal.token_cache.SerializableTokenCache.has_state_changed
  isExternal: false
  name: has_state_changed
  parent: msal.token_cache.SerializableTokenCache
  uid: msal.token_cache.SerializableTokenCache.has_state_changed
