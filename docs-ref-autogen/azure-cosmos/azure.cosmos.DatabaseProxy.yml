### YamlMime:PythonClass
uid: azure.cosmos.DatabaseProxy
name: DatabaseProxy
fullName: azure.cosmos.DatabaseProxy
module: azure.cosmos
inheritances:
- builtins.object
summary: "An interface to interact with a specific database.\n\nThis class should\
  \ not be instantiated directly. Instead use the\n<xref:azure.cosmos.CosmosClient.get_database_client>\
  \ method.\n\nA database contains one or more containers, each of which can contain\
  \ items,\nstored procedures, triggers, and user-defined functions.\n\nA database\
  \ can also have associated users, each of which is configured with\na set of permissions\
  \ for accessing certain containers, stored procedures,\ntriggers, user-defined functions,\
  \ or items.\n\nAn Azure Cosmos DB SQL API database has the following system-generated\n\
  properties. These properties are read-only:\n\n* *_rid*:   The resource ID. \n\n\
  * *_ts*:    When the resource was last updated. The value is a timestamp. \n\n*\
  \ *_self*:  The unique addressable URI for the resource. \n\n* *_etag*:  The resource\
  \ etag required for optimistic concurrency control. \n\n* *_colls*: The addressable\
  \ path of the collections resource. \n\n* *_users*: The addressable path of the\
  \ users resource."
constructor:
  syntax: DatabaseProxy(client_connection, id, properties=None)
variables:
- description: The ID (name) of the database.
  name: "id \u2013 The ID"
methods:
- uid: azure.cosmos.DatabaseProxy.create_container
  name: create_container
  summary: 'Create a new container with the given ID (name).


    If a container with the given ID already exists, a CosmosResourceExistsError is
    raised.'
  signature: create_container(id, partition_key, indexing_policy=None, default_ttl=None,
    populate_query_metrics=None, offer_throughput=None, unique_key_policy=None, conflict_resolution_policy=None,
    **kwargs)
  parameters:
  - name: id
    description: ID (name) of container to create.
    isRequired: true
  - name: partition_key
    description: The partition key to use for the container.
    isRequired: true
  - name: indexing_policy
    description: The indexing policy to apply to the container.
    isRequired: true
  - name: default_ttl
    description: Default time to live (TTL) for items in the container. If unspecified,
      items do not expire.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: offer_throughput
    description: The provisioned throughput for this offer.
    isRequired: true
  - name: unique_key_policy
    description: The unique key policy to apply to the container.
    isRequired: true
  - name: conflict_resolution_policy
    description: The conflict resolution policy to apply to the container.
    isRequired: true
  return:
    description: A *ContainerProxy* instance representing the new container.
    types:
    - <xref:azure.cosmos.ContainerProxy>
  examples:
  - "Create a container with default settings:<!--[!code-python[Main](les\\examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   container_name = \"products\"\
    \n   try:\n       container = database.create_container(\n           id=container_name,\
    \ partition_key=PartitionKey(path=\"/productName\")\n       )\n   except exceptions.CosmosResourceExistsError:\n\
    \       container = database.get_container_client(container_name)\n\n   ````\n\
    \nCreate a container with specific settings; in this case, a custom partition\
    \ key:<!--[!code-python[Main](les\\examples.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\122\\\\azure-cosmos-4.2.0\\\\\
    samples\\\\examples.py\", \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\
    \n````python\n\n   customer_container_name = \"customers\"\n   try:\n       customer_container\
    \ = database.create_container(\n           id=customer_container_name,\n     \
    \      partition_key=PartitionKey(path=\"/city\"),\n           default_ttl=200,\n\
    \       )\n   except exceptions.CosmosResourceExistsError:\n       customer_container\
    \ = database.get_container_client(customer_container_name)\n\n   ````\n"
- uid: azure.cosmos.DatabaseProxy.create_container_if_not_exists
  name: create_container_if_not_exists
  summary: 'Create a container if it does not exist already.


    If the container already exists, the existing settings are returned.

    Note: it does not check or update the existing container settings or offer throughput

    if they differ from what was passed into the method.'
  signature: create_container_if_not_exists(id, partition_key, indexing_policy=None,
    default_ttl=None, populate_query_metrics=None, offer_throughput=None, unique_key_policy=None,
    conflict_resolution_policy=None, **kwargs)
  parameters:
  - name: id
    description: ID (name) of container to read or create.
    isRequired: true
  - name: partition_key
    description: The partition key to use for the container.
    isRequired: true
  - name: indexing_policy
    description: The indexing policy to apply to the container.
    isRequired: true
  - name: default_ttl
    description: Default time to live (TTL) for items in the container. If unspecified,
      items do not expire.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: offer_throughput
    description: The provisioned throughput for this offer.
    isRequired: true
  - name: unique_key_policy
    description: The unique key policy to apply to the container.
    isRequired: true
  - name: conflict_resolution_policy
    description: The conflict resolution policy to apply to the container.
    isRequired: true
  return:
    description: A *ContainerProxy* instance representing the container.
    types:
    - <xref:azure.cosmos.ContainerProxy>
- uid: azure.cosmos.DatabaseProxy.create_user
  name: create_user
  summary: 'Create a new user in the container.


    To update or replace an existing user, use the

    <xref:ContainerProxy.upsert_user> method.'
  signature: create_user(body, **kwargs)
  parameters:
  - name: body
    description: 'A dict-like object with an *id* key and value representing the user
      to be created.

      The user ID must be unique within the database, and consist of no more than
      255 characters.'
    isRequired: true
  return:
    description: A *UserProxy* instance representing the new user.
    types:
    - <xref:azure.cosmos.UserProxy>
  examples:
  - "Create a database user:<!--[!code-python[Main](les\\examples.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\122\\\\azure-cosmos-4.2.0\\\
    \\samples\\\\examples.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   try:\n       database.create_user(dict(id=\"\
    Walter Harp\"))\n   except exceptions.CosmosResourceExistsError:\n       print(\"\
    A user with that ID already exists.\")\n   except exceptions.CosmosHttpResponseError\
    \ as failure:\n       print(\"Failed to create user. Status code:{}\".format(failure.status_code))\n\
    \n   ````\n"
- uid: azure.cosmos.DatabaseProxy.delete_container
  name: delete_container
  summary: Delete a container.
  signature: delete_container(container, populate_query_metrics=None, **kwargs)
  parameters:
  - name: container
    description: 'The ID (name) of the container to delete. You can either

      pass in the ID of the container to delete, a <xref:azure.cosmos.ContainerProxy>
      instance or

      a dict representing the properties of the container.'
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  return:
    types:
    - <xref:None>
- uid: azure.cosmos.DatabaseProxy.delete_user
  name: delete_user
  summary: Delete the specified user from the container.
  signature: delete_user(user, **kwargs)
  parameters:
  - name: user
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.UserProxy>

      instance of the user to be deleted.'
    isRequired: true
  return:
    types:
    - <xref:None>
- uid: azure.cosmos.DatabaseProxy.get_container_client
  name: get_container_client
  summary: Get a *ContainerProxy* for a container with specified ID (name).
  signature: get_container_client(container)
  parameters:
  - name: container
    description: 'The ID (name) of the container, a <xref:azure.cosmos.ContainerProxy>
      instance,

      or a dict representing the properties of the container to be retrieved.'
    isRequired: true
  return:
    types:
    - <xref:azure.cosmos.ContainerProxy>
  examples:
  - "Get an existing container, handling a failure if encountered:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\\
    dist_temp\\\\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   database =\
    \ client.get_database_client(database_name)\n   container = database.get_container_client(container_name)\n\
    \n   ````\n"
- uid: azure.cosmos.DatabaseProxy.get_user_client
  name: get_user_client
  summary: Get a *UserProxy* for a user with specified ID.
  signature: get_user_client(user)
  parameters:
  - name: user
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.UserProxy>

      instance of the user to be retrieved.'
    isRequired: true
  return:
    description: A *UserProxy* instance representing the retrieved user.
    types:
    - <xref:azure.cosmos.UserProxy>
- uid: azure.cosmos.DatabaseProxy.list_containers
  name: list_containers
  summary: List the containers in the database.
  signature: list_containers(max_item_count=None, populate_query_metrics=None, **kwargs)
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  return:
    description: An Iterable of container properties (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:dict>[<xref:str>, <xref:azure.cosmos.Any>]]
  examples:
  - "List all containers in the database:<!--[!code-python[Main](les\\examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   database = client.get_database_client(database_name)\n\
    \   for container in database.list_containers():\n       print(\"Container ID:\
    \ {}\".format(container['id']))\n\n   ````\n"
- uid: azure.cosmos.DatabaseProxy.list_users
  name: list_users
  summary: List all the users in the container.
  signature: list_users(max_item_count=None, **kwargs)
  parameters:
  - name: max_item_count
    description: Max number of users to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An Iterable of user properties (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:dict>[<xref:str>, <xref:azure.cosmos.Any>]]
- uid: azure.cosmos.DatabaseProxy.query_containers
  name: query_containers
  summary: List the properties for containers in the current database.
  signature: query_containers(query=None, parameters=None, max_item_count=None, populate_query_metrics=None,
    **kwargs)
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  return:
    description: An Iterable of container properties (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:dict>[<xref:str>, <xref:azure.cosmos.Any>]]
- uid: azure.cosmos.DatabaseProxy.query_users
  name: query_users
  summary: Return all users matching the given *query*.
  signature: query_users(query, parameters=None, max_item_count=None, **kwargs)
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: max_item_count
    description: Max number of users to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An Iterable of user properties (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:str>, <xref:azure.cosmos.Any>]
- uid: azure.cosmos.DatabaseProxy.read
  name: read
  summary: Read the database properties.
  signature: read(populate_query_metrics=None, **kwargs)
  parameters:
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
    types:
    - <xref:bool>
  return:
    types:
    - <xref:azure.cosmos.Dict>[<xref:azure.cosmos.Str>, <xref:azure.cosmos.Any>]
- uid: azure.cosmos.DatabaseProxy.read_offer
  name: read_offer
  summary: Read the Offer object for this database.
  signature: read_offer(**kwargs)
  return:
    description: Offer for the database.
    types:
    - <xref:azure.cosmos.Offer>
- uid: azure.cosmos.DatabaseProxy.replace_container
  name: replace_container
  summary: 'Reset the properties of the container.


    Property changes are persisted immediately. Any properties not specified

    will be reset to their default values.'
  signature: replace_container(container, partition_key, indexing_policy=None, default_ttl=None,
    conflict_resolution_policy=None, populate_query_metrics=None, **kwargs)
  parameters:
  - name: container
    description: 'The ID (name), dict representing the properties or

      <xref:azure.cosmos.ContainerProxy> instance of the container to be replaced.'
    isRequired: true
  - name: partition_key
    description: The partition key to use for the container.
    isRequired: true
  - name: indexing_policy
    description: The indexing policy to apply to the container.
    isRequired: true
  - name: default_ttl
    description: 'Default time to live (TTL) for items in the container.

      If unspecified, items do not expire.'
    isRequired: true
  - name: conflict_resolution_policy
    description: The conflict resolution policy to apply to the container.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  return:
    description: A *ContainerProxy* instance representing the container after replace
      completed.
    types:
    - <xref:azure.cosmos.ContainerProxy>
  examples:
  - "Reset the TTL property on a container, and display the updated properties:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\\
    dist_temp\\\\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # Set the\
    \ TTL on the container to 3600 seconds (one hour)\n   database.replace_container(container,\
    \ partition_key=PartitionKey(path='/productName'), default_ttl=3600)\n\n   # Display\
    \ the new TTL setting for the container\n   container_props = database.get_container_client(container_name).read()\n\
    \   print(\"New container TTL: {}\".format(json.dumps(container_props['defaultTtl'])))\n\
    \n   ````\n"
- uid: azure.cosmos.DatabaseProxy.replace_throughput
  name: replace_throughput
  summary: Replace the database-level throughput.
  signature: replace_throughput(throughput, **kwargs)
  parameters:
  - name: throughput
    description: The throughput to be set (an integer).
    isRequired: true
  return:
    description: Offer for the database, updated with new throughput.
    types:
    - <xref:azure.cosmos.Offer>
- uid: azure.cosmos.DatabaseProxy.replace_user
  name: replace_user
  summary: Replaces the specified user if it exists in the container.
  signature: replace_user(user, body, **kwargs)
  parameters:
  - name: user
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.UserProxy>

      instance of the user to be replaced.'
    isRequired: true
  - name: body
    description: A dict-like object representing the user to replace.
    isRequired: true
  return:
    description: A *UserProxy* instance representing the user after replace went through.
    types:
    - <xref:azure.cosmos.UserProxy>
- uid: azure.cosmos.DatabaseProxy.upsert_user
  name: upsert_user
  summary: 'Insert or update the specified user.


    If the user already exists in the container, it is replaced. If the user

    does not already exist, it is inserted.'
  signature: upsert_user(body, **kwargs)
  parameters:
  - name: body
    description: A dict-like object representing the user to update or insert.
    isRequired: true
  return:
    description: A *UserProxy* instance representing the upserted user.
    types:
    - <xref:azure.cosmos.UserProxy>
