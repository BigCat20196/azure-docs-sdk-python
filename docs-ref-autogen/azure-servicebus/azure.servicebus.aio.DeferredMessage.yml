### YamlMime:PythonClass
uid: azure.servicebus.aio.DeferredMessage
name: DeferredMessage
fullName: azure.servicebus.aio.DeferredMessage
module: azure.servicebus.aio
inheritances:
- azure.servicebus.aio.async_message.Message
summary: 'A message that has been deferred.


  A deferred message can be completed,

  abandoned, or dead-lettered, however it cannot be deferred again.'
constructor:
  syntax: DeferredMessage(deferred, mode)
methods:
- uid: azure.servicebus.aio.DeferredMessage.abandon
  name: abandon
  summary: Abandon the message. This message will be returned to the queue to be reprocessed.
  signature: abandon()
- uid: azure.servicebus.aio.DeferredMessage.complete
  name: complete
  summary: 'Complete the message.


    This removes the message from the queue.'
  signature: complete()
- uid: azure.servicebus.aio.DeferredMessage.dead_letter
  name: dead_letter
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.

    To receive dead-lettered messages, use *QueueClient.get_deadletter_receiver()*
    or

    *SubscriptionClient.get_deadletter_receiver()*.'
  signature: dead_letter(description=None)
  parameters:
  - name: description
    description: The reason for dead-lettering the message.
    defaultValue: None
    types:
    - <xref:str>
- uid: azure.servicebus.aio.DeferredMessage.defer
  name: defer
  summary: A DeferredMessage cannot be deferred. Raises *ValueError*.
  signature: defer()
