### YamlMime:PythonClass
uid: azure.servicebus.aio.ServiceBusSession
name: ServiceBusSession
fullName: azure.servicebus.aio.ServiceBusSession
module: azure.servicebus.aio
inheritances:
- azure.servicebus._servicebus_session.BaseSession
summary: 'The ServiceBusSession is used for manage session states and lock renewal.


  **Please use the property `session` on the ServiceBusReceiver to get the corresponding
  ServiceBusSession

  object linked with the receiver instead of instantiating a ServiceBusSession object
  directly.**'
constructor:
  syntax: ServiceBusSession(session_id, receiver)
examples:
- "Get session from a receiver<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\64\\\\azure-servicebus-7.1.1\\\
  \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\":\
  \ \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\":\
  \ {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n       async with\
  \ servicebus_client.get_queue_receiver(queue_name=queue_name, session_id=session_id)\
  \ as receiver:\n           session = receiver.session\n\n   ````\n"
methods:
- uid: azure.servicebus.aio.ServiceBusSession.get_state
  name: get_state
  summary: 'Get the session state.


    Returns None if no state has been set.'
  signature: 'get_state(**kwargs: typing.Any) -> bytes'
  return:
    types:
    - <xref:azure.servicebus.aio.str>
  examples:
  - "Get the session state<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\64\\\\azure-servicebus-7.1.1\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       async with servicebus_client.get_queue_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           session_state = await session.get_state()\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSession.renew_lock
  name: renew_lock
  summary: 'Renew the session lock.


    This operation must be performed periodically in order to retain a lock on the

    session to continue message processing.


    Once the lock is lost the connection will be closed; an expired lock cannot be
    renewed.


    This operation can also be performed as a threaded background task by registering
    the session

    with an *azure.servicebus.aio.AutoLockRenewer* instance.'
  signature: 'renew_lock(**kwargs: typing.Any) -> datetime.datetime'
  return:
    description: The utc datetime the lock is set to expire at.
    types:
    - <xref:azure.servicebus.aio.datetime>
  examples:
  - "Renew the session lock before it expires<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\64\\\\azure-servicebus-7.1.1\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n       async with servicebus_client.get_queue_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           await session.renew_lock()\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSession.set_state
  name: set_state
  summary: Set the session state.
  signature: 'set_state(state: typing.Union[str, bytes, bytearray], **kwargs: typing.Any)
    -> None'
  parameters:
  - name: state
    description: The state value.
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.Union>[<xref:azure.servicebus.aio.str>, <xref:azure.servicebus.aio.bytes>,
      <xref:azure.servicebus.aio.bytearray>]
  return:
    types:
    - <xref:None>
  examples:
  - "Set the session state<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\64\\\\azure-servicebus-7.1.1\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       async with servicebus_client.get_queue_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           await session.set_state(\"START\")\n\n   ````\n"
