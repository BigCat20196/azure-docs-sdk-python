### YamlMime:PythonClass
uid: azure.servicebus.common.message.Message
name: Message
fullName: azure.servicebus.common.message.Message
module: azure.servicebus.common.message
inheritances:
- builtins.object
summary: A Service Bus Message.
constructor:
  syntax: Message(body, encoding='UTF-8', **kwargs)
  parameters:
  - name: body
    description: The data to send in a single message. The maximum size per message
      is 256 kB.
    types:
    - <xref:str>
    - <xref:bytes>
  - name: encoding
    description: The encoding for string data. Default is UTF-8.
    types:
    - <xref:str>
methods:
- uid: azure.servicebus.common.message.Message.abandon
  name: abandon
  summary: 'Abandon the message.


    This message will be returned to the queue to be reprocessed.'
  signature: abandon()
- uid: azure.servicebus.common.message.Message.complete
  name: complete
  summary: 'Complete the message.


    This removes the message from the queue.'
  signature: complete()
- uid: azure.servicebus.common.message.Message.dead_letter
  name: dead_letter
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.

    To receive dead-lettered messages, use *QueueClient.get_deadletter_receiver()*
    or

    *SubscriptionClient.get_deadletter_receiver()*.'
  signature: dead_letter(description=None)
  parameters:
  - name: description
    description: The reason for dead-lettering the message.
    defaultValue: None
    types:
    - <xref:str>
- uid: azure.servicebus.common.message.Message.defer
  name: defer
  summary: 'Defer the message.


    This message will remain in the queue but must be received

    specifically by its sequence number in order to be processed.'
  signature: defer()
- uid: azure.servicebus.common.message.Message.renew_lock
  name: renew_lock
  summary: 'Renew the message lock.


    This will maintain the lock on the message to ensure

    it is not returned to the queue to be reprocessed. In order to complete (or otherwise
    settle)

    the message, the lock must be maintained. Messages received via ReceiveAndDelete
    mode are not

    locked, and therefore cannot be renewed. This operation can also be performed
    as a threaded

    background task by registering the message with an *azure.servicebus.AutoLockRenew*
    instance.

    This operation is only available for non-sessionful messages.'
  signature: renew_lock()
- uid: azure.servicebus.common.message.Message.schedule
  name: schedule
  summary: Add a specific enqueue time to the message.
  signature: schedule(schedule_time)
  parameters:
  - name: schedule_time
    description: The scheduled time to enqueue the message.
    isRequired: true
    types:
    - <xref:datetime.datetime>
attributes:
- uid: azure.servicebus.common.message.Message.annotations
  name: annotations
  summary: The annotations of the message.
  return:
    types:
    - <xref:dict>
- uid: azure.servicebus.common.message.Message.body
  name: body
  summary: The body of the Message.
  return:
    types:
    - <xref:bytes>
    - <xref:generator>[<xref:bytes>]
- uid: azure.servicebus.common.message.Message.settled
  name: settled
  summary: 'Whether the message has been settled.


    This will aways be *True* for a message received using ReceiveAndDelete mode,

    otherwise it will be *False* until the message is completed or otherwise settled.'
  return:
    types:
    - <xref:bool>
- uid: azure.servicebus.common.message.Message.user_properties
  name: user_properties
  summary: User defined properties on the message.
  return:
    types:
    - <xref:dict>
