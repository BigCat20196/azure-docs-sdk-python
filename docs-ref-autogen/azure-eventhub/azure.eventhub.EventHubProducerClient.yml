### YamlMime:PythonClass
uid: azure.eventhub.EventHubProducerClient
name: EventHubProducerClient
fullName: azure.eventhub.EventHubProducerClient
module: azure.eventhub
inheritances:
- azure.eventhub._client_base.ClientBase
summary: 'The EventHubProducerClient class defines a high level interface for

  sending events to the Azure Event Hubs service.'
constructor:
  syntax: EventHubProducerClient(fully_qualified_namespace, eventhub_name, credential,
    **kwargs)
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Event Hubs namespace.

      This is likely to be similar to <yournamespace>.servicebus.windows.net'
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: eventhub_name
    description: The path of the specific Event Hub to connect the client to.
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.eventhub.EventHubSharedKeyCredential>, or credential objects generated

      by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    types:
    - <xref:azure.core.credentials.TokenCredential> or <xref:azure.core.credentials.AzureSasCredential>
examples:
- "Create a new instance of the EventHubProducerClient.<!--[!code-python[Main](les\\\
  sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
  \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\107\\\\azure-eventhub-5.4.0\\\\samples\\\\\
  sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"force\"\
  : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
  linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventhub import\
  \ EventHubProducerClient, EventHubSharedKeyCredential\n\n   fully_qualified_namespace\
  \ = os.environ['EVENT_HUB_HOSTNAME']\n   eventhub_name = os.environ['EVENT_HUB_NAME']\n\
  \   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['EVENT_HUB_SAS_KEY']\n\n   credential = EventHubSharedKeyCredential(shared_access_policy,\
  \ shared_access_key)\n   producer = EventHubProducerClient(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       eventhub_name=eventhub_name,  # EventHub name should be specified if it\
  \ doesn't show up in connection string.\n       credential=credential\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.eventhub.EventHubProducerClient.close
  name: close
  summary: Close the Producer client underlying AMQP connection and links.
  signature: close()
  return:
    types:
    - '[None](https://docs.python.org/3.6/library/constants.html#None)'
  examples:
  - "Close down the client.<!--[!code-python[Main](les\\sync_samples\\sample_code_eventhub.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\107\\\\azure-eventhub-5.4.0\\\\samples\\\\sync_samples\\\\sample_code_eventhub.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   import os\n   from azure.eventhub import EventHubProducerClient, EventData\n\
    \n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n   try:\n       event_data_batch = producer.create_batch()\n\n       while\
    \ True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # EventDataBatch\
    \ object reaches max_size.\n               # New EventDataBatch object can be\
    \ created here to send more data\n               break\n\n       producer.send_batch(event_data_batch)\n\
    \   finally:\n       # Close down the producer handler.\n       producer.close()\n\
    \n   ````\n"
- uid: azure.eventhub.EventHubProducerClient.create_batch
  name: create_batch
  summary: 'Create an EventDataBatch object with the max size of all content being
    constrained by max_size_in_bytes.


    The max_size_in_bytes should be no greater than the max allowed message size defined
    by the service.'
  signature: create_batch(**kwargs)
  return:
    types:
    - <xref:azure.eventhub.EventDataBatch>
  examples:
  - "Create EventDataBatch object within limited size<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\107\\\\azure-eventhub-5.4.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n       event_data_batch = producer.create_batch()\n\
    \       while True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \n   ````\n"
- uid: azure.eventhub.EventHubProducerClient.from_connection_string
  name: from_connection_string
  summary: Create an EventHubProducerClient from a connection string.
  signature: from_connection_string(conn_str, **kwargs)
  parameters:
  - name: conn_str
    description: The connection string of an Event Hub.
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  - name: conn_str
    isRequired: true
  return:
    types:
    - <xref:azure.eventhub.EventHubProducerClient>
  examples:
  - "Create a new instance of the EventHubProducerClient from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\107\\\\azure-eventhub-5.4.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventhub import\
    \ EventHubProducerClient\n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n\n   ````\n"
- uid: azure.eventhub.EventHubProducerClient.get_eventhub_properties
  name: get_eventhub_properties
  summary: "Get properties of the Event Hub.\n\nKeys in the returned dictionary include:\n\
    \n   * *eventhub_name* (str) \n\n   * *created_at* (UTC datetime.datetime) \n\n\
    \   * *partition_ids* (list[str])"
  signature: get_eventhub_properties()
  return:
    types:
    - '[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)'
- uid: azure.eventhub.EventHubProducerClient.get_partition_ids
  name: get_partition_ids
  summary: Get partition IDs of the Event Hub.
  signature: get_partition_ids()
  return:
    types:
    - '[list](https://docs.python.org/3.6/library/stdtypes.html#list)[[str](https://docs.python.org/3.6/library/stdtypes.html#str)]'
- uid: azure.eventhub.EventHubProducerClient.get_partition_properties
  name: get_partition_properties
  summary: "Get properties of the specified partition.\n\nKeys in the properties dictionary\
    \ include:\n\n   * *eventhub_name* (str) \n\n   * *id* (str) \n\n   * *beginning_sequence_number*\
    \ (int) \n\n   * *last_enqueued_sequence_number* (int) \n\n   * *last_enqueued_offset*\
    \ (str) \n\n   * *last_enqueued_time_utc* (UTC datetime.datetime) \n\n   * *is_empty*\
    \ (bool)"
  signature: get_partition_properties(partition_id)
  parameters:
  - name: partition_id
    description: The target partition ID.
    isRequired: true
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    types:
    - '[dict](https://docs.python.org/3.6/library/stdtypes.html#dict)'
- uid: azure.eventhub.EventHubProducerClient.send_batch
  name: send_batch
  summary: 'Sends event data and blocks until acknowledgement is received or operation
    times out.


    If you''re sending a finite list of *EventData* and you know it''s within the
    event hub

    frame size limit, you can send them with a *send_batch* call. Otherwise, use <xref:azure.eventhub.EventHubProducerClient.create_batch>

    to create *EventDataBatch* and add *EventData* into the batch one by one until
    the size limit,

    and then call this method to send out the batch.'
  signature: send_batch(event_data_batch, **kwargs)
  parameters:
  - name: event_data_batch
    description: 'The *EventDataBatch* object to be sent or a list of *EventData*
      to be sent

      in a batch. All *EventData* in the list or *EventDataBatch* will land on the
      same partition.'
    isRequired: true
    types:
    - <xref:azure.eventhub.Union>[<xref:azure.eventhub.EventDataBatch>, <xref:azure.eventhub.List>[<xref:azure.eventhub.EventData>]]
  return:
    types:
    - '[None](https://docs.python.org/3.6/library/constants.html#None)'
  examples:
  - "Sends event data<!--[!code-python[Main](les\\sync_samples\\sample_code_eventhub.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\107\\\\azure-eventhub-5.4.0\\\\samples\\\\sync_samples\\\\sample_code_eventhub.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       with producer:\n           event_data_batch = producer.create_batch()\n\
    \n           while True:\n               try:\n                   event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n               except ValueError:\n              \
    \     # EventDataBatch object reaches max_size.\n                   # New EventDataBatch\
    \ object can be created here to send more data\n                   break\n\n \
    \          producer.send_batch(event_data_batch)\n\n   ````\n"
