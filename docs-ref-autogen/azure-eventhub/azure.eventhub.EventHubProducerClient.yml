### YamlMime:PythonClass
uid: azure.eventhub.EventHubProducerClient
name: EventHubProducerClient
fullName: azure.eventhub.EventHubProducerClient
module: azure.eventhub
inheritances:
- azure.eventhub._client_base.ClientBase
summary: 'The EventHubProducerClient class defines a high level interface for

  sending events to the Azure Event Hubs service.'
constructor:
  syntax: EventHubProducerClient(fully_qualified_namespace, eventhub_name, credential,
    **kwargs)
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Event Hubs namespace.

      This is likely to be similar to <yournamespace>.servicebus.windows.net'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: The path of the specific Event Hub to connect the client to.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.eventhub.EventHubSharedKeyCredential>, or credential objects generated

      by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
    - '<xref:azure.core.credentials.AzureSasCredential>

      or <xref:azure.core.credentials.AzureNamedKeyCredential>'
variables:
- description: Whether to output network trace logs to the logger. Default is *False*.
  name: logging_enable
  types:
  - <xref:bool>
- description: 'The time in seconds to wait for a token to be authorized by the service.

    The default value is 60 seconds. If set to 0, no timeout will be enforced from
    the client.'
  name: auth_timeout
  types:
  - <xref:float>
- description: If specified, this will be added in front of the user agent string.
  name: user_agent
  types:
  - <xref:str>
- description: 'The total number of attempts to redo a failed operation when an error
    occurs. Default

    value is 3.'
  name: retry_total
  types:
  - <xref:int>
- description: 'Timeout, in seconds, after which this client will close the underlying
    connection

    if there is no activity. By default the value is None, meaning that the client
    will not shutdown due to inactivity

    unless initiated by the service.'
  name: idle_timeout
  types:
  - <xref:float>
- description: 'The type of transport protocol that will be used for communicating
    with

    the Event Hubs service. Default is *TransportType.Amqp* in which case port 5671
    is used.

    If the port 5671 is unavailable/blocked in the network environment, *TransportType.AmqpOverWebsocket*
    could

    be used instead which uses port 443 for communication.'
  name: transport_type
  types:
  - <xref:azure.eventhub.TransportType>
- description: 'HTTP proxy settings. This must be a dictionary with the following

    keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

    Additionally the following keys may also be present: *''username'', ''password''*.'
  name: http_proxy
  types:
  - <xref:dict>
- description: 'The custom endpoint address to use for establishing a connection to

    the Event Hubs service, allowing network requests to be routed through any application
    gateways or

    other paths needed for the host environment. Default is None.

    The format would be like "sb://<custom_endpoint_hostname>:<custom_endpoint_port>".

    If port is not specified in the *custom_endpoint_address*, by default port 443
    will be used.'
  name: custom_endpoint_address
  types:
  - <xref:str>
- description: 'Path to the custom CA_BUNDLE file of the SSL certificate which is
    used to

    authenticate the identity of the connection endpoint.

    Default is None in which case *certifi.where()* will be used.'
  name: connection_verify
  types:
  - <xref:str>
examples:
- "Create a new instance of the EventHubProducerClient.<!--[!code-python[Main](les\\\
  sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
  \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\107\\\\azure-eventhub-5.5.0\\\\samples\\\\\
  sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"force\"\
  : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
  linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventhub import\
  \ EventHubProducerClient, EventHubSharedKeyCredential\n\n   fully_qualified_namespace\
  \ = os.environ['EVENT_HUB_HOSTNAME']\n   eventhub_name = os.environ['EVENT_HUB_NAME']\n\
  \   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['EVENT_HUB_SAS_KEY']\n\n   credential = EventHubSharedKeyCredential(shared_access_policy,\
  \ shared_access_key)\n   producer = EventHubProducerClient(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
  \       eventhub_name=eventhub_name,  # EventHub name should be specified if it\
  \ doesn't show up in connection string.\n       credential=credential\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.eventhub.EventHubProducerClient.close
  name: close
  summary: Close the Producer client underlying AMQP connection and links.
  signature: close()
  return:
    types:
    - <xref:None>
  examples:
  - "Close down the client.<!--[!code-python[Main](les\\sync_samples\\sample_code_eventhub.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\107\\\\azure-eventhub-5.5.0\\\\samples\\\\sync_samples\\\\sample_code_eventhub.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   import os\n   from azure.eventhub import EventHubProducerClient, EventData\n\
    \n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n   try:\n       event_data_batch = producer.create_batch()\n\n       while\
    \ True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # EventDataBatch\
    \ object reaches max_size.\n               # New EventDataBatch object can be\
    \ created here to send more data\n               break\n\n       producer.send_batch(event_data_batch)\n\
    \   finally:\n       # Close down the producer handler.\n       producer.close()\n\
    \n   ````\n"
- uid: azure.eventhub.EventHubProducerClient.create_batch
  name: create_batch
  summary: 'Create an EventDataBatch object with the max size of all content being
    constrained by max_size_in_bytes.


    The max_size_in_bytes should be no greater than the max allowed message size defined
    by the service.'
  signature: create_batch(**kwargs)
  return:
    types:
    - <xref:azure.eventhub.EventDataBatch>
  examples:
  - "Create EventDataBatch object within limited size<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\107\\\\azure-eventhub-5.5.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n       event_data_batch = producer.create_batch()\n\
    \       while True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \n   ````\n"
- uid: azure.eventhub.EventHubProducerClient.from_connection_string
  name: from_connection_string
  summary: Create an EventHubProducerClient from a connection string.
  signature: from_connection_string(conn_str, **kwargs)
  parameters:
  - name: conn_str
    description: The connection string of an Event Hub.
    isRequired: true
    types:
    - <xref:str>
  - name: conn_str
    isRequired: true
  return:
    types:
    - <xref:azure.eventhub.EventHubProducerClient>
  examples:
  - "Create a new instance of the EventHubProducerClient from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\107\\\\azure-eventhub-5.5.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventhub import\
    \ EventHubProducerClient\n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n\n   ````\n"
- uid: azure.eventhub.EventHubProducerClient.get_eventhub_properties
  name: get_eventhub_properties
  summary: "Get properties of the Event Hub.\n\nKeys in the returned dictionary include:\n\
    \n   * *eventhub_name* (str) \n\n   * *created_at* (UTC datetime.datetime) \n\n\
    \   * *partition_ids* (list[str])"
  signature: get_eventhub_properties()
  return:
    types:
    - <xref:dict>
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.EventHubProducerClient.get_partition_ids
  name: get_partition_ids
  summary: Get partition IDs of the Event Hub.
  signature: get_partition_ids()
  return:
    types:
    - <xref:list>[<xref:str>]
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.EventHubProducerClient.get_partition_properties
  name: get_partition_properties
  summary: "Get properties of the specified partition.\n\nKeys in the properties dictionary\
    \ include:\n\n   * *eventhub_name* (str) \n\n   * *id* (str) \n\n   * *beginning_sequence_number*\
    \ (int) \n\n   * *last_enqueued_sequence_number* (int) \n\n   * *last_enqueued_offset*\
    \ (str) \n\n   * *last_enqueued_time_utc* (UTC datetime.datetime) \n\n   * *is_empty*\
    \ (bool)"
  signature: get_partition_properties(partition_id)
  parameters:
  - name: partition_id
    description: The target partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:dict>
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.EventHubProducerClient.send_batch
  name: send_batch
  summary: 'Sends event data and blocks until acknowledgement is received or operation
    times out.


    If you''re sending a finite list of *EventData* and you know it''s within the
    event hub

    frame size limit, you can send them with a *send_batch* call. Otherwise, use <xref:azure.eventhub.EventHubProducerClient.create_batch>

    to create *EventDataBatch* and add *EventData* into the batch one by one until
    the size limit,

    and then call this method to send out the batch.'
  signature: send_batch(event_data_batch, **kwargs)
  parameters:
  - name: event_data_batch
    description: 'The *EventDataBatch* object to be sent or a list of *EventData*
      to be sent

      in a batch. All *EventData* in the list or *EventDataBatch* will land on the
      same partition.'
    isRequired: true
    types:
    - <xref:azure.eventhub.Union>[<xref:azure.eventhub.EventDataBatch>, <xref:azure.eventhub.List>[<xref:azure.eventhub.EventData>]]
  return:
    types:
    - <xref:None>
  exceptions:
  - type: 'azure.eventhub.exceptions.AuthenticationError>

      <xref:azure.eventhub.exceptions.ConnectError>

      <xref:azure.eventhub.exceptions.ConnectionLostError>

      <xref:azure.eventhub.exceptions.EventDataError>

      <xref:azure.eventhub.exceptions.EventDataSendError>

      <xref:azure.eventhub.exceptions.EventHubError>

      <xref:azure.eventhub.ValueError>

      <xref:azure.eventhub.TypeError'
  examples:
  - "Sends event data<!--[!code-python[Main](les\\sync_samples\\sample_code_eventhub.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\107\\\\azure-eventhub-5.5.0\\\\samples\\\\sync_samples\\\\sample_code_eventhub.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       with producer:\n           event_data_batch = producer.create_batch()\n\
    \n           while True:\n               try:\n                   event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n               except ValueError:\n              \
    \     # EventDataBatch object reaches max_size.\n                   # New EventDataBatch\
    \ object can be created here to send more data\n                   break\n\n \
    \          producer.send_batch(event_data_batch)\n\n   ````\n"
