### YamlMime:PythonClass
uid: azure.datalake.store.lib.DatalakeRESTInterface
name: DatalakeRESTInterface
fullName: azure.datalake.store.lib.DatalakeRESTInterface
module: azure.datalake.store.lib
inheritances:
- builtins.object
summary: Call factory for webHDFS endpoints on ADLS
constructor:
  syntax: DatalakeRESTInterface(store_name=None, token=None, url_suffix='azuredatalakestore.net',
    api_version='2018-09-01', req_timeout_s=60, **kwargs)
  parameters:
  - name: store_name
    description: The name of the Data Lake Store account to execute operations against.
    types:
    - <xref:str>
  - name: token
    description: from *auth()* or *refresh_token()* or other ADAL source
    types:
    - <xref:dict>
  - name: url_suffix
    description: 'Domain to send REST requests to. The end-point URL is constructed

      using this and the store_name. If None, use default.'
    types:
    - <xref:str >(<xref:None>)
  - name: api_version
    description: 'The API version to target with requests. Changing this value will

      change the behavior of the requests, and can cause unexpected behavior or

      breaking changes. Changes to this value should be undergone with caution.'
    types:
    - <xref:str >(<xref:2018-09-01>)
  - name: req_timeout_s
    description: This is the timeout for each requests library call.
    types:
    - <xref:float>(<xref:60>)
  - name: kwargs
    description: 'See `auth()`. Includes, e.g., username, password, tenant; will pull

      values from environment variables if not provided.'
    types:
    - <xref:optional arguments to auth>
methods:
- uid: azure.datalake.store.lib.DatalakeRESTInterface.call
  name: call
  summary: Execute a REST call
  signature: call(op, path='', is_extended=False, expected_error_code=None, retry_policy=None,
    headers={}, **kwargs)
  parameters:
  - name: op
    description: webHDFS operation to perform, one of *DatalakeRESTInterface.ends*
    isRequired: true
    types:
    - <xref:str>
  - name: path
    description: filepath on the remote system
    types:
    - <xref:str>
  - name: is_extended
    description: 'Indicates if the API call comes from the webhdfs extensions path
      or the basic webhdfs path.

      By default, all requests target the official webhdfs path. A small subset of
      custom convenience

      methods specific to Azure Data Lake Store target the extension path (such as
      SETEXPIRY).'
    defaultValue: 'False'
    types:
    - <xref:bool >(<xref:False>)
  - name: expected_error_code
    description: 'Optionally indicates a specific, expected error code, if any. In
      the event that this error

      is returned, the exception will be logged to DEBUG instead of ERROR stream.
      The exception

      will still be raised, however, as it is expected that the caller will expect
      to handle it

      and do something different if it is raised.'
    defaultValue: None
    types:
    - <xref:int>
  - name: kwargs
    description: 'other parameters, as defined by the webHDFS standard and

<<<<<<< HEAD
      [https://msdn.microsoft.com/en-us/library/mt710547.aspx](https://msdn.microsoft.com/en-us/library/mt710547.aspx)'
    defaultValue: None
    types:
    - <xref:dict>
  - name: headers
    defaultValue: '{}'
- uid: azure.datalake.store.lib.DatalakeRESTInterface.is_successful_response
  name: is_successful_response
  signature: is_successful_response(response, exception)
  parameters:
  - name: response
    isRequired: true
  - name: exception
    isRequired: true
- uid: azure.datalake.store.lib.DatalakeRESTInterface.log_response_and_raise
  name: log_response_and_raise
  signature: log_response_and_raise(response, exception, level=40)
  parameters:
  - name: response
    isRequired: true
  - name: exception
    isRequired: true
  - name: level
    defaultValue: '40'
attributes:
- uid: azure.datalake.store.lib.DatalakeRESTInterface.ends
=======
        [https://msdn.microsoft.com/en-us/library/mt710547.aspx](https://msdn.microsoft.com/en-us/library/mt710547.aspx)'
      id: kwargs
      type:
      - dict
    - defaultValue: '{}'
      id: headers
  type: method
  uid: azure.datalake.store.lib.DatalakeRESTInterface.call
- class: azure.datalake.store.lib.DatalakeRESTInterface
  fullName: azure.datalake.store.lib.DatalakeRESTInterface.is_successful_response
  langs:
  - python
  module: azure.datalake.store.lib
  name: is_successful_response(response, exception)
  namewithoutparameters: is_successful_response
  source:
    id: is_successful_response
    path: azure\datalake\store\lib.py
    remote:
      branch: master
      path: azure\datalake\store\lib.py
      repo: https://github.com/Azure/azure-data-lake-store-python
    startLine: 467
  syntax:
    content: is_successful_response(response, exception)
    parameters:
    - id: response
      isRequired: true
    - id: exception
      isRequired: true
  type: method
  uid: azure.datalake.store.lib.DatalakeRESTInterface.is_successful_response
- class: azure.datalake.store.lib.DatalakeRESTInterface
  fullName: azure.datalake.store.lib.DatalakeRESTInterface.log_response_and_raise
  langs:
  - python
  module: azure.datalake.store.lib
  name: log_response_and_raise(response, exception, level=40)
  namewithoutparameters: log_response_and_raise
  source:
    id: log_response_and_raise
    path: azure\datalake\store\lib.py
    remote:
      branch: master
      path: azure\datalake\store\lib.py
      repo: https://github.com/Azure/azure-data-lake-store-python
    startLine: 337
  syntax:
    content: log_response_and_raise(response, exception, level=40)
    parameters:
    - id: response
      isRequired: true
    - id: exception
      isRequired: true
    - defaultValue: '40'
      id: level
  type: method
  uid: azure.datalake.store.lib.DatalakeRESTInterface.log_response_and_raise
- class: azure.datalake.store.lib.DatalakeRESTInterface
  fullName: azure.datalake.store.lib.DatalakeRESTInterface.ends
  langs:
  - python
  module: azure.datalake.store.lib
  name: ends
  syntax:
    content: 'ends = {''APPEND'': (''post'', set(), {''syncFlag'', ''append'', ''filesessionid'',
      ''offset'', ''leaseid''}), ''CHECKACCESS'': (''get'', set(), {''fsaction''}),
      ''CONCAT'': (''post'', {''sources''}, {''sources''}), ''MSCONCAT'': (''post'',
      set(), {''deleteSourceDirectory''}), ''CREATE'': (''put'', set(), {''overwrite'',
      ''syncFlag'', ''filesessionid'', ''write'', ''leaseid''}), ''DELETE'': (''delete'',
      set(), {''recursive''}), ''GETCONTENTSUMMARY'': (''get'', set(), set()), ''GETFILESTATUS'':
      (''get'', set(), set()), ''LISTSTATUS'': (''get'', set(), {''listAfter'', ''listSize''}),
      ''MKDIRS'': (''put'', set(), set()), ''OPEN'': (''get'', set(), {''filesessionid'',
      ''offset'', ''length'', ''read''}), ''RENAME'': (''put'', {''destination''},
      {''destination''}), ''SETOWNER'': (''put'', set(), {''group'', ''owner''}),
      ''SETPERMISSION'': (''put'', set(), {''permission''}), ''SETEXPIRY'': (''put'',
      {''expiryOption''}, {''expiryOption'', ''expireTime''}), ''SETACL'': (''put'',
      {''aclSpec''}, {''aclSpec''}), ''MODIFYACLENTRIES'': (''put'', {''aclSpec''},
      {''aclSpec''}), ''REMOVEACLENTRIES'': (''put'', {''aclSpec''}, {''aclSpec''}),
      ''REMOVEACL'': (''put'', set(), set()), ''MSGETACLSTATUS'': (''get'', set(),
      set()), ''REMOVEDEFAULTACL'': (''put'', set(), set())}'
  type: attribute
  uid: azure.datalake.store.lib.DatalakeRESTInterface.ends
references:
- fullName: azure.datalake.store.lib.DatalakeRESTInterface.call
  isExternal: false
  name: call(op, path='', is_extended=False, expected_error_code=None, retry_policy=None,
    headers={}, **kwargs)
  parent: azure.datalake.store.lib.DatalakeRESTInterface
  uid: azure.datalake.store.lib.DatalakeRESTInterface.call
- fullName: azure.datalake.store.lib.DatalakeRESTInterface.is_successful_response
  isExternal: false
  name: is_successful_response(response, exception)
  parent: azure.datalake.store.lib.DatalakeRESTInterface
  uid: azure.datalake.store.lib.DatalakeRESTInterface.is_successful_response
- fullName: azure.datalake.store.lib.DatalakeRESTInterface.log_response_and_raise
  isExternal: false
  name: log_response_and_raise(response, exception, level=40)
  parent: azure.datalake.store.lib.DatalakeRESTInterface
  uid: azure.datalake.store.lib.DatalakeRESTInterface.log_response_and_raise
- fullName: str (None)
  name: str (None)
  spec.python:
  - fullName: 'str '
    name: 'str '
    uid: 'str '
  - fullName: (
    name: (
  - fullName: None
    name: None
    uid: None
  - fullName: )
    name: )
  uid: str (None)
- fullName: str (2018-09-01)
  name: str (2018-09-01)
  spec.python:
  - fullName: 'str '
    name: 'str '
    uid: 'str '
  - fullName: (
    name: (
  - fullName: '2018-09-01'
    name: '2018-09-01'
    uid: '2018-09-01'
  - fullName: )
    name: )
  uid: str (2018-09-01)
- fullName: float(60)
  name: float(60)
  spec.python:
  - fullName: float
    name: float
    uid: float
  - fullName: (
    name: (
  - fullName: '60'
    name: '60'
    uid: '60'
  - fullName: )
    name: )
  uid: float(60)
- fullName: azure.datalake.store.lib.DatalakeRESTInterface.ends
  isExternal: false
>>>>>>> smoke-test
  name: ends
  signature: 'ends = {''APPEND'': (''post'', set(), {''append'', ''filesessionid'',
    ''offset'', ''leaseid'', ''syncFlag''}), ''CHECKACCESS'': (''get'', set(), {''fsaction''}),
    ''CONCAT'': (''post'', {''sources''}, {''sources''}), ''MSCONCAT'': (''post'',
    set(), {''deleteSourceDirectory''}), ''CREATE'': (''put'', set(), {''filesessionid'',
    ''leaseid'', ''syncFlag'', ''write'', ''overwrite''}), ''DELETE'': (''delete'',
    set(), {''recursive''}), ''GETCONTENTSUMMARY'': (''get'', set(), set()), ''GETFILESTATUS'':
    (''get'', set(), set()), ''LISTSTATUS'': (''get'', set(), {''listAfter'', ''listSize''}),
    ''MKDIRS'': (''put'', set(), set()), ''OPEN'': (''get'', set(), {''read'', ''filesessionid'',
    ''offset'', ''length''}), ''RENAME'': (''put'', {''destination''}, {''destination''}),
    ''SETOWNER'': (''put'', set(), {''group'', ''owner''}), ''SETPERMISSION'': (''put'',
    set(), {''permission''}), ''SETEXPIRY'': (''put'', {''expiryOption''}, {''expireTime'',
    ''expiryOption''}), ''SETACL'': (''put'', {''aclSpec''}, {''aclSpec''}), ''MODIFYACLENTRIES'':
    (''put'', {''aclSpec''}, {''aclSpec''}), ''REMOVEACLENTRIES'': (''put'', {''aclSpec''},
    {''aclSpec''}), ''REMOVEACL'': (''put'', set(), set()), ''MSGETACLSTATUS'': (''get'',
    set(), set()), ''REMOVEDEFAULTACL'': (''put'', set(), set())}'
