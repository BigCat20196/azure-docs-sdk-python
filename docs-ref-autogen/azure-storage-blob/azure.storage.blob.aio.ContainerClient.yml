### YamlMime:PythonClass
uid: azure.storage.blob.aio.ContainerClient
name: ContainerClient
fullName: azure.storage.blob.aio.ContainerClient
module: azure.storage.blob.aio
inheritances:
- azure.storage.blob._shared.base_client_async.AsyncStorageAccountHostsMixin
- azure.storage.blob._container_client.ContainerClient
summary: 'A client to interact with a specific container, although that container

  may not yet exist.


  For operations relating to a specific blob within this container, a blob client
  can be

  retrieved using the <xref:azure.storage.blob.aio.ContainerClient.get_blob_client>
  function.'
constructor:
  syntax: ContainerClient(account_url, container_name, credential=None, **kwargs)
  parameters:
  - name: account_url
    description: 'The URI to the storage account. In order to create a client given
      the full URI to the container,

      use the <xref:azure.storage.blob.aio.from_container_url> classmethod.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  - name: container_name
    description: The name of the container for the blob.
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string,

      an instance of a AzureSasCredential from azure.core.credentials, an account

      shared access key, or an instance of a TokenCredentials class from azure.identity.

      If the resource URI already contains a SAS token, this will be ignored in favor
      of an explicit credential

      - except in the case of AzureSasCredential, where the conflicting SAS tokens
      will raise a ValueError.'
    isRequired: true
examples:
- "Get a ContainerClient from an existing BlobServiceClient.<!--[!code-python[Main](les\\\
  blob_samples_containers_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # Instantiate\
  \ a BlobServiceClient using a connection string\n   from azure.storage.blob.aio\
  \ import BlobServiceClient\n   blob_service_client = BlobServiceClient.from_connection_string(self.connection_string)\n\
  \n   # Instantiate a ContainerClient\n   container_client = blob_service_client.get_container_client(\"\
  mynewcontainerasync\")\n\n   ````\n\nCreating the container client directly.<!--[!code-python[Main](les\\\
  blob_samples_containers_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.storage.blob.aio\
  \ import ContainerClient\n\n   sas_url = sas_url = \"https://account.blob.core.windows.net/mycontainer?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\"\
  \n   container = ContainerClient.from_container_url(sas_url)\n\n   ````\n"
methods:
- uid: azure.storage.blob.aio.ContainerClient.acquire_lease
  name: acquire_lease
  summary: 'Requests a new lease. If the container does not have an active lease,

    the Blob service creates a lease on the container and returns a new

    lease ID.'
  signature: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  parameters:
  - name: lease_duration
    description: 'Specifies the duration of the lease, in seconds, or negative one

      (-1) for a lease that never expires. A non-infinite lease can be

      between 15 and 60 seconds. A lease duration cannot be changed

      using renew or change. Default is -1 (infinite lease).'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.int>
  - name: lease_id
    description: 'Proposed lease ID, in a GUID string format. The Blob service returns

      400 (Invalid request) if the proposed lease ID is not in the correct format.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  return:
    description: A BlobLeaseClient object, that can be run in a context manager.
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
  examples:
  - "Acquiring a lease on the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Acquire a lease on the container\n   lease = await container_client.acquire_lease()\n\
    \n   # Delete container by passing in the lease\n   await container_client.delete_container(lease=lease)\n\
    \n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.create_container
  name: create_container
  summary: 'Creates a new container under the specified account. If the container

    with the same name already exists, the operation fails.'
  signature: create_container(metadata=None, public_access=None, **kwargs)
  parameters:
  - name: metadata
    description: 'A dict with name_value pairs to associate with the

      container as metadata. Example:{''Category'':''test''}'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.dict>[<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.aio.str>]
  - name: public_access
    description: 'Possible values include: ''container'', ''blob''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PublicAccess>
  return:
    types:
    - <xref:None>
  examples:
  - "Creating a container to store blobs.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   await container_client.create_container()\n\n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.delete_blob
  name: delete_blob
  summary: 'Marks the specified blob or snapshot for deletion.


    The blob is later deleted during garbage collection.

    Note that in order to delete a blob, you must delete all of its

    snapshots. You can delete both at the same time with the delete_blob

    operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blob or snapshot

    and retains the blob or snapshot for specified number of days.

    After specified number of days, blob''s data is removed from the service during
    garbage collection.

    Soft deleted blob or snapshot is accessible through <xref:azure.storage.blob.aio.ContainerClient.list_blobs>
    specifying *include=["deleted"]*

    option. Soft-deleted blob or snapshot can be restored using <xref:BlobClient.undelete>'
  signature: delete_blob(blob, delete_snapshots=None, **kwargs)
  parameters:
  - name: blob
    description: 'The blob with which to interact. If specified, this value will override

      a blob value specified in the blob URL.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str> or <xref:azure.storage.blob.BlobProperties>
  - name: delete_snapshots
    description: "Required if the blob has associated snapshots. Values include:\n\
      \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
      \ the blob along with all snapshots."
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  return:
    types:
    - <xref:None>
- uid: azure.storage.blob.aio.ContainerClient.delete_blobs
  name: delete_blobs
  summary: 'Marks the specified blobs or snapshots for deletion.


    The blobs are later deleted during garbage collection.

    Note that in order to delete blobs, you must delete all of their

    snapshots. You can delete both at the same time with the delete_blobs operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blobs or snapshots

    and retains the blobs or snapshots for specified number of days.

    After specified number of days, blobs'' data is removed from the service during
    garbage collection.

    Soft deleted blobs or snapshots are accessible through <xref:azure.storage.blob.aio.ContainerClient.list_blobs>
    specifying *include=["deleted"]*

    Soft-deleted blobs or snapshots can be restored using <xref:BlobClient.undelete>'
  signature: 'delete_blobs(*blobs: typing.List[typing.Union[str, azure.storage.blob._models.BlobProperties,
    dict]], **kwargs) -> AsyncIterator[azure.core.pipeline.transport._base_async.AsyncHttpResponse]'
  parameters:
  - name: blobs
    description: "The blobs to delete. This can be a single blob, or multiple values\
      \ can\nbe supplied, where each value is either the name of the blob (str) or\
      \ BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict, here\u2019s\
      \ a list of keys, value rules.\n>\n> \n>\n> blob name:\n>\n> \n>\n> key: \u2018\
      name\u2019, value type: str\n>\n> \n>\n> snapshot you want to delete:\n>\n>\
      \ \n>\n> key: \u2018snapshot\u2019, value type: str\n>\n> \n>\n> whether to\
      \ delete snapthots when deleting blob:\n>\n> \n>\n> key: \u2018delete_snapshots\u2019\
      , value: \u2018include\u2019 or \u2018only\u2019\n>\n> \n>\n> if the blob modified\
      \ or not:\n>\n> \n>\n> key: \u2018if_modified_since\u2019, \u2018if_unmodified_since\u2019\
      , value type: datetime\n>\n> \n>\n> etag:\n>\n> \n>\n> key: \u2018etag\u2019\
      , value type: str\n>\n> \n>\n> match the etag or not:\n>\n> \n>\n> key: \u2018\
      match_condition\u2019, value type: MatchConditions\n>\n> \n>\n> tags match condition:\n\
      >\n> \n>\n> key: \u2018if_tags_match_condition\u2019, value type: str\n>\n>\
      \ \n>\n> lease:\n>\n> \n>\n> key: \u2018lease_id\u2019, value type: Union[str,\
      \ LeaseClient]\n>\n> \n>\n> timeout for subrequest:\n>\n> \n>\n> key: \u2018\
      timeout\u2019, value type: int\n>"
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.str>], <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.dict>],
      or <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.BlobProperties>]
  return:
    description: An async iterator of responses, one for each blob in order
    types:
    - <xref:azure.storage.blob.aio.asynciterator>[<xref:azure.core.pipeline.transport.AsyncHttpResponse>]
  examples:
  - "Deleting multiple blobs.<!--[!code-python[Main](les\\blob_samples_common_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_common_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Delete multiple blobs in the container by name\n   await container_client.delete_blobs(\"\
    my_blob1\", \"my_blob2\")\n\n   # Delete multiple blobs by properties iterator\n\
    \   my_blobs = container_client.list_blobs(name_starts_with=\"my_blob\")\n   await\
    \ container_client.delete_blobs(*[b async for b in my_blobs])  # async for in\
    \ list comprehension after 3.6 only\n\n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.delete_container
  name: delete_container
  summary: 'Marks the specified container for deletion. The container and any blobs

    contained within it are later deleted during garbage collection.'
  signature: delete_container(**kwargs)
  return:
    types:
    - <xref:None>
  examples:
  - "Delete a container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   await container_client.delete_container()\n\n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.download_blob
  name: download_blob
  summary: 'Downloads a blob to the StorageStreamDownloader. The readall() method
    must

    be used to read all the content or readinto() must be used to download the blob
    into

    a stream. Using chunks() returns an async iterator which allows the user to iterate
    over the content in chunks.'
  signature: download_blob(blob, offset=None, length=None, **kwargs)
  parameters:
  - name: blob
    description: 'The blob with which to interact. If specified, this value will override

      a blob value specified in the blob URL.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str> or <xref:azure.storage.blob.BlobProperties>
  - name: offset
    description: 'Start of byte range to use for downloading a section of the blob.

      Must be set if length is provided.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.int>
  - name: length
    description: 'Number of bytes to read from the stream. This is optional, but

      should be supplied for optimal performance.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.int>
  return:
    description: A streaming object. (StorageStreamDownloader)
    types:
    - <xref:azure.storage.blob.aio.StorageStreamDownloader>
- uid: azure.storage.blob.aio.ContainerClient.exists
  name: exists
  summary: Returns True if a container exists and returns False otherwise.
  signature: exists(**kwargs)
  return:
    description: boolean
- uid: azure.storage.blob.aio.ContainerClient.get_account_information
  name: get_account_information
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  signature: get_account_information(**kwargs)
  return:
    description: A dict of account information (SKU and account type).
    types:
    - <xref:azure.storage.blob.aio.dict>(<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.aio.str>)
- uid: azure.storage.blob.aio.ContainerClient.get_blob_client
  name: get_blob_client
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  signature: get_blob_client(blob, snapshot=None)
  parameters:
  - name: blob
    description: The blob with which to interact.
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str> or <xref:azure.storage.blob.BlobProperties>
  - name: snapshot
    description: 'The optional blob snapshot on which to operate. This can be the
      snapshot ID string

      or the response returned from <xref:azure.storage.blob.aio.BlobClient.create_snapshot>.'
    isRequired: true
    defaultValue: None
    types:
    - <xref:azure.storage.blob.aio.str>
  return:
    description: A BlobClient.
    types:
    - <xref:azure.storage.blob.aio.BlobClient>
  examples:
  - "Get the blob client.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Get the BlobClient from the ContainerClient to interact with a specific\
    \ blob\n   blob_client = container_client.get_blob_client(\"mynewblob\")\n\n \
    \  ````\n"
- uid: azure.storage.blob.aio.ContainerClient.get_container_access_policy
  name: get_container_access_policy
  summary: 'Gets the permissions for the specified container.

    The permissions indicate whether container data may be accessed publicly.'
  signature: get_container_access_policy(**kwargs)
  return:
    description: Access policy information in a dict.
    types:
    - <xref:azure.storage.blob.aio.dict>[<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.aio.Any>]
  examples:
  - "Getting the access policy on the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   policy = await container_client.get_container_access_policy()\n\n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.get_container_properties
  name: get_container_properties
  summary: 'Returns all user-defined metadata and system properties for the specified

    container. The data returned does not include the container''s list of blobs.'
  signature: get_container_properties(**kwargs)
  return:
    description: Properties for the specified container within a container object.
    types:
    - <xref:azure.storage.blob.ContainerProperties>
  examples:
  - "Getting properties on the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   properties = await container_client.get_container_properties()\n\n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.list_blobs
  name: list_blobs
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  signature: list_blobs(name_starts_with=None, include=None, **kwargs)
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  - name: or str include
    description: 'Specifies one or more additional datasets to include in the response.

      Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
      ''deleted'', ''tags''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.str>]
  return:
    description: An iterable (auto-paging) response of BlobProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.storage.blob.BlobProperties>]
  examples:
  - "List the blobs in the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   blobs_list = []\n   async for blob in container_client.list_blobs():\n  \
    \     blobs_list.append(blob)\n\n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.set_container_access_policy
  name: set_container_access_policy
  summary: 'Sets the permissions for the specified container or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether blobs in a container may be accessed publicly.'
  signature: set_container_access_policy(signed_identifiers, public_access=None, **kwargs)
  parameters:
  - name: signed_identifiers
    description: 'A dictionary of access policies to associate with the container.
      The

      dictionary may contain up to 5 elements. An empty dictionary

      will clear the access policies set on the service.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.dict>[<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.AccessPolicy>]
  - name: public_access
    description: 'Possible values include: ''container'', ''blob''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PublicAccess>
  return:
    description: Container-updated property dict (Etag and last modified).
    types:
    - <xref:azure.storage.blob.aio.dict>[<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.aio.str>
    - <xref:datetime.datetime>]
  examples:
  - "Setting access policy on the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Create access policy\n   from azure.storage.blob import AccessPolicy, ContainerSasPermissions\n\
    \   access_policy = AccessPolicy(permission=ContainerSasPermissions(read=True),\n\
    \                               expiry=datetime.utcnow() + timedelta(hours=1),\n\
    \                               start=datetime.utcnow() - timedelta(minutes=1))\n\
    \n   identifiers = {'my-access-policy-id': access_policy}\n\n   # Set the access\
    \ policy on the container\n   await container_client.set_container_access_policy(signed_identifiers=identifiers)\n\
    \n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.set_container_metadata
  name: set_container_metadata
  summary: 'Sets one or more user-defined name-value pairs for the specified

    container. Each call to this operation replaces all existing metadata

    attached to the container. To remove all metadata from the container,

    call this operation with no metadata dict.'
  signature: set_container_metadata(metadata=None, **kwargs)
  parameters:
  - name: metadata
    description: 'A dict containing name-value pairs to associate with the container
      as

      metadata. Example: {''category'':''test''}'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.dict>[<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.aio.str>]
  return:
    description: Container-updated property dict (Etag and last modified).
  examples:
  - "Setting metadata on the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Create key, value pairs for metadata\n   metadata = {'type': 'test'}\n\n\
    \   # Set metadata on the container\n   await container_client.set_container_metadata(metadata=metadata)\n\
    \n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
  name: set_premium_page_blob_tier_blobs
  summary: Sets the page blob tiers on the blobs. This API is only supported for page
    blobs on premium accounts.
  signature: 'set_premium_page_blob_tier_blobs(premium_page_blob_tier: typing.Union[str,
    PremiumPageBlobTier], *blobs: typing.List[typing.Union[str, azure.storage.blob._models.BlobProperties,
    dict]], **kwargs) -> AsyncIterator[azure.core.pipeline.transport._base_async.AsyncHttpResponse]'
  parameters:
  - name: premium_page_blob_tier
    description: 'A page blob tier value to set on all blobs to. The tier correlates
      to the size of the

      blob and number of allowed IOPS. This is only applicable to page blobs on

      premium storage accounts.



      > [!NOTE]

      > If you want to set different tier on different blobs please set this positional
      parameter to None.

      >

      > Then the blob tier on every BlobProperties will be taken.

      >'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PremiumPageBlobTier>
  - name: blobs
    description: "The blobs with which to interact. This can be a single blob, or\
      \ multiple values can\nbe supplied, where each value is either the name of the\
      \ blob (str) or BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict,\
      \ here\u2019s a list of keys, value rules.\n>\n> \n>\n> blob name:\n>\n> \n\
      >\n> key: \u2018name\u2019, value type: str\n>\n> \n>\n> premium blob tier:\n\
      >\n> \n>\n> key: \u2018blob_tier\u2019, value type: PremiumPageBlobTier\n>\n\
      > \n>\n> lease:\n>\n> \n>\n> key: \u2018lease_id\u2019, value type: Union[str,\
      \ LeaseClient]\n>\n> \n>\n> timeout for subrequest:\n>\n> \n>\n> key: \u2018\
      timeout\u2019, value type: int\n>"
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.str>], <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.dict>],
      or <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.BlobProperties>]
  return:
    description: An async iterator of responses, one for each blob in order
    types:
    - <xref:azure.storage.blob.aio.asynciterator>[<xref:azure.core.pipeline.transport.AsyncHttpResponse>]
- uid: azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
  name: set_standard_blob_tier_blobs
  summary: 'This operation sets the tier on block blobs.


    A block blob''s tier determines Hot/Cool/Archive storage type.

    This operation does not update the blob''s ETag.'
  signature: 'set_standard_blob_tier_blobs(standard_blob_tier: typing.Union[str, StandardBlobTier],
    *blobs: typing.List[typing.Union[str, azure.storage.blob._models.BlobProperties,
    dict]], **kwargs) -> AsyncIterator[azure.core.pipeline.transport._base_async.AsyncHttpResponse]'
  parameters:
  - name: standard_blob_tier
    description: 'Indicates the tier to be set on all blobs. Options include ''Hot'',
      ''Cool'',

      ''Archive''. The hot tier is optimized for storing data that is accessed

      frequently. The cool storage tier is optimized for storing data that

      is infrequently accessed and stored for at least a month. The archive

      tier is optimized for storing data that is rarely accessed and stored

      for at least six months with flexible latency requirements.



      > [!NOTE]

      > If you want to set different tier on different blobs please set this positional
      parameter to None.

      >

      > Then the blob tier on every BlobProperties will be taken.

      >'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str> or <xref:azure.storage.blob.StandardBlobTier>
  - name: blobs
    description: "The blobs with which to interact. This can be a single blob, or\
      \ multiple values can\nbe supplied, where each value is either the name of the\
      \ blob (str) or BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict,\
      \ here\u2019s a list of keys, value rules.\n>\n> blob name:\n>\n> \n>\n> key:\
      \ \u2018name\u2019, value type: str\n>\n> \n>\n> standard blob tier:\n>\n> \n\
      >\n> key: \u2018blob_tier\u2019, value type: StandardBlobTier\n>\n> \n>\n> rehydrate\
      \ priority:\n>\n> \n>\n> key: \u2018rehydrate_priority\u2019, value type: RehydratePriority\n\
      >\n> \n>\n> lease:\n>\n> \n>\n> key: \u2018lease_id\u2019, value type: Union[str,\
      \ LeaseClient]\n>\n> \n>\n> tags match condition:\n>\n> \n>\n> key: \u2018if_tags_match_condition\u2019\
      , value type: str\n>\n> \n>\n> timeout for subrequest:\n>\n> \n>\n> key: \u2018\
      timeout\u2019, value type: int\n>"
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.str>], <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.dict>],
      or <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.BlobProperties>]
  return:
    description: An async iterator of responses, one for each blob in order
    types:
    - <xref:azure.storage.blob.aio.asynciterator>[<xref:azure.core.pipeline.transport.AsyncHttpResponse>]
- uid: azure.storage.blob.aio.ContainerClient.upload_blob
  name: upload_blob
  summary: Creates a new blob from a data source with automatic chunking.
  signature: 'upload_blob(name, data, blob_type=<Blobtyping.Type.BlockBlob: ''BlockBlob''>,
    length=None, metadata=None, **kwargs)'
  parameters:
  - name: name
    description: 'The blob with which to interact. If specified, this value will override

      a blob value specified in the blob URL.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str> or <xref:azure.storage.blob.BlobProperties>
  - name: data
    description: The blob data to upload.
    isRequired: true
  - name: blob_type
    description: 'The type of the blob. This can be

      either BlockBlob, PageBlob or AppendBlob. The default value is BlockBlob.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobType>
  - name: length
    description: 'Number of bytes to read from the stream. This is optional, but

      should be supplied for optimal performance.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.int>
  - name: metadata
    description: Name-value pairs associated with the blob as metadata.
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.dict>(<xref:azure.storage.blob.aio.str>, <xref:azure.storage.blob.aio.str>)
  return:
    description: A BlobClient to interact with the newly uploaded blob.
    types:
    - <xref:azure.storage.blob.aio.BlobClient>
  examples:
  - "Upload blob to the container.<!--[!code-python[Main](les\\blob_samples_containers_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\89\\\\azure-storage-blob-12.4.0\\\\samples\\\\blob_samples_containers_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with open(SOURCE_FILE, \"rb\") as data:\n       blob_client = await container_client.upload_blob(name=\"\
    myblob\", data=data)\n\n   properties = await blob_client.get_blob_properties()\n\
    \n   ````\n"
- uid: azure.storage.blob.aio.ContainerClient.walk_blobs
  name: walk_blobs
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service. This operation will list blobs in accordance with a hierarchy,

    as delimited by the specified delimiter character.'
  signature: walk_blobs(name_starts_with=None, include=None, delimiter='/', **kwargs)
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  - name: include
    description: 'Specifies one or more additional datasets to include in the response.

      Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
      ''deleted''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.list>[<xref:azure.storage.blob.aio.str>]
  - name: delimiter
    description: 'When the request includes this parameter, the operation returns
      a BlobPrefix

      element in the response body that acts as a placeholder for all blobs whose

      names begin with the same substring up to the appearance of the delimiter

      character. The delimiter may be a single character or a string.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.aio.str>
  return:
    description: An iterable (auto-paging) response of BlobProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.storage.blob.BlobProperties>]
