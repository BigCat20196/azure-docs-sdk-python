### YamlMime:PythonClass
uid: azure.storage.blob.BlobLeaseClient
name: BlobLeaseClient
fullName: azure.storage.blob.BlobLeaseClient
module: azure.storage.blob
inheritances:
- builtins.object
summary: 'Creates a new BlobLeaseClient.


  This client provides lease operations on a BlobClient or ContainerClient.'
constructor:
  syntax: BlobLeaseClient(client, lease_id=None)
  parameters:
  - name: client
    description: The client of the blob or container to lease.
    isRequired: true
  - name: lease_id
    description: 'A string representing the lease ID of an existing lease. This value
      does not

      need to be specified in order to acquire a new lease, or break one.'
    isRequired: true
    types:
    - <xref:str>
variables:
- description: 'The ID of the lease currently being maintained. This will be *None*
    if no

    lease has yet been acquired.'
  name: id
  types:
  - <xref:str>
- description: 'The ETag of the lease currently being maintained. This will be *None*
    if no

    lease has yet been acquired or modified.'
  name: etag
  types:
  - <xref:str>
- description: 'The last modified timestamp of the lease currently being maintained.

    This will be *None* if no lease has yet been acquired or modified.'
  name: last_modified
  types:
  - <xref:datetime.datetime>
methods:
- uid: azure.storage.blob.BlobLeaseClient.acquire
  name: acquire
  summary: 'Requests a new lease.


    If the container does not have an active lease, the Blob service creates a

    lease on the container and returns a new lease ID.'
  signature: acquire(lease_duration=-1, **kwargs)
  parameters:
  - name: lease_duration
    description: 'Specifies the duration of the lease, in seconds, or negative one

      (-1) for a lease that never expires. A non-infinite lease can be

      between 15 and 60 seconds. A lease duration cannot be changed

      using renew or change. Default is -1 (infinite lease).'
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
- uid: azure.storage.blob.BlobLeaseClient.break_lease
  name: break_lease
  summary: 'Break the lease, if the container or blob has an active lease.


    Once a lease is broken, it cannot be renewed. Any authorized request can break
    the lease;

    the request is not required to specify a matching lease ID. When a lease

    is broken, the lease break period is allowed to elapse, during which time

    no lease operation except break and release can be performed on the container
    or blob.

    When a lease is successfully broken, the response indicates the interval

    in seconds until a new lease can be acquired.'
  signature: break_lease(lease_break_period=None, **kwargs)
  parameters:
  - name: lease_break_period
    description: 'This is the proposed duration of seconds that the lease

      should continue before it is broken, between 0 and 60 seconds. This

      break period is only used if it is shorter than the time remaining

      on the lease. If longer, the time remaining on the lease is used.

      A new lease will not be available before the break period has

      expired, but the lease may be held for longer than the break

      period. If this header does not appear with a break

      operation, a fixed-duration lease breaks after the remaining lease

      period elapses, and an infinite lease breaks immediately.'
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Approximate time remaining in the lease period, in seconds.
    types:
    - <xref:int>
- uid: azure.storage.blob.BlobLeaseClient.change
  name: change
  summary: Change the lease ID of an active lease.
  signature: change(proposed_lease_id, **kwargs)
  parameters:
  - name: proposed_lease_id
    description: 'Proposed lease ID, in a GUID string format. The Blob service returns
      400

      (Invalid request) if the proposed lease ID is not in the correct format.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
- uid: azure.storage.blob.BlobLeaseClient.release
  name: release
  summary: 'Release the lease.


    The lease may be released if the client lease id specified matches

    that associated with the container or blob. Releasing the lease allows another
    client

    to immediately acquire the lease for the container or blob as soon as the release
    is complete.'
  signature: release(**kwargs)
  return:
    description: None
- uid: azure.storage.blob.BlobLeaseClient.renew
  name: renew
  summary: 'Renews the lease.


    The lease can be renewed if the lease ID specified in the

    lease client matches that associated with the container or blob. Note that

    the lease may be renewed even if it has expired as long as the container

    or blob has not been leased again since the expiration of that lease. When you

    renew a lease, the lease duration clock resets.'
  signature: renew(**kwargs)
  return:
    description: None
