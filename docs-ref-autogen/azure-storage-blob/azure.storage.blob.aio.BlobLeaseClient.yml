### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.aio.BlobLeaseClient.acquire
  - azure.storage.blob.aio.BlobLeaseClient.break_lease
  - azure.storage.blob.aio.BlobLeaseClient.change
  - azure.storage.blob.aio.BlobLeaseClient.release
  - azure.storage.blob.aio.BlobLeaseClient.renew
  class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._lease.BlobLeaseClient
  langs:
  - python
  module: azure.storage.blob.aio
  name: BlobLeaseClient
  summary: 'Creates a new BlobLeaseClient.


    This client provides lease operations on a BlobClient or ContainerClient.'
  syntax:
    content: BlobLeaseClient(client, lease_id=None)
    parameters:
    - description: The client of the blob or container to lease.
      id: client
      type:
      - azure.storage.blob.aio.BlobClient
      - azure.storage.blob.aio.ContainerClient
    - description: 'A string representing the lease ID of an existing lease. This
        value does not

        need to be specified in order to acquire a new lease, or break one.'
      id: lease_id
      type:
      - str
    variables:
    - description: 'The ID of the lease currently being maintained. This will be *None*
        if no

        lease has yet been acquired.'
      id: id
      type:
      - str
    - description: 'The ETag of the lease currently being maintained. This will be
        *None* if no

        lease has yet been acquired or modified.'
      id: etag
      type:
      - str
    - description: 'The last modified timestamp of the lease currently being maintained.

        This will be *None* if no lease has yet been acquired or modified.'
      id: last_modified
      type:
      - datetime.datetime
  type: class
  uid: azure.storage.blob.aio.BlobLeaseClient
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.acquire
  langs:
  - python
  module: azure.storage.blob.aio
  name: acquire(lease_duration=-1, **kwargs)
  namewithoutparameters: acquire
  summary: "Requests a new lease.\n\nIf the container does not have an active lease,\
    \ the Blob service creates a\nlease on the container and returns a new lease ID.\n\
    \n\n:keyword str if_tags_match_condition\n   Specify a SQL where clause on blob\
    \ tags to operate only on blob with a matching value.\n   eg. \"\"tagname\"='my\
    \ tag'\"\n\n   New in version 12.4.0."
  syntax:
    content: acquire(lease_duration=-1, **kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.acquire
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.break_lease
  langs:
  - python
  module: azure.storage.blob.aio
  name: break_lease(lease_break_period=None, **kwargs)
  namewithoutparameters: break_lease
  summary: "Break the lease, if the container or blob has an active lease.\n\nOnce\
    \ a lease is broken, it cannot be renewed. Any authorized request can break the\
    \ lease;\nthe request is not required to specify a matching lease ID. When a lease\n\
    is broken, the lease break period is allowed to elapse, during which time\nno\
    \ lease operation except break and release can be performed on the container or\
    \ blob.\nWhen a lease is successfully broken, the response indicates the interval\n\
    in seconds until a new lease can be acquired.\n\n\n:keyword str if_tags_match_condition\n\
    \   Specify a SQL where clause on blob tags to operate only on blob with a matching\
    \ value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  syntax:
    content: break_lease(lease_break_period=None, **kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Approximate time remaining in the lease period, in seconds.
      type:
      - int
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.break_lease
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.change
  langs:
  - python
  module: azure.storage.blob.aio
  name: change(proposed_lease_id, **kwargs)
  namewithoutparameters: change
  summary: "Change the lease ID of an active lease.\n\n\n:keyword str if_tags_match_condition\n\
    \   Specify a SQL where clause on blob tags to operate only on blob with a matching\
    \ value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  syntax:
    content: change(proposed_lease_id, **kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.change
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.release
  langs:
  - python
  module: azure.storage.blob.aio
  name: release(**kwargs)
  namewithoutparameters: release
  summary: "Release the lease.\n\nThe lease may be released if the client lease id\
    \ specified matches\nthat associated with the container or blob. Releasing the\
    \ lease allows another client\nto immediately acquire the lease for the container\
    \ or blob as soon as the release is complete.\n\n\n:keyword str if_tags_match_condition\n\
    \   Specify a SQL where clause on blob tags to operate only on blob with a matching\
    \ value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  syntax:
    content: release(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.release
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.renew
  langs:
  - python
  module: azure.storage.blob.aio
  name: renew(**kwargs)
  namewithoutparameters: renew
  summary: "Renews the lease.\n\nThe lease can be renewed if the lease ID specified\
    \ in the\nlease client matches that associated with the container or blob. Note\
    \ that\nthe lease may be renewed even if it has expired as long as the container\n\
    or blob has not been leased again since the expiration of that lease. When you\n\
    renew a lease, the lease duration clock resets.\n\n\n:keyword str if_tags_match_condition\n\
    \   Specify a SQL where clause on blob tags to operate only on blob with a matching\
    \ value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  syntax:
    content: renew(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.renew
references:
- fullName: azure.storage.blob.aio.BlobLeaseClient.acquire
  isExternal: false
  name: acquire(lease_duration=-1, **kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.acquire
- fullName: azure.storage.blob.aio.BlobLeaseClient.break_lease
  isExternal: false
  name: break_lease(lease_break_period=None, **kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.break_lease
- fullName: azure.storage.blob.aio.BlobLeaseClient.change
  isExternal: false
  name: change(proposed_lease_id, **kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.change
- fullName: azure.storage.blob.aio.BlobLeaseClient.release
  isExternal: false
  name: release(**kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.release
- fullName: azure.storage.blob.aio.BlobLeaseClient.renew
  isExternal: false
  name: renew(**kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.renew
